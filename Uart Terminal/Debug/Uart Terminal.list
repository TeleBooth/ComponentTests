
Uart Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000912c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009344  08009344  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800934c  0800934c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000194  080094e8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db8  080094e8  00021db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cdaf  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003846  00000000  00000000  0003cf73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  000407c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00041da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a385  00000000  00000000  000431d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000132e1  00000000  00000000  0006d55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6a2d  00000000  00000000  0008083e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017726b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b44  00000000  00000000  001772e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800929c 	.word	0x0800929c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	0800929c 	.word	0x0800929c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa68 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f805 	bl	80004de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f88e 	bl	80005f4 <MX_GPIO_Init>
  //MX_DMA_Init();
  //MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 80004d8:	f007 fefc 	bl	80082d4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x14>

080004de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b0b8      	sub	sp, #224	; 0xe0
 80004e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004e8:	2244      	movs	r2, #68	; 0x44
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f008 fecd 	bl	800928c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2288      	movs	r2, #136	; 0x88
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f008 febf 	bl	800928c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800050e:	2310      	movs	r3, #16
 8000510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000514:	2301      	movs	r3, #1
 8000516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000520:	2360      	movs	r3, #96	; 0x60
 8000522:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800052c:	2301      	movs	r3, #1
 800052e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000538:	2328      	movs	r3, #40	; 0x28
 800053a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053e:	2307      	movs	r3, #7
 8000540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800054a:	2302      	movs	r3, #2
 800054c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fa79 	bl	8002a4c <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000560:	f000 f86c 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	2303      	movs	r3, #3
 800056c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000582:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000586:	2104      	movs	r1, #4
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fe45 	bl	8003218 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000594:	f000 f852 	bl	800063c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000598:	f242 0302 	movw	r3, #8194	; 0x2002
 800059c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059e:	2300      	movs	r3, #0
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005b0:	2318      	movs	r3, #24
 80005b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80005c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f829 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80005d4:	f000 f832 	bl	800063c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005dc:	f002 f9d0 	bl	8002980 <HAL_PWREx_ControlVoltageScaling>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80005e6:	f000 f829 	bl	800063c <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	37e0      	adds	r7, #224	; 0xe0
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_GPIO_Init+0x44>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <MX_GPIO_Init+0x44>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_GPIO_Init+0x44>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_GPIO_Init+0x44>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <MX_GPIO_Init+0x44>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_GPIO_Init+0x44>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x44>)
 8000654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x44>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6613      	str	r3, [r2, #96]	; 0x60
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x44>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x44>)
 800066c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x44>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6593      	str	r3, [r2, #88]	; 0x58
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x44>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a4a      	ldr	r2, [pc, #296]	; (80007dc <HAL_UART_MspInit+0x148>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	f040 808e 	bne.w	80007d4 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

	  /* Enable USARTx clock */
	    USARTx_CLK_ENABLE();
 80006b8:	4b49      	ldr	r3, [pc, #292]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006bc:	4a48      	ldr	r2, [pc, #288]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	6593      	str	r3, [r2, #88]	; 0x58
 80006c4:	4b46      	ldr	r3, [pc, #280]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	61bb      	str	r3, [r7, #24]
 80006ce:	69bb      	ldr	r3, [r7, #24]

	    /* Enable DMA clock */
	    DMAx_CLK_ENABLE();
 80006d0:	4b43      	ldr	r3, [pc, #268]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d4:	4a42      	ldr	r2, [pc, #264]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6493      	str	r3, [r2, #72]	; 0x48
 80006dc:	4b40      	ldr	r3, [pc, #256]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e8:	4b3d      	ldr	r3, [pc, #244]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ec:	4a3c      	ldr	r2, [pc, #240]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f2:	6593      	str	r3, [r2, #88]	; 0x58
 80006f4:	4b3a      	ldr	r3, [pc, #232]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80006f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b37      	ldr	r3, [pc, #220]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000704:	4a36      	ldr	r2, [pc, #216]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070c:	4b34      	ldr	r3, [pc, #208]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 800070e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000718:	230c      	movs	r3, #12
 800071a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000728:	2307      	movs	r3, #7
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fdd9 	bl	80012ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <HAL_UART_MspInit+0x150>)
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <HAL_UART_MspInit+0x154>)
 800073e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000742:	2202      	movs	r2, #2
 8000744:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000748:	2210      	movs	r2, #16
 800074a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <HAL_UART_MspInit+0x150>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <HAL_UART_MspInit+0x150>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_UART_MspInit+0x150>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000770:	481c      	ldr	r0, [pc, #112]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000772:	f000 faf1 	bl	8000d58 <HAL_DMA_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800077c:	f7ff ff5e 	bl	800063c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000784:	669a      	str	r2, [r3, #104]	; 0x68
 8000786:	4a17      	ldr	r2, [pc, #92]	; (80007e4 <HAL_UART_MspInit+0x150>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2026      	movs	r0, #38	; 0x26
 8000792:	f000 fa9c 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000796:	2026      	movs	r0, #38	; 0x26
 8000798:	f000 fab5 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 5, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2105      	movs	r1, #5
 80007a0:	2011      	movs	r0, #17
 80007a2:	f000 fa94 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80007a6:	2011      	movs	r0, #17
 80007a8:	f000 faad 	bl	8000d06 <HAL_NVIC_EnableIRQ>


    TIMx_CLK_ENABLE();
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80007ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6593      	str	r3, [r2, #88]	; 0x58
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_UART_MspInit+0x14c>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]

    HAL_NVIC_SetPriority(TIMx_IRQn, 5, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2105      	movs	r1, #5
 80007c8:	201d      	movs	r0, #29
 80007ca:	f000 fa80 	bl	8000cce <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80007ce:	201d      	movs	r0, #29
 80007d0:	f000 fa99 	bl	8000d06 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40004400 	.word	0x40004400
 80007e0:	40021000 	.word	0x40021000
 80007e4:	200003dc 	.word	0x200003dc
 80007e8:	40020080 	.word	0x40020080

080007ec <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_UART_MspDeInit+0x40>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d112      	bne.n	8000824 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_UART_MspDeInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_UART_MspDeInit+0x44>)
 8000804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800080a:	210c      	movs	r1, #12
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 ff14 	bl	800163c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fb55 	bl	8000ec8 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800081e:	2026      	movs	r0, #38	; 0x26
 8000820:	f000 fa7f 	bl	8000d22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40004400 	.word	0x40004400
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f8e4 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <DMA1_Channel7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void DMA1_Channel7_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <DMA1_Channel7_IRQHandler+0x10>)
 8000896:	f000 fc4a 	bl	800112e <HAL_DMA_IRQHandler>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200003dc 	.word	0x200003dc

080008a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USART2_IRQHandler+0x10>)
 80008aa:	f003 ff6b 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000424 	.word	0x20000424

080008b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <OTG_FS_IRQHandler+0x10>)
 80008be:	f001 f904 	bl	8001aca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200019b0 	.word	0x200019b0

080008cc <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM3_IRQHandler+0x10>)
 80008d2:	f003 fbb5 	bl	8004040 <HAL_TIM_IRQHandler>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20001770 	.word	0x20001770

080008e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <SystemInit+0x64>)
 80008e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <SystemInit+0x64>)
 80008ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <SystemInit+0x68>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <SystemInit+0x68>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <SystemInit+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <SystemInit+0x68>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <SystemInit+0x68>)
 800090c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000910:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000914:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <SystemInit+0x68>)
 8000918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800091c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <SystemInit+0x68>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a09      	ldr	r2, [pc, #36]	; (8000948 <SystemInit+0x68>)
 8000924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000928:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <SystemInit+0x68>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SystemInit+0x64>)
 8000932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000936:	609a      	str	r2, [r3, #8]
#endif
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	40021000 	.word	0x40021000

0800094c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000950:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000952:	e003      	b.n	800095c <LoopCopyDataInit>

08000954 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000956:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000958:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800095a:	3104      	adds	r1, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <LoopForever+0xa>)
	ldr	r3, =_edata
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000960:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000962:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000964:	d3f6      	bcc.n	8000954 <CopyDataInit>
	ldr	r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000968:	e002      	b.n	8000970 <LoopFillZerobss>

0800096a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800096a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800096c:	f842 3b04 	str.w	r3, [r2], #4

08000970 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <LoopForever+0x16>)
	cmp	r2, r3
 8000972:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000974:	d3f9      	bcc.n	800096a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000976:	f7ff ffb3 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f008 fc63 	bl	8009244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097e:	f7ff fda3 	bl	80004c8 <main>

08000982 <LoopForever>:

LoopForever:
    b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000988:	08009354 	.word	0x08009354
	ldr	r0, =_sdata
 800098c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000990:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 8000994:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 8000998:	20001db8 	.word	0x20001db8

0800099c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_2_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_Init+0x3c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <HAL_Init+0x3c>)
 80009b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 f97e 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f80f 	bl	80009e0 <HAL_InitTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e001      	b.n	80009d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ce:	f7ff fe3d 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_InitTick+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d022      	beq.n	8000a3a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_InitTick+0x6c>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_InitTick+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f998 	bl	8000d3e <HAL_SYSTICK_Config>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10f      	bne.n	8000a34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b0f      	cmp	r3, #15
 8000a18:	d809      	bhi.n	8000a2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a22:	f000 f954 	bl	8000cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_InitTick+0x70>)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	e007      	b.n	8000a3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
 8000a32:	e004      	b.n	8000a3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e001      	b.n	8000a3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3710      	adds	r7, #16
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	200004a4 	.word	0x200004a4
 8000a74:	20000008 	.word	0x20000008

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200004a4 	.word	0x200004a4

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d004      	beq.n	8000ab4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_Delay+0x40>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab4:	bf00      	nop
 8000ab6:	f7ff ffdf 	bl	8000a78 <HAL_GetTick>
 8000aba:	4602      	mov	r2, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d8f7      	bhi.n	8000ab6 <HAL_Delay+0x26>
  {
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	; (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db10      	blt.n	8000ba8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <__NVIC_DisableIRQ+0x40>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ba4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff8e 	bl	8000bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff07 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff1c 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff8e 	bl	8000c0c <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5d 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff0f 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff1f 	bl	8000b74 <__NVIC_DisableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff94 	bl	8000c74 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e098      	b.n	8000e9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_DMA_Init+0x150>)
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d80f      	bhi.n	8000d96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <HAL_DMA_Init+0x154>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <HAL_DMA_Init+0x158>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	091b      	lsrs	r3, r3, #4
 8000d88:	009a      	lsls	r2, r3, #2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <HAL_DMA_Init+0x15c>)
 8000d92:	641a      	str	r2, [r3, #64]	; 0x40
 8000d94:	e00e      	b.n	8000db4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <HAL_DMA_Init+0x160>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a43      	ldr	r2, [pc, #268]	; (8000eb0 <HAL_DMA_Init+0x158>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	009a      	lsls	r2, r3, #2
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a42      	ldr	r2, [pc, #264]	; (8000ebc <HAL_DMA_Init+0x164>)
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2202      	movs	r2, #2
 8000db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a1b      	ldr	r3, [r3, #32]
 8000df6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e0e:	d039      	beq.n	8000e84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <HAL_DMA_Init+0x15c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11a      	bne.n	8000e50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_DMA_Init+0x168>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f003 031c 	and.w	r3, r3, #28
 8000e26:	210f      	movs	r1, #15
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4924      	ldr	r1, [pc, #144]	; (8000ec0 <HAL_DMA_Init+0x168>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_DMA_Init+0x168>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6859      	ldr	r1, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	f003 031c 	and.w	r3, r3, #28
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	491d      	ldr	r1, [pc, #116]	; (8000ec0 <HAL_DMA_Init+0x168>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
 8000e4e:	e019      	b.n	8000e84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_DMA_Init+0x16c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	f003 031c 	and.w	r3, r3, #28
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <HAL_DMA_Init+0x16c>)
 8000e66:	4013      	ands	r3, r2
 8000e68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_DMA_Init+0x16c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6859      	ldr	r1, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f003 031c 	and.w	r3, r3, #28
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	4911      	ldr	r1, [pc, #68]	; (8000ec4 <HAL_DMA_Init+0x16c>)
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40020407 	.word	0x40020407
 8000eac:	bffdfff8 	.word	0xbffdfff8
 8000eb0:	cccccccd 	.word	0xcccccccd
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	bffdfbf8 	.word	0xbffdfbf8
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	400200a8 	.word	0x400200a8
 8000ec4:	400204a8 	.word	0x400204a8

08000ec8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e072      	b.n	8000fc0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_DMA_DeInit+0x104>)
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d80f      	bhi.n	8000f16 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_DMA_DeInit+0x108>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <HAL_DMA_DeInit+0x10c>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	009a      	lsls	r2, r3, #2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a31      	ldr	r2, [pc, #196]	; (8000fd8 <HAL_DMA_DeInit+0x110>)
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
 8000f14:	e00e      	b.n	8000f34 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_DMA_DeInit+0x114>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a2c      	ldr	r2, [pc, #176]	; (8000fd4 <HAL_DMA_DeInit+0x10c>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	009a      	lsls	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a2b      	ldr	r2, [pc, #172]	; (8000fe0 <HAL_DMA_DeInit+0x118>)
 8000f32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f40:	f003 021c 	and.w	r2, r3, #28
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	2101      	movs	r1, #1
 8000f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <HAL_DMA_DeInit+0x110>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10d      	bne.n	8000f76 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f5a:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <HAL_DMA_DeInit+0x11c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f003 031c 	and.w	r3, r3, #28
 8000f66:	210f      	movs	r1, #15
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	491d      	ldr	r1, [pc, #116]	; (8000fe4 <HAL_DMA_DeInit+0x11c>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e00c      	b.n	8000f90 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_DMA_DeInit+0x120>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f003 031c 	and.w	r3, r3, #28
 8000f82:	210f      	movs	r1, #15
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	4917      	ldr	r1, [pc, #92]	; (8000fe8 <HAL_DMA_DeInit+0x120>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40020407 	.word	0x40020407
 8000fd0:	bffdfff8 	.word	0xbffdfff8
 8000fd4:	cccccccd 	.word	0xcccccccd
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	bffdfbf8 	.word	0xbffdfbf8
 8000fe0:	40020400 	.word	0x40020400
 8000fe4:	400200a8 	.word	0x400200a8
 8000fe8:	400204a8 	.word	0x400204a8

08000fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_DMA_Start_IT+0x20>
 8001008:	2302      	movs	r3, #2
 800100a:	e04b      	b.n	80010a4 <HAL_DMA_Start_IT+0xb8>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2201      	movs	r2, #1
 8001010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d13a      	bne.n	8001096 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f921 	bl	800128c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	2b00      	cmp	r3, #0
 8001050:	d008      	beq.n	8001064 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 020e 	orr.w	r2, r2, #14
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e00f      	b.n	8001084 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0204 	bic.w	r2, r2, #4
 8001072:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 020a 	orr.w	r2, r2, #10
 8001082:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	e005      	b.n	80010a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800109e:	2302      	movs	r3, #2
 80010a0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d005      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2204      	movs	r2, #4
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	e029      	b.n	8001124 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020e 	bic.w	r2, r2, #14
 80010de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0201 	bic.w	r2, r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	f003 021c 	and.w	r2, r3, #28
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
    }
  }
  return status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 031c 	and.w	r3, r3, #28
 800114e:	2204      	movs	r2, #4
 8001150:	409a      	lsls	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d026      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x7a>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d021      	beq.n	80011a8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0320 	and.w	r3, r3, #32
 800116e:	2b00      	cmp	r3, #0
 8001170:	d107      	bne.n	8001182 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0204 	bic.w	r2, r2, #4
 8001180:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 021c 	and.w	r2, r3, #28
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2104      	movs	r1, #4
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	2b00      	cmp	r3, #0
 800119c:	d071      	beq.n	8001282 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011a6:	e06c      	b.n	8001282 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f003 031c 	and.w	r3, r3, #28
 80011b0:	2202      	movs	r2, #2
 80011b2:	409a      	lsls	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d02e      	beq.n	800121a <HAL_DMA_IRQHandler+0xec>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d029      	beq.n	800121a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0320 	and.w	r3, r3, #32
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10b      	bne.n	80011ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020a 	bic.w	r2, r2, #10
 80011e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f003 021c 	and.w	r2, r3, #28
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	2102      	movs	r1, #2
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d038      	beq.n	8001282 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001218:	e033      	b.n	8001282 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 031c 	and.w	r3, r3, #28
 8001222:	2208      	movs	r2, #8
 8001224:	409a      	lsls	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d02a      	beq.n	8001284 <HAL_DMA_IRQHandler+0x156>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d025      	beq.n	8001284 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020e 	bic.w	r2, r2, #14
 8001246:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 021c 	and.w	r2, r3, #28
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001282:	bf00      	nop
 8001284:	bf00      	nop
}
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 021c 	and.w	r2, r3, #28
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d108      	bne.n	80012d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012ce:	e007      	b.n	80012e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	e17f      	b.n	80015fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8171 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d00b      	beq.n	8001334 <HAL_GPIO_Init+0x48>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001328:	2b11      	cmp	r3, #17
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b12      	cmp	r3, #18
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d118      	bne.n	80013d4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a8:	2201      	movs	r2, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f003 0201 	and.w	r2, r3, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x128>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ac 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b5e      	ldr	r3, [pc, #376]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	4a5d      	ldr	r2, [pc, #372]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	; 0x60
 80014aa:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_GPIO_Init+0x32c>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b6:	4a59      	ldr	r2, [pc, #356]	; (800161c <HAL_GPIO_Init+0x330>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x242>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <HAL_GPIO_Init+0x334>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x23e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4d      	ldr	r2, [pc, #308]	; (8001624 <HAL_GPIO_Init+0x338>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x33c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x236>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4b      	ldr	r2, [pc, #300]	; (800162c <HAL_GPIO_Init+0x340>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x232>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4a      	ldr	r2, [pc, #296]	; (8001630 <HAL_GPIO_Init+0x344>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a49      	ldr	r2, [pc, #292]	; (8001634 <HAL_GPIO_Init+0x348>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x22a>
 8001512:	2306      	movs	r3, #6
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001516:	2307      	movs	r3, #7
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001540:	4936      	ldr	r1, [pc, #216]	; (800161c <HAL_GPIO_Init+0x330>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_GPIO_Init+0x34c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001572:	4a31      	ldr	r2, [pc, #196]	; (8001638 <HAL_GPIO_Init+0x34c>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_GPIO_Init+0x34c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800159c:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_GPIO_Init+0x34c>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_GPIO_Init+0x34c>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_GPIO_Init+0x34c>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <HAL_GPIO_Init+0x34c>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_GPIO_Init+0x34c>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f ae78 	bne.w	80012fc <HAL_GPIO_Init+0x10>
  }
}
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48001800 	.word	0x48001800
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800164a:	e0cd      	b.n	80017e8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800164c:	2201      	movs	r2, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80c0 	beq.w	80017e2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001662:	4a68      	ldr	r2, [pc, #416]	; (8001804 <HAL_GPIO_DeInit+0x1c8>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800168a:	d025      	beq.n	80016d8 <HAL_GPIO_DeInit+0x9c>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a5e      	ldr	r2, [pc, #376]	; (8001808 <HAL_GPIO_DeInit+0x1cc>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d01f      	beq.n	80016d4 <HAL_GPIO_DeInit+0x98>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a5d      	ldr	r2, [pc, #372]	; (800180c <HAL_GPIO_DeInit+0x1d0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d019      	beq.n	80016d0 <HAL_GPIO_DeInit+0x94>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <HAL_GPIO_DeInit+0x1d4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d013      	beq.n	80016cc <HAL_GPIO_DeInit+0x90>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a5b      	ldr	r2, [pc, #364]	; (8001814 <HAL_GPIO_DeInit+0x1d8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00d      	beq.n	80016c8 <HAL_GPIO_DeInit+0x8c>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a5a      	ldr	r2, [pc, #360]	; (8001818 <HAL_GPIO_DeInit+0x1dc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d007      	beq.n	80016c4 <HAL_GPIO_DeInit+0x88>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a59      	ldr	r2, [pc, #356]	; (800181c <HAL_GPIO_DeInit+0x1e0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d101      	bne.n	80016c0 <HAL_GPIO_DeInit+0x84>
 80016bc:	2306      	movs	r3, #6
 80016be:	e00c      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016c0:	2307      	movs	r3, #7
 80016c2:	e00a      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016c4:	2305      	movs	r3, #5
 80016c6:	e008      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016c8:	2304      	movs	r3, #4
 80016ca:	e006      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e004      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <HAL_GPIO_DeInit+0x9e>
 80016d8:	2300      	movs	r3, #0
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	f002 0203 	and.w	r2, r2, #3
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	4093      	lsls	r3, r2
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d132      	bne.n	8001750 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	494b      	ldr	r1, [pc, #300]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4947      	ldr	r1, [pc, #284]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 8001702:	4013      	ands	r3, r2
 8001704:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	4944      	ldr	r1, [pc, #272]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 8001710:	4013      	ands	r3, r2
 8001712:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	43db      	mvns	r3, r3
 800171c:	4940      	ldr	r1, [pc, #256]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 800171e:	4013      	ands	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_GPIO_DeInit+0x1c8>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	43da      	mvns	r2, r3
 8001742:	4830      	ldr	r0, [pc, #192]	; (8001804 <HAL_GPIO_DeInit+0x1c8>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	400a      	ands	r2, r1
 800174a:	3302      	adds	r3, #2
 800174c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2103      	movs	r1, #3
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	08d2      	lsrs	r2, r2, #3
 8001784:	4019      	ands	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2103      	movs	r1, #3
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	2101      	movs	r1, #1
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2103      	movs	r1, #3
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	401a      	ands	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017d2:	2101      	movs	r1, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	fa22 f303 	lsr.w	r3, r2, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f af2b 	bne.w	800164c <HAL_GPIO_DeInit+0x10>
  }
}
 80017f6:	bf00      	nop
 80017f8:	371c      	adds	r7, #28
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40010000 	.word	0x40010000
 8001808:	48000400 	.word	0x48000400
 800180c:	48000800 	.word	0x48000800
 8001810:	48000c00 	.word	0x48000c00
 8001814:	48001000 	.word	0x48001000
 8001818:	48001400 	.word	0x48001400
 800181c:	48001800 	.word	0x48001800
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b08f      	sub	sp, #60	; 0x3c
 8001828:	af0a      	add	r7, sp, #40	; 0x28
 800182a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e116      	b.n	8001a64 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d106      	bne.n	8001856 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f007 f8db 	bl	8008a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f004 f834 	bl	80058e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	687e      	ldr	r6, [r7, #4]
 8001882:	466d      	mov	r5, sp
 8001884:	f106 0410 	add.w	r4, r6, #16
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001894:	e885 0003 	stmia.w	r5, {r0, r1}
 8001898:	1d33      	adds	r3, r6, #4
 800189a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189c:	6838      	ldr	r0, [r7, #0]
 800189e:	f003 ff21 	bl	80056e4 <USB_CoreInit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d7      	b.n	8001a64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 f822 	bl	8005904 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e04a      	b.n	800195c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	333d      	adds	r3, #61	; 0x3d
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	333c      	adds	r3, #60	; 0x3c
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	b298      	uxth	r0, r3
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	4602      	mov	r2, r0
 8001904:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	333f      	adds	r3, #63	; 0x3f
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800191a:	7bfa      	ldrb	r2, [r7, #15]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3344      	adds	r3, #68	; 0x44
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	1a9b      	subs	r3, r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3348      	adds	r3, #72	; 0x48
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001942:	7bfa      	ldrb	r2, [r7, #15]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3350      	adds	r3, #80	; 0x50
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3301      	adds	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3af      	bcc.n	80018c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
 800196a:	e044      	b.n	80019f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800196c:	7bfa      	ldrb	r2, [r7, #15]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	1a9b      	subs	r3, r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ae:	7bfa      	ldrb	r2, [r7, #15]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	1a9b      	subs	r3, r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	3301      	adds	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d3b5      	bcc.n	800196c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	687e      	ldr	r6, [r7, #4]
 8001a08:	466d      	mov	r5, sp
 8001a0a:	f106 0410 	add.w	r4, r6, #16
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1e:	1d33      	adds	r3, r6, #4
 8001a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f003 ff98 	bl	8005958 <USB_DevInit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e014      	b.n	8001a64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 ff62 	bl	800291c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 ff11 	bl	8006884 <USB_DevDisconnect>

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_Start+0x1c>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e01c      	b.n	8001ac2 <HAL_PCD_Start+0x56>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fed3 	bl	8006854 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 ff04 	bl	80058c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aca:	b590      	push	{r4, r7, lr}
 8001acc:	b08d      	sub	sp, #52	; 0x34
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f004 ff7a 	bl	80069da <USB_GetMode>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f040 838f 	bne.w	800220c <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f004 fede 	bl	80068b4 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8385 	beq.w	800220a <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 fed5 	bl	80068b4 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d107      	bne.n	8001b24 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f002 0202 	and.w	r2, r2, #2
 8001b22:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fec3 	bl	80068b4 <USB_ReadInterrupts>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b10      	cmp	r3, #16
 8001b36:	d161      	bne.n	8001bfc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0210 	bic.w	r2, r2, #16
 8001b46:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 020f 	and.w	r2, r3, #15
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	0c5b      	lsrs	r3, r3, #17
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d124      	bne.n	8001bbe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d035      	beq.n	8001bec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	6a38      	ldr	r0, [r7, #32]
 8001b94:	f004 fd3b 	bl	800660e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba4:	441a      	add	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb6:	441a      	add	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	e016      	b.n	8001bec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	0c5b      	lsrs	r3, r3, #17
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d110      	bne.n	8001bec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	6a38      	ldr	r0, [r7, #32]
 8001bd6:	f004 fd1a 	bl	800660e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	699a      	ldr	r2, [r3, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001be6:	441a      	add	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0210 	orr.w	r2, r2, #16
 8001bfa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fe57 	bl	80068b4 <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c10:	d16e      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f004 fe5d 	bl	80068da <USB_ReadDevAllOutEpInterrupt>
 8001c20:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c22:	e062      	b.n	8001cea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d057      	beq.n	8001cde <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f004 fe82 	bl	8006942 <USB_ReadDevOutEPInterrupt>
 8001c3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00c      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	015a      	lsls	r2, r3, #5
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	4413      	add	r3, r2
 8001c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c56:	461a      	mov	r2, r3
 8001c58:	2301      	movs	r3, #1
 8001c5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fd82 	bl	8002768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 fdbe 	bl	8002804 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	015a      	lsls	r2, r3, #5
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cdc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d199      	bne.n	8001c24 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 fddd 	bl	80068b4 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d04:	f040 8087 	bne.w	8001e16 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fdfe 	bl	800690e <USB_ReadDevAllInEpInterrupt>
 8001d12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d18:	e07a      	b.n	8001e10 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d06f      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fe25 	bl	800697e <USB_ReadDevInEPInterrupt>
 8001d34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d020      	beq.n	8001d82 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2201      	movs	r2, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69f9      	ldr	r1, [r7, #28]
 8001d5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d60:	4013      	ands	r3, r2
 8001d62:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d70:	461a      	mov	r2, r3
 8001d72:	2301      	movs	r3, #1
 8001d74:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f006 fed8 	bl	8008b32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	015a      	lsls	r2, r3, #5
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	4413      	add	r3, r2
 8001db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db4:	461a      	mov	r2, r3
 8001db6:	2310      	movs	r3, #16
 8001db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dec:	461a      	mov	r2, r3
 8001dee:	2302      	movs	r3, #2
 8001df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fc29 	bl	8002656 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	3301      	adds	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d181      	bne.n	8001d1a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fd4a 	bl	80068b4 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e2a:	d122      	bne.n	8001e72 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e52:	2100      	movs	r1, #0
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f007 f989 	bl	800916c <HAL_PCDEx_LPM_Callback>
 8001e5a:	e002      	b.n	8001e62 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f006 fed5 	bl	8008c0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fd1c 	bl	80068b4 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e86:	d112      	bne.n	8001eae <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f006 fe91 	bl	8008bc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001eac:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fcfe 	bl	80068b4 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ec2:	d121      	bne.n	8001f08 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001ed2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d111      	bne.n	8001f02 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f007 f936 	bl	800916c <HAL_PCDEx_LPM_Callback>
 8001f00:	e002      	b.n	8001f08 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f006 fe5c 	bl	8008bc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fcd1 	bl	80068b4 <USB_ReadInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1c:	f040 80c5 	bne.w	80020aa <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2110      	movs	r1, #16
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fe58 	bl	8005bf0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f44:	e056      	b.n	8001ff4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	461a      	mov	r2, r3
 8001f54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f58:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f6a:	0151      	lsls	r1, r2, #5
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	440a      	add	r2, r1
 8001f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f78:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8a:	0151      	lsls	r1, r2, #5
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	440a      	add	r2, r1
 8001f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	0151      	lsls	r1, r2, #5
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fe8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3a3      	bcc.n	8001f46 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002010:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800202a:	f043 030b 	orr.w	r3, r3, #11
 800202e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	69fa      	ldr	r2, [r7, #28]
 800203c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002040:	f043 030b 	orr.w	r3, r3, #11
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	e015      	b.n	8002074 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002056:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800205a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800205e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800206e:	f043 030b 	orr.w	r3, r3, #11
 8002072:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002082:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002086:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002092:	4619      	mov	r1, r3
 8002094:	4610      	mov	r0, r2
 8002096:	f004 fcd1 	bl	8006a3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fc00 	bl	80068b4 <USB_ReadInterrupts>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020be:	d124      	bne.n	800210a <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fc96 	bl	80069f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fdef 	bl	8005cb2 <USB_GetDevSpeed>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461a      	mov	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	f001 fa06 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 80020e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	4620      	mov	r0, r4
 80020f0:	f003 fb4a 	bl	8005788 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f006 fd44 	bl	8008b82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002108:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fbd0 	bl	80068b4 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b08      	cmp	r3, #8
 800211c:	d10a      	bne.n	8002134 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f006 fd21 	bl	8008b66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f002 0208 	and.w	r2, r2, #8
 8002132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fbbb 	bl	80068b4 <USB_ReadInterrupts>
 800213e:	4603      	mov	r3, r0
 8002140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002148:	d10f      	bne.n	800216a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f006 fd93 	bl	8008c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f004 fba0 	bl	80068b4 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800217e:	d10f      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f006 fd66 	bl	8008c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800219e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 fb85 	bl	80068b4 <USB_ReadInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d10a      	bne.n	80021cc <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f006 fd74 	bl	8008ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 fb6f 	bl	80068b4 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d115      	bne.n	800220c <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f006 fd64 	bl	8008cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6859      	ldr	r1, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	430a      	orrs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	e000      	b.n	800220c <HAL_PCD_IRQHandler+0x742>
      return;
 800220a:	bf00      	nop
    }
  }
}
 800220c:	3734      	adds	r7, #52	; 0x34
 800220e:	46bd      	mov	sp, r7
 8002210:	bd90      	pop	{r4, r7, pc}

08002212 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_PCD_SetAddress+0x1a>
 8002228:	2302      	movs	r3, #2
 800222a:	e013      	b.n	8002254 <HAL_PCD_SetAddress+0x42>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f004 fadf 	bl	8006808 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	70fb      	strb	r3, [r7, #3]
 800226e:	460b      	mov	r3, r1
 8002270:	803b      	strh	r3, [r7, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800227a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da0f      	bge.n	80022a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 020f 	and.w	r2, r3, #15
 8002288:	4613      	mov	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	3338      	adds	r3, #56	; 0x38
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	705a      	strb	r2, [r3, #1]
 80022a0:	e00f      	b.n	80022c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022ce:	883a      	ldrh	r2, [r7, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	78ba      	ldrb	r2, [r7, #2]
 80022d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022ec:	78bb      	ldrb	r3, [r7, #2]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d102      	bne.n	80022f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_EP_Open+0xaa>
 8002302:	2302      	movs	r3, #2
 8002304:	e00e      	b.n	8002324 <HAL_PCD_EP_Open+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	4618      	mov	r0, r3
 8002316:	f003 fceb 	bl	8005cf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002322:	7afb      	ldrb	r3, [r7, #11]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800233c:	2b00      	cmp	r3, #0
 800233e:	da0f      	bge.n	8002360 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 020f 	and.w	r2, r3, #15
 8002346:	4613      	mov	r3, r2
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	3338      	adds	r3, #56	; 0x38
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4413      	add	r3, r2
 8002354:	3304      	adds	r3, #4
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	705a      	strb	r2, [r3, #1]
 800235e:	e00f      	b.n	8002380 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002360:	78fb      	ldrb	r3, [r7, #3]
 8002362:	f003 020f 	and.w	r2, r3, #15
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_PCD_EP_Close+0x6e>
 8002396:	2302      	movs	r3, #2
 8002398:	e00e      	b.n	80023b8 <HAL_PCD_EP_Close+0x8c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68f9      	ldr	r1, [r7, #12]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fd29 	bl	8005e00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	460b      	mov	r3, r1
 80023ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	7afb      	ldrb	r3, [r7, #11]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2200      	movs	r2, #0
 8002400:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	b2da      	uxtb	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800240e:	7afb      	ldrb	r3, [r7, #11]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	2b00      	cmp	r3, #0
 8002416:	d106      	bne.n	8002426 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6979      	ldr	r1, [r7, #20]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 ffa6 	bl	8006370 <USB_EP0StartXfer>
 8002424:	e005      	b.n	8002432 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fdc3 	bl	8005fb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	f003 020f 	and.w	r2, r3, #15
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	460b      	mov	r3, r1
 800247a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	f003 020f 	and.w	r2, r3, #15
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	3338      	adds	r3, #56	; 0x38
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2201      	movs	r2, #1
 80024aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024b8:	7afb      	ldrb	r3, [r7, #11]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6979      	ldr	r1, [r7, #20]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 ff51 	bl	8006370 <USB_EP0StartXfer>
 80024ce:	e005      	b.n	80024dc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6979      	ldr	r1, [r7, #20]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 fd6e 	bl	8005fb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 020f 	and.w	r2, r3, #15
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d901      	bls.n	8002504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04e      	b.n	80025a2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da0f      	bge.n	800252c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 020f 	and.w	r2, r3, #15
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3338      	adds	r3, #56	; 0x38
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	705a      	strb	r2, [r3, #1]
 800252a:	e00d      	b.n	8002548 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4413      	add	r3, r2
 800253e:	3304      	adds	r3, #4
 8002540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_PCD_EP_SetStall+0x82>
 8002564:	2302      	movs	r3, #2
 8002566:	e01c      	b.n	80025a2 <HAL_PCD_EP_SetStall+0xbc>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	4618      	mov	r0, r3
 8002578:	f004 f872 	bl	8006660 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f004 fa52 	bl	8006a3c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 020f 	and.w	r2, r3, #15
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d901      	bls.n	80025c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e042      	b.n	800264e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da0f      	bge.n	80025f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 020f 	and.w	r2, r3, #15
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3338      	adds	r3, #56	; 0x38
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	705a      	strb	r2, [r3, #1]
 80025ee:	e00f      	b.n	8002610 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 020f 	and.w	r2, r3, #15
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	3304      	adds	r3, #4
 8002608:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_PCD_EP_ClrStall+0x86>
 800262c:	2302      	movs	r3, #2
 800262e:	e00e      	b.n	800264e <HAL_PCD_EP_ClrStall+0xa4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	4618      	mov	r0, r3
 8002640:	f004 f87c 	bl	800673c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b088      	sub	sp, #32
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3338      	adds	r3, #56	; 0x38
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	3304      	adds	r3, #4
 800267c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699a      	ldr	r2, [r3, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d901      	bls.n	800268e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e067      	b.n	800275e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d902      	bls.n	80026aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3303      	adds	r3, #3
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026b2:	e026      	b.n	8002702 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d902      	bls.n	80026d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	3303      	adds	r3, #3
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	68d9      	ldr	r1, [r3, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	6978      	ldr	r0, [r7, #20]
 80026e6:	f003 ff61 	bl	80065ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	441a      	add	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	441a      	add	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	b29b      	uxth	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	429a      	cmp	r2, r3
 8002716:	d809      	bhi.n	800272c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002720:	429a      	cmp	r2, r3
 8002722:	d203      	bcs.n	800272c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1c3      	bne.n	80026b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	429a      	cmp	r2, r3
 8002736:	d811      	bhi.n	800275c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800274c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	43db      	mvns	r3, r3
 8002752:	6939      	ldr	r1, [r7, #16]
 8002754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002758:	4013      	ands	r3, r2
 800275a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	333c      	adds	r3, #60	; 0x3c
 8002780:	3304      	adds	r3, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <PCD_EP_OutXfrComplete_int+0x98>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d124      	bne.n	80027e8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b4:	461a      	mov	r2, r3
 80027b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ba:	6093      	str	r3, [r2, #8]
 80027bc:	e01a      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	2320      	movs	r3, #32
 80027d8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	4619      	mov	r1, r3
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f006 f98b 	bl	8008afc <HAL_PCD_DataOutStageCallback>
 80027e6:	e005      	b.n	80027f4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f006 f984 	bl	8008afc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	4f54310a 	.word	0x4f54310a

08002804 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	333c      	adds	r3, #60	; 0x3c
 800281c:	3304      	adds	r3, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4a0c      	ldr	r2, [pc, #48]	; (8002868 <PCD_EP_OutSetupPacket_int+0x64>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d90e      	bls.n	8002858 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002850:	461a      	mov	r2, r3
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f006 f93d 	bl	8008ad8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	4f54300a 	.word	0x4f54300a

0800286c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
 8002878:	4613      	mov	r3, r2
 800287a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800288a:	883b      	ldrh	r3, [r7, #0]
 800288c:	0419      	lsls	r1, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	430a      	orrs	r2, r1
 8002896:	629a      	str	r2, [r3, #40]	; 0x28
 8002898:	e028      	b.n	80028ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e00d      	b.n	80028ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3340      	adds	r3, #64	; 0x40
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3ec      	bcc.n	80028ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	0418      	lsls	r0, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	3b01      	subs	r3, #1
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4302      	orrs	r2, r0
 80028e4:	3340      	adds	r3, #64	; 0x40
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	f043 0303 	orr.w	r3, r3, #3
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_PWREx_GetVoltageRange+0x18>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000

08002980 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298e:	d130      	bne.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299c:	d038      	beq.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ae:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2232      	movs	r2, #50	; 0x32
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0c9b      	lsrs	r3, r3, #18
 80029c0:	3301      	adds	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c4:	e002      	b.n	80029cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029d8:	d102      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f2      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ec:	d110      	bne.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e00f      	b.n	8002a12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fe:	d007      	beq.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a08:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40007000 	.word	0x40007000
 8002a24:	20000000 	.word	0x20000000
 8002a28:	431bde83 	.word	0x431bde83

08002a2c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3a:	6053      	str	r3, [r2, #4]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000

08002a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e3d4      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5e:	4ba1      	ldr	r3, [pc, #644]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a68:	4b9e      	ldr	r3, [pc, #632]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80e4 	beq.w	8002c48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_RCC_OscConfig+0x4a>
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	f040 808b 	bne.w	8002ba4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 8087 	bne.w	8002ba4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a96:	4b93      	ldr	r3, [pc, #588]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e3ac      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x7c>
 8002abe:	4b89      	ldr	r3, [pc, #548]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac6:	e005      	b.n	8002ad4 <HAL_RCC_OscConfig+0x88>
 8002ac8:	4b86      	ldr	r3, [pc, #536]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d223      	bcs.n	8002b20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fd3f 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e38d      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aec:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b7a      	ldr	r3, [pc, #488]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	4977      	ldr	r1, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b0a:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	4972      	ldr	r1, [pc, #456]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
 8002b1e:	e025      	b.n	8002b6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b20:	4b70      	ldr	r3, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6f      	ldr	r2, [pc, #444]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b26:	f043 0308 	orr.w	r3, r3, #8
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	496a      	ldr	r1, [pc, #424]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b3e:	4b69      	ldr	r3, [pc, #420]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	4965      	ldr	r1, [pc, #404]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fcff 	bl	8003560 <RCC_SetFlashLatencyFromMSIRange>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e34d      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b6c:	f000 fc36 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b5c      	ldr	r3, [pc, #368]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <HAL_RCC_OscConfig+0x29c>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa21 f303 	lsr.w	r3, r1, r3
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_OscConfig+0x2a0>)
 8002b8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b8c:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x2a4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd ff25 	bl	80009e0 <HAL_InitTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d052      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	e331      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d032      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bac:	4b4d      	ldr	r3, [pc, #308]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb8:	f7fd ff5e 	bl	8000a78 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bc0:	f7fd ff5a 	bl	8000a78 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e31a      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bd2:	4b44      	ldr	r3, [pc, #272]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bde:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b3e      	ldr	r3, [pc, #248]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	493b      	ldr	r1, [pc, #236]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	4936      	ldr	r1, [pc, #216]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
 8002c10:	e01a      	b.n	8002c48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c12:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a33      	ldr	r2, [pc, #204]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c1e:	f7fd ff2b 	bl	8000a78 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c26:	f7fd ff27 	bl	8000a78 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e2e7      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x1da>
 8002c44:	e000      	b.n	8002c48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d074      	beq.n	8002d3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d005      	beq.n	8002c66 <HAL_RCC_OscConfig+0x21a>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d10e      	bne.n	8002c7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d064      	beq.n	8002d3c <HAL_RCC_OscConfig+0x2f0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d160      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e2c4      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x24a>
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e01d      	b.n	8002cd2 <HAL_RCC_OscConfig+0x286>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x26e>
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x286>
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a06      	ldr	r2, [pc, #24]	; (8002ce4 <HAL_RCC_OscConfig+0x298>)
 8002ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fd fecd 	bl	8000a78 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce0:	e011      	b.n	8002d06 <HAL_RCC_OscConfig+0x2ba>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	080092fc 	.word	0x080092fc
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fd fec0 	bl	8000a78 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e280      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d06:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x2a8>
 8002d12:	e014      	b.n	8002d3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fd feb0 	bl	8000a78 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7fd feac 	bl	8000a78 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e26c      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d2e:	4ba5      	ldr	r3, [pc, #660]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x2d0>
 8002d3a:	e000      	b.n	8002d3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d060      	beq.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_OscConfig+0x310>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2b0c      	cmp	r3, #12
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d116      	bne.n	8002d8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	4b99      	ldr	r3, [pc, #612]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x328>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e249      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b93      	ldr	r3, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	4990      	ldr	r1, [pc, #576]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d88:	e040      	b.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d023      	beq.n	8002dda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d92:	4b8c      	ldr	r3, [pc, #560]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a8b      	ldr	r2, [pc, #556]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fd fe6b 	bl	8000a78 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da6:	f7fd fe67 	bl	8000a78 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e227      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db8:	4b82      	ldr	r3, [pc, #520]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f0      	beq.n	8002da6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b7f      	ldr	r3, [pc, #508]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	497c      	ldr	r1, [pc, #496]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
 8002dd8:	e018      	b.n	8002e0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dda:	4b7a      	ldr	r3, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a79      	ldr	r2, [pc, #484]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fd fe47 	bl	8000a78 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fd fe43 	bl	8000a78 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e203      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e20:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	4a67      	ldr	r2, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fd fe22 	bl	8000a78 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e38:	f7fd fe1e 	bl	8000a78 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1de      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e4a:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x3ec>
 8002e58:	e01b      	b.n	8002e92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e60:	4a58      	ldr	r2, [pc, #352]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fd fe05 	bl	8000a78 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e72:	f7fd fe01 	bl	8000a78 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1c1      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e84:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a6 	beq.w	8002fec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6593      	str	r3, [r2, #88]	; 0x58
 8002ebc:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ecc:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <HAL_RCC_OscConfig+0x57c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d118      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_OscConfig+0x57c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_RCC_OscConfig+0x57c>)
 8002ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fdc8 	bl	8000a78 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eec:	f7fd fdc4 	bl	8000a78 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e184      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <HAL_RCC_OscConfig+0x57c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d108      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4d8>
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f22:	e024      	b.n	8002f6e <HAL_RCC_OscConfig+0x522>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d110      	bne.n	8002f4e <HAL_RCC_OscConfig+0x502>
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a24      	ldr	r2, [pc, #144]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4c:	e00f      	b.n	8002f6e <HAL_RCC_OscConfig+0x522>
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	4a1b      	ldr	r2, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f023 0301 	bic.w	r3, r3, #1
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fd fd7f 	bl	8000a78 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fd fd7b 	bl	8000a78 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e139      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0ed      	beq.n	8002f7e <HAL_RCC_OscConfig+0x532>
 8002fa2:	e01a      	b.n	8002fda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fd fd68 	bl	8000a78 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002faa:	e00f      	b.n	8002fcc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fac:	f7fd fd64 	bl	8000a78 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d906      	bls.n	8002fcc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e122      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fcc:	4b90      	ldr	r3, [pc, #576]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e8      	bne.n	8002fac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	4a8a      	ldr	r2, [pc, #552]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8108 	beq.w	8003206 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	f040 80d0 	bne.w	80031a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003000:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	429a      	cmp	r2, r3
 8003012:	d130      	bne.n	8003076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	3b01      	subs	r3, #1
 8003020:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d127      	bne.n	8003076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d11f      	bne.n	8003076 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003040:	2a07      	cmp	r2, #7
 8003042:	bf14      	ite	ne
 8003044:	2201      	movne	r2, #1
 8003046:	2200      	moveq	r2, #0
 8003048:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800304a:	4293      	cmp	r3, r2
 800304c:	d113      	bne.n	8003076 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d109      	bne.n	8003076 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	3b01      	subs	r3, #1
 8003070:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d06e      	beq.n	8003154 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2b0c      	cmp	r3, #12
 800307a:	d069      	beq.n	8003150 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003088:	4b61      	ldr	r3, [pc, #388]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b7      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003098:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a5c      	ldr	r2, [pc, #368]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030a4:	f7fd fce8 	bl	8000a78 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fd fce4 	bl	8000a78 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0a4      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030be:	4b54      	ldr	r3, [pc, #336]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ca:	4b51      	ldr	r3, [pc, #324]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b51      	ldr	r3, [pc, #324]	; (8003214 <HAL_RCC_OscConfig+0x7c8>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030da:	3a01      	subs	r2, #1
 80030dc:	0112      	lsls	r2, r2, #4
 80030de:	4311      	orrs	r1, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030e4:	0212      	lsls	r2, r2, #8
 80030e6:	4311      	orrs	r1, r2
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030ec:	0852      	lsrs	r2, r2, #1
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0552      	lsls	r2, r2, #21
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030f8:	0852      	lsrs	r2, r2, #1
 80030fa:	3a01      	subs	r2, #1
 80030fc:	0652      	lsls	r2, r2, #25
 80030fe:	4311      	orrs	r1, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003104:	0912      	lsrs	r2, r2, #4
 8003106:	0452      	lsls	r2, r2, #17
 8003108:	430a      	orrs	r2, r1
 800310a:	4941      	ldr	r1, [pc, #260]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003110:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a3b      	ldr	r2, [pc, #236]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003128:	f7fd fca6 	bl	8000a78 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fd fca2 	bl	8000a78 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e062      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800314e:	e05a      	b.n	8003206 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e059      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d152      	bne.n	8003206 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2a      	ldr	r2, [pc, #168]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003178:	f7fd fc7e 	bl	8000a78 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fd fc7a 	bl	8000a78 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e03a      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x734>
 800319e:	e032      	b.n	8003206 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d02d      	beq.n	8003202 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031c4:	f023 0303 	bic.w	r3, r3, #3
 80031c8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fd fc4d 	bl	8000a78 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd fc49 	bl	8000a78 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e009      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x7c4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x796>
 8003200:	e001      	b.n	8003206 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3720      	adds	r7, #32
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	f99d808c 	.word	0xf99d808c

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0c8      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4961      	ldr	r1, [pc, #388]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b0      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d04c      	beq.n	8003302 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003270:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e09e      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d115      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e092      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e086      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032b0:	4b46      	ldr	r3, [pc, #280]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e07e      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c0:	4b42      	ldr	r3, [pc, #264]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f023 0203 	bic.w	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	493f      	ldr	r1, [pc, #252]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d2:	f7fd fbd1 	bl	8000a78 <HAL_GetTick>
 80032d6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	e00a      	b.n	80032f0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032da:	f7fd fbcd 	bl	8000a78 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e066      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 020c 	and.w	r2, r3, #12
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	429a      	cmp	r2, r3
 8003300:	d1eb      	bne.n	80032da <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330e:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	492c      	ldr	r1, [pc, #176]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d210      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b26      	ldr	r3, [pc, #152]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	4924      	ldr	r1, [pc, #144]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e036      	b.n	80033be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4918      	ldr	r1, [pc, #96]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4910      	ldr	r1, [pc, #64]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800338e:	f000 f825 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8003392:	4601      	mov	r1, r0
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_RCC_ClockConfig+0x1b4>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	fa21 f303 	lsr.w	r3, r1, r3
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fb14 	bl	80009e0 <HAL_InitTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80033bc:	7afb      	ldrb	r3, [r7, #11]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40022000 	.word	0x40022000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	080092fc 	.word	0x080092fc
 80033d4:	20000000 	.word	0x20000000
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ea:	4b3d      	ldr	r3, [pc, #244]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x34>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d121      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d11e      	bne.n	800344e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d107      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800341c:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800341e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e005      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003438:	4a2a      	ldr	r2, [pc, #168]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10d      	bne.n	8003464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800344c:	e00a      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b04      	cmp	r3, #4
 8003452:	d102      	bne.n	800345a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	e004      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d101      	bne.n	8003464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003460:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d133      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346a:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xa4>
 800347a:	2b03      	cmp	r3, #3
 800347c:	d003      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0xaa>
 800347e:	e005      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003482:	617b      	str	r3, [r7, #20]
      break;
 8003484:	e005      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	617b      	str	r3, [r7, #20]
      break;
 8003490:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	3301      	adds	r3, #1
 800349e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	fb02 f203 	mul.w	r2, r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x104>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	0e5b      	lsrs	r3, r3, #25
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034d2:	69bb      	ldr	r3, [r7, #24]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3724      	adds	r7, #36	; 0x24
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08009314 	.word	0x08009314
 80034e8:	00f42400 	.word	0x00f42400
 80034ec:	007a1200 	.word	0x007a1200

080034f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4601      	mov	r1, r0
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	0800930c 	.word	0x0800930c

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003538:	f7ff ffda 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800353c:	4601      	mov	r1, r0
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	0adb      	lsrs	r3, r3, #11
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_RCC_GetPCLK2Freq+0x28>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	0800930c 	.word	0x0800930c

08003560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003578:	f7ff f9f4 	bl	8002964 <HAL_PWREx_GetVoltageRange>
 800357c:	6178      	str	r0, [r7, #20]
 800357e:	e014      	b.n	80035aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	4a24      	ldr	r2, [pc, #144]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358a:	6593      	str	r3, [r2, #88]	; 0x58
 800358c:	4b22      	ldr	r3, [pc, #136]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003598:	f7ff f9e4 	bl	8002964 <HAL_PWREx_GetVoltageRange>
 800359c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4a1d      	ldr	r2, [pc, #116]	; (8003618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b0:	d10b      	bne.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b80      	cmp	r3, #128	; 0x80
 80035b6:	d919      	bls.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2ba0      	cmp	r3, #160	; 0xa0
 80035bc:	d902      	bls.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035be:	2302      	movs	r3, #2
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	e013      	b.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c4:	2301      	movs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e010      	b.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d902      	bls.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035d0:	2303      	movs	r3, #3
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e00a      	b.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d102      	bne.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035dc:	2302      	movs	r3, #2
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e004      	b.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b70      	cmp	r3, #112	; 0x70
 80035e6:	d101      	bne.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035e8:	2301      	movs	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 0207 	bic.w	r2, r3, #7
 80035f4:	4909      	ldr	r1, [pc, #36]	; (800361c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	40022000 	.word	0x40022000

08003620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003628:	2300      	movs	r3, #0
 800362a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800362c:	2300      	movs	r3, #0
 800362e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03f      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003644:	d01c      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d802      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003650:	e01f      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003658:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800365c:	d01c      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800365e:	e018      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003660:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a84      	ldr	r2, [pc, #528]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800366c:	e015      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fab9 	bl	8003bec <RCCEx_PLLSAI1_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800367e:	e00c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3320      	adds	r3, #32
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fba0 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003690:	e003      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	74fb      	strb	r3, [r7, #19]
      break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369a:	7cfb      	ldrb	r3, [r7, #19]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	4972      	ldr	r1, [pc, #456]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036b6:	e001      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03f      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d0:	d01c      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d6:	d802      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036dc:	e01f      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036e2:	d003      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80036e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036e8:	d01c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80036ea:	e018      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036ec:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a61      	ldr	r2, [pc, #388]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80036f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f8:	e015      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fa73 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800370a:	e00c      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3320      	adds	r3, #32
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fb5a 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800371c:	e003      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	74fb      	strb	r3, [r7, #19]
      break;
 8003722:	e000      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003726:	7cfb      	ldrb	r3, [r7, #19]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800372c:	4b52      	ldr	r3, [pc, #328]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373a:	494f      	ldr	r1, [pc, #316]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003742:	e001      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a0 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800375a:	4b47      	ldr	r3, [pc, #284]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003770:	4b41      	ldr	r3, [pc, #260]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	4a40      	ldr	r2, [pc, #256]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377a:	6593      	str	r3, [r2, #88]	; 0x58
 800377c:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003788:	2301      	movs	r3, #1
 800378a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800378c:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3a      	ldr	r2, [pc, #232]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003798:	f7fd f96e 	bl	8000a78 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379e:	e009      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fd f96a 	bl	8000a78 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d902      	bls.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	74fb      	strb	r3, [r7, #19]
        break;
 80037b2:	e005      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ef      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d15c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c6:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01f      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d019      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f0:	4b21      	ldr	r3, [pc, #132]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a1c      	ldr	r2, [pc, #112]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003810:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d016      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fd f929 	bl	8000a78 <HAL_GetTick>
 8003826:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003828:	e00b      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd f925 	bl	8000a78 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d902      	bls.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	74fb      	strb	r3, [r7, #19]
            break;
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003842:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ec      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10c      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003866:	4904      	ldr	r1, [pc, #16]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003868:	4313      	orrs	r3, r2
 800386a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386e:	e009      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003884:	7c7b      	ldrb	r3, [r7, #17]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b9e      	ldr	r3, [pc, #632]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	4a9d      	ldr	r2, [pc, #628]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a2:	4b98      	ldr	r3, [pc, #608]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f023 0203 	bic.w	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	4994      	ldr	r1, [pc, #592]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c4:	4b8f      	ldr	r3, [pc, #572]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 020c 	bic.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	498c      	ldr	r1, [pc, #560]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e6:	4b87      	ldr	r3, [pc, #540]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4983      	ldr	r1, [pc, #524]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003908:	4b7e      	ldr	r3, [pc, #504]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	497b      	ldr	r1, [pc, #492]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800392a:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	4972      	ldr	r1, [pc, #456]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800394c:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	496a      	ldr	r1, [pc, #424]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396e:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	4961      	ldr	r1, [pc, #388]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003990:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	4959      	ldr	r1, [pc, #356]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039b2:	4b54      	ldr	r3, [pc, #336]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	4950      	ldr	r1, [pc, #320]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d4:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	4948      	ldr	r1, [pc, #288]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f6:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	493f      	ldr	r1, [pc, #252]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d028      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a18:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a26:	4937      	ldr	r1, [pc, #220]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a36:	d106      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a38:	4b32      	ldr	r3, [pc, #200]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a42:	60d3      	str	r3, [r2, #12]
 8003a44:	e011      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4e:	d10c      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	2101      	movs	r1, #1
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f8c8 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d028      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a76:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a84:	491f      	ldr	r1, [pc, #124]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a94:	d106      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a96:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa0:	60d3      	str	r3, [r2, #12]
 8003aa2:	e011      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 f899 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003ac4:	7cfb      	ldrb	r3, [r7, #19]
 8003ac6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02b      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	4908      	ldr	r1, [pc, #32]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af2:	d109      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a02      	ldr	r2, [pc, #8]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afe:	60d3      	str	r3, [r2, #12]
 8003b00:	e014      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f867 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b38:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b46:	4928      	ldr	r1, [pc, #160]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2102      	movs	r1, #2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f844 	bl	8003bec <RCCEx_PLLSAI1_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b68:	7cfb      	ldrb	r3, [r7, #19]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	74bb      	strb	r3, [r7, #18]
 8003b72:	e011      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3320      	adds	r3, #32
 8003b82:	2102      	movs	r1, #2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f921 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba4:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb2:	490d      	ldr	r1, [pc, #52]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bde:	7cbb      	ldrb	r3, [r7, #18]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c06:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0203 	and.w	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d10d      	bne.n	8003c32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
       ||
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c1e:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d044      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e041      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d00c      	beq.n	8003c5a <RCCEx_PLLSAI1_Config+0x6e>
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d013      	beq.n	8003c6c <RCCEx_PLLSAI1_Config+0x80>
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d120      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c48:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11d      	bne.n	8003c90 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e01a      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6a:	e013      	b.n	8003c94 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6c:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10f      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c78:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d109      	bne.n	8003c98 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c88:	e006      	b.n	8003c98 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c8e:	e004      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003c98:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca0:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	4944      	ldr	r1, [pc, #272]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d17d      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc2:	4b41      	ldr	r3, [pc, #260]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cce:	f7fc fed3 	bl	8000a78 <HAL_GetTick>
 8003cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd4:	e009      	b.n	8003cea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd6:	f7fc fecf 	bl	8000a78 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d902      	bls.n	8003cea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ce8:	e005      	b.n	8003cf6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cea:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ef      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d160      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d111      	bne.n	8003d26 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d02:	4b31      	ldr	r3, [pc, #196]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6892      	ldr	r2, [r2, #8]
 8003d12:	0211      	lsls	r1, r2, #8
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	0912      	lsrs	r2, r2, #4
 8003d1a:	0452      	lsls	r2, r2, #17
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	492a      	ldr	r1, [pc, #168]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	610b      	str	r3, [r1, #16]
 8003d24:	e027      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d112      	bne.n	8003d52 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	0211      	lsls	r1, r2, #8
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6912      	ldr	r2, [r2, #16]
 8003d42:	0852      	lsrs	r2, r2, #1
 8003d44:	3a01      	subs	r2, #1
 8003d46:	0552      	lsls	r2, r2, #21
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	491f      	ldr	r1, [pc, #124]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	610b      	str	r3, [r1, #16]
 8003d50:	e011      	b.n	8003d76 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	0211      	lsls	r1, r2, #8
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6952      	ldr	r2, [r2, #20]
 8003d68:	0852      	lsrs	r2, r2, #1
 8003d6a:	3a01      	subs	r2, #1
 8003d6c:	0652      	lsls	r2, r2, #25
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	4915      	ldr	r1, [pc, #84]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fc fe79 	bl	8000a78 <HAL_GetTick>
 8003d86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d88:	e009      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8a:	f7fc fe75 	bl	8000a78 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d902      	bls.n	8003d9e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9c:	e005      	b.n	8003daa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ef      	beq.n	8003d8a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000

08003dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dda:	4b68      	ldr	r3, [pc, #416]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d10d      	bne.n	8003e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dfe:	4b5f      	ldr	r3, [pc, #380]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	091b      	lsrs	r3, r3, #4
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d044      	beq.n	8003e9c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e041      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d00c      	beq.n	8003e3a <RCCEx_PLLSAI2_Config+0x6e>
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d013      	beq.n	8003e4c <RCCEx_PLLSAI2_Config+0x80>
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d120      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e28:	4b54      	ldr	r3, [pc, #336]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d11d      	bne.n	8003e70 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e38:	e01a      	b.n	8003e70 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3a:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4a:	e013      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10f      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e58:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e68:	e006      	b.n	8003e78 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6e:	e004      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003e78:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e80:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6819      	ldr	r1, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	3b01      	subs	r3, #1
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	430b      	orrs	r3, r1
 8003e96:	4939      	ldr	r1, [pc, #228]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d167      	bne.n	8003f72 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a35      	ldr	r2, [pc, #212]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eae:	f7fc fde3 	bl	8000a78 <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eb4:	e009      	b.n	8003eca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb6:	f7fc fddf 	bl	8000a78 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d902      	bls.n	8003eca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	73fb      	strb	r3, [r7, #15]
        break;
 8003ec8:	e005      	b.n	8003ed6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1ef      	bne.n	8003eb6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d14a      	bne.n	8003f72 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d111      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	0211      	lsls	r1, r2, #8
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68d2      	ldr	r2, [r2, #12]
 8003ef8:	0912      	lsrs	r2, r2, #4
 8003efa:	0452      	lsls	r2, r2, #17
 8003efc:	430a      	orrs	r2, r1
 8003efe:	491f      	ldr	r1, [pc, #124]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	614b      	str	r3, [r1, #20]
 8003f04:	e011      	b.n	8003f2a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6892      	ldr	r2, [r2, #8]
 8003f16:	0211      	lsls	r1, r2, #8
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6912      	ldr	r2, [r2, #16]
 8003f1c:	0852      	lsrs	r2, r2, #1
 8003f1e:	3a01      	subs	r2, #1
 8003f20:	0652      	lsls	r2, r2, #25
 8003f22:	430a      	orrs	r2, r1
 8003f24:	4915      	ldr	r1, [pc, #84]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f36:	f7fc fd9f 	bl	8000a78 <HAL_GetTick>
 8003f3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f3c:	e009      	b.n	8003f52 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f3e:	f7fc fd9b 	bl	8000a78 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d902      	bls.n	8003f52 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	73fb      	strb	r3, [r7, #15]
          break;
 8003f50:	e005      	b.n	8003f5e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ef      	beq.n	8003f3e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f66:	695a      	ldr	r2, [r3, #20]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e01d      	b.n	8003fce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f815 	bl	8003fd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3304      	adds	r3, #4
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	f000 f986 	bl	80042d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_TIM_Base_Start_IT+0x50>)
 800400c:	4013      	ands	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b06      	cmp	r3, #6
 8004014:	d00b      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x42>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401c:	d007      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	00010007 	.word	0x00010007

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0202 	mvn.w	r2, #2
 800406c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f905 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8f7 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f908 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f8db 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f8cd 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f8de 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0208 	mvn.w	r2, #8
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8b1 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8a3 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f8b4 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f887 	bl	8004292 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f879 	bl	800427e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f88a 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f004 f9e8 	bl	8008594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f914 	bl	8004418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f907 	bl	800442c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b40      	cmp	r3, #64	; 0x40
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f838 	bl	80042ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0220 	mvn.w	r2, #32
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8c7 	bl	8004404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a40      	ldr	r2, [pc, #256]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a3c      	ldr	r2, [pc, #240]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3b      	ldr	r2, [pc, #236]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3a      	ldr	r2, [pc, #232]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2f      	ldr	r2, [pc, #188]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01f      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004330:	d01b      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2c      	ldr	r2, [pc, #176]	; (80043e8 <TIM_Base_SetConfig+0x118>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d017      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <TIM_Base_SetConfig+0x11c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2a      	ldr	r2, [pc, #168]	; (80043f0 <TIM_Base_SetConfig+0x120>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00f      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a29      	ldr	r2, [pc, #164]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00b      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <TIM_Base_SetConfig+0x128>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a27      	ldr	r2, [pc, #156]	; (80043fc <TIM_Base_SetConfig+0x12c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d003      	beq.n	800436a <TIM_Base_SetConfig+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a26      	ldr	r2, [pc, #152]	; (8004400 <TIM_Base_SetConfig+0x130>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d108      	bne.n	800437c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a10      	ldr	r2, [pc, #64]	; (80043e4 <TIM_Base_SetConfig+0x114>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00f      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <TIM_Base_SetConfig+0x124>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00b      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a11      	ldr	r2, [pc, #68]	; (80043f8 <TIM_Base_SetConfig+0x128>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d007      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a10      	ldr	r2, [pc, #64]	; (80043fc <TIM_Base_SetConfig+0x12c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d003      	beq.n	80043c8 <TIM_Base_SetConfig+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <TIM_Base_SetConfig+0x130>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d103      	bne.n	80043d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	615a      	str	r2, [r3, #20]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40013400 	.word	0x40013400
 80043f8:	40014000 	.word	0x40014000
 80043fc:	40014400 	.word	0x40014400
 8004400:	40014800 	.word	0x40014800

08004404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e040      	b.n	80044d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc f916 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fad0 	bl	8004a24 <UART_SetConfig>
 8004484:	4603      	mov	r3, r0
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e022      	b.n	80044d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fe36 	bl	8005108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 febd 	bl	800524c <UART_CheckIdleState>
 80044d2:	4603      	mov	r3, r0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e027      	b.n	800453e <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2224      	movs	r2, #36	; 0x24
 80044f2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2200      	movs	r2, #0
 8004512:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7fc f965 	bl	80007ec <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	2b20      	cmp	r3, #32
 800455c:	f040 808a 	bne.w	8004674 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_UART_Receive_IT+0x24>
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e082      	b.n	8004676 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_UART_Receive_IT+0x36>
 800457a:	2302      	movs	r3, #2
 800457c:	e07b      	b.n	8004676 <HAL_UART_Receive_IT+0x12e>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	88fa      	ldrh	r2, [r7, #6]
 8004590:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045aa:	d10e      	bne.n	80045ca <HAL_UART_Receive_IT+0x82>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_Receive_IT+0x78>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045be:	e02d      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	22ff      	movs	r2, #255	; 0xff
 80045c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c8:	e028      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <HAL_UART_Receive_IT+0xa6>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <HAL_UART_Receive_IT+0x9c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e2:	e01b      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	227f      	movs	r2, #127	; 0x7f
 80045e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ec:	e016      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045f6:	d10d      	bne.n	8004614 <HAL_UART_Receive_IT+0xcc>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_UART_Receive_IT+0xc2>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	227f      	movs	r2, #127	; 0x7f
 8004604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004608:	e008      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	223f      	movs	r2, #63	; 0x3f
 800460e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004612:	e003      	b.n	800461c <HAL_UART_Receive_IT+0xd4>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2222      	movs	r2, #34	; 0x22
 8004626:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d107      	bne.n	8004652 <HAL_UART_Receive_IT+0x10a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d103      	bne.n	8004652 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <HAL_UART_Receive_IT+0x13c>)
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
 8004650:	e002      	b.n	8004658 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_UART_Receive_IT+0x140>)
 8004656:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800466e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	08005627 	.word	0x08005627
 8004688:	0800557d 	.word	0x0800557d

0800468c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d164      	bne.n	800476c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_UART_Transmit_DMA+0x22>
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e05d      	b.n	800476e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Transmit_DMA+0x34>
 80046bc:	2302      	movs	r3, #2
 80046be:	e056      	b.n	800476e <HAL_UART_Transmit_DMA+0xe2>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	88fa      	ldrh	r2, [r7, #6]
 80046d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	88fa      	ldrh	r2, [r7, #6]
 80046da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2221      	movs	r2, #33	; 0x21
 80046e8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d02a      	beq.n	8004748 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f6:	4a20      	ldr	r2, [pc, #128]	; (8004778 <HAL_UART_Transmit_DMA+0xec>)
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_UART_Transmit_DMA+0xf0>)
 8004700:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <HAL_UART_Transmit_DMA+0xf4>)
 8004708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800470e:	2200      	movs	r2, #0
 8004710:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	4619      	mov	r1, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3328      	adds	r3, #40	; 0x28
 8004722:	461a      	mov	r2, r3
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	f7fc fc61 	bl	8000fec <HAL_DMA_Start_IT>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2210      	movs	r2, #16
 8004734:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e012      	b.n	800476e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2240      	movs	r2, #64	; 0x40
 800474e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004766:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	08005437 	.word	0x08005437
 800477c:	0800548b 	.word	0x0800548b
 8004780:	080054a7 	.word	0x080054a7

08004784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047a4:	69fa      	ldr	r2, [r7, #28]
 80047a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d113      	bne.n	80047dc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00e      	beq.n	80047dc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8114 	beq.w	80049fa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      }
      return;
 80047da:	e10e      	b.n	80049fa <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80d6 	beq.w	8004990 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d105      	bne.n	80047fa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80cb 	beq.w	8004990 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <HAL_UART_IRQHandler+0x9e>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2201      	movs	r2, #1
 8004814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481a:	f043 0201 	orr.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <HAL_UART_IRQHandler+0xc6>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d009      	beq.n	800484a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2202      	movs	r2, #2
 800483c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_UART_IRQHandler+0xee>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2204      	movs	r2, #4
 8004864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d104      	bne.n	8004890 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2208      	movs	r2, #8
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800489c:	f043 0208 	orr.w	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00f      	beq.n	80048ce <HAL_UART_IRQHandler+0x14a>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8093 	beq.w	80049fe <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004900:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d004      	beq.n	800491a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004916:	2b00      	cmp	r3, #0
 8004918:	d031      	beq.n	800497e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fd6b 	bl	80053f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b40      	cmp	r3, #64	; 0x40
 800492c:	d123      	bne.n	8004976 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d013      	beq.n	800496e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	4a30      	ldr	r2, [pc, #192]	; (8004a0c <HAL_UART_IRQHandler+0x288>)
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fbaa 	bl	80010ac <HAL_DMA_Abort_IT>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00e      	b.n	800498c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f003 ff22 	bl	80087b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00a      	b.n	800498c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f003 ff1e 	bl	80087b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e006      	b.n	800498c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f003 ff1a 	bl	80087b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800498a:	e038      	b.n	80049fe <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	bf00      	nop
    return;
 800498e:	e036      	b.n	80049fe <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_UART_IRQHandler+0x232>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80049ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fe8e 	bl	80056d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049b4:	e026      	b.n	8004a04 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d017      	beq.n	8004a02 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
    }
    return;
 80049da:	e012      	b.n	8004a02 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <HAL_UART_IRQHandler+0x280>
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fdaa 	bl	800554a <UART_EndTransmit_IT>
    return;
 80049f6:	bf00      	nop
 80049f8:	e004      	b.n	8004a04 <HAL_UART_IRQHandler+0x280>
      return;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_UART_IRQHandler+0x280>
    return;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_UART_IRQHandler+0x280>
    return;
 8004a02:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	0800551f 	.word	0x0800551f

08004a10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004a28:	b08a      	sub	sp, #40	; 0x28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4bb8      	ldr	r3, [pc, #736]	; (8004d3c <UART_SetConfig+0x318>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4aae      	ldr	r2, [pc, #696]	; (8004d40 <UART_SetConfig+0x31c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	4313      	orrs	r3, r2
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4aa5      	ldr	r2, [pc, #660]	; (8004d44 <UART_SetConfig+0x320>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d126      	bne.n	8004b02 <UART_SetConfig+0xde>
 8004ab4:	4ba4      	ldr	r3, [pc, #656]	; (8004d48 <UART_SetConfig+0x324>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d81a      	bhi.n	8004af8 <UART_SetConfig+0xd4>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0xa4>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ad9 	.word	0x08004ad9
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ade:	e105      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae6:	e101      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e0fd      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e0f9      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	bf00      	nop
 8004b00:	e0f4      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a91      	ldr	r2, [pc, #580]	; (8004d4c <UART_SetConfig+0x328>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d138      	bne.n	8004b7e <UART_SetConfig+0x15a>
 8004b0c:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <UART_SetConfig+0x324>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d82c      	bhi.n	8004b74 <UART_SetConfig+0x150>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <UART_SetConfig+0xfc>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b75 	.word	0x08004b75
 8004b28:	08004b75 	.word	0x08004b75
 8004b2c:	08004b75 	.word	0x08004b75
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b75 	.word	0x08004b75
 8004b38:	08004b75 	.word	0x08004b75
 8004b3c:	08004b75 	.word	0x08004b75
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b5a:	e0c7      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b62:	e0c3      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e0bf      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e0bb      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	bf00      	nop
 8004b7c:	e0b6      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a73      	ldr	r2, [pc, #460]	; (8004d50 <UART_SetConfig+0x32c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d125      	bne.n	8004bd4 <UART_SetConfig+0x1b0>
 8004b88:	4b6f      	ldr	r3, [pc, #444]	; (8004d48 <UART_SetConfig+0x324>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d011      	beq.n	8004bba <UART_SetConfig+0x196>
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d802      	bhi.n	8004ba0 <UART_SetConfig+0x17c>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d005      	beq.n	8004baa <UART_SetConfig+0x186>
 8004b9e:	e014      	b.n	8004bca <UART_SetConfig+0x1a6>
 8004ba0:	2b20      	cmp	r3, #32
 8004ba2:	d006      	beq.n	8004bb2 <UART_SetConfig+0x18e>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d00c      	beq.n	8004bc2 <UART_SetConfig+0x19e>
 8004ba8:	e00f      	b.n	8004bca <UART_SetConfig+0x1a6>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb0:	e09c      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb8:	e098      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc0:	e094      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc8:	e090      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004bca:	2310      	movs	r3, #16
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd0:	bf00      	nop
 8004bd2:	e08b      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a5e      	ldr	r2, [pc, #376]	; (8004d54 <UART_SetConfig+0x330>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d125      	bne.n	8004c2a <UART_SetConfig+0x206>
 8004bde:	4b5a      	ldr	r3, [pc, #360]	; (8004d48 <UART_SetConfig+0x324>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d011      	beq.n	8004c10 <UART_SetConfig+0x1ec>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d802      	bhi.n	8004bf6 <UART_SetConfig+0x1d2>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0x1dc>
 8004bf4:	e014      	b.n	8004c20 <UART_SetConfig+0x1fc>
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d006      	beq.n	8004c08 <UART_SetConfig+0x1e4>
 8004bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfc:	d00c      	beq.n	8004c18 <UART_SetConfig+0x1f4>
 8004bfe:	e00f      	b.n	8004c20 <UART_SetConfig+0x1fc>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c06:	e071      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0e:	e06d      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c10:	2304      	movs	r3, #4
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e069      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c18:	2308      	movs	r3, #8
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e065      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c20:	2310      	movs	r3, #16
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	bf00      	nop
 8004c28:	e060      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a4a      	ldr	r2, [pc, #296]	; (8004d58 <UART_SetConfig+0x334>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d129      	bne.n	8004c88 <UART_SetConfig+0x264>
 8004c34:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <UART_SetConfig+0x324>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c42:	d014      	beq.n	8004c6e <UART_SetConfig+0x24a>
 8004c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c48:	d802      	bhi.n	8004c50 <UART_SetConfig+0x22c>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <UART_SetConfig+0x23a>
 8004c4e:	e016      	b.n	8004c7e <UART_SetConfig+0x25a>
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c54:	d007      	beq.n	8004c66 <UART_SetConfig+0x242>
 8004c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c5a:	d00c      	beq.n	8004c76 <UART_SetConfig+0x252>
 8004c5c:	e00f      	b.n	8004c7e <UART_SetConfig+0x25a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c64:	e042      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c66:	2302      	movs	r3, #2
 8004c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6c:	e03e      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c6e:	2304      	movs	r3, #4
 8004c70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c74:	e03a      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c76:	2308      	movs	r3, #8
 8004c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7c:	e036      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c7e:	2310      	movs	r3, #16
 8004c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c84:	bf00      	nop
 8004c86:	e031      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <UART_SetConfig+0x31c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d129      	bne.n	8004ce6 <UART_SetConfig+0x2c2>
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <UART_SetConfig+0x324>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca0:	d014      	beq.n	8004ccc <UART_SetConfig+0x2a8>
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d802      	bhi.n	8004cae <UART_SetConfig+0x28a>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <UART_SetConfig+0x298>
 8004cac:	e016      	b.n	8004cdc <UART_SetConfig+0x2b8>
 8004cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb2:	d007      	beq.n	8004cc4 <UART_SetConfig+0x2a0>
 8004cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb8:	d00c      	beq.n	8004cd4 <UART_SetConfig+0x2b0>
 8004cba:	e00f      	b.n	8004cdc <UART_SetConfig+0x2b8>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e013      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cca:	e00f      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004ccc:	2304      	movs	r3, #4
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cda:	e007      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	bf00      	nop
 8004ce4:	e002      	b.n	8004cec <UART_SetConfig+0x2c8>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <UART_SetConfig+0x31c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	f040 80fe 	bne.w	8004ef4 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d837      	bhi.n	8004d70 <UART_SetConfig+0x34c>
 8004d00:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x2e4>)
 8004d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d06:	bf00      	nop
 8004d08:	08004d2d 	.word	0x08004d2d
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004d35 	.word	0x08004d35
 8004d14:	08004d71 	.word	0x08004d71
 8004d18:	08004d61 	.word	0x08004d61
 8004d1c:	08004d71 	.word	0x08004d71
 8004d20:	08004d71 	.word	0x08004d71
 8004d24:	08004d71 	.word	0x08004d71
 8004d28:	08004d69 	.word	0x08004d69
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f7fe fbec 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8004d30:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d32:	e020      	b.n	8004d76 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004d34:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <UART_SetConfig+0x338>)
 8004d36:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d38:	e01d      	b.n	8004d76 <UART_SetConfig+0x352>
 8004d3a:	bf00      	nop
 8004d3c:	efff69f3 	.word	0xefff69f3
 8004d40:	40008000 	.word	0x40008000
 8004d44:	40013800 	.word	0x40013800
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40004400 	.word	0x40004400
 8004d50:	40004800 	.word	0x40004800
 8004d54:	40004c00 	.word	0x40004c00
 8004d58:	40005000 	.word	0x40005000
 8004d5c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8004d60:	f7fe fb3c 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8004d64:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d66:	e006      	b.n	8004d76 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d6e:	e002      	b.n	8004d76 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	76fb      	strb	r3, [r7, #27]
        break;
 8004d74:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 81b9 	beq.w	80050f0 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d305      	bcc.n	8004d9a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d902      	bls.n	8004da0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	76fb      	strb	r3, [r7, #27]
 8004d9e:	e1a7      	b.n	80050f0 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8004da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	f200 8092 	bhi.w	8004ece <UART_SetConfig+0x4aa>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x38c>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ecf 	.word	0x08004ecf
 8004db8:	08004e23 	.word	0x08004e23
 8004dbc:	08004ecf 	.word	0x08004ecf
 8004dc0:	08004e57 	.word	0x08004e57
 8004dc4:	08004ecf 	.word	0x08004ecf
 8004dc8:	08004ecf 	.word	0x08004ecf
 8004dcc:	08004ecf 	.word	0x08004ecf
 8004dd0:	08004ea5 	.word	0x08004ea5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004dd4:	f7fe fb98 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f04f 0400 	mov.w	r4, #0
 8004dea:	0214      	lsls	r4, r2, #8
 8004dec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004df0:	020b      	lsls	r3, r1, #8
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6852      	ldr	r2, [r2, #4]
 8004df6:	0852      	lsrs	r2, r2, #1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	eb13 0b01 	adds.w	fp, r3, r1
 8004e02:	eb44 0c02 	adc.w	ip, r4, r2
 8004e06:	4658      	mov	r0, fp
 8004e08:	4661      	mov	r1, ip
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f04f 0400 	mov.w	r4, #0
 8004e12:	461a      	mov	r2, r3
 8004e14:	4623      	mov	r3, r4
 8004e16:	f7fb f9d7 	bl	80001c8 <__aeabi_uldivmod>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e20:	e058      	b.n	8004ed4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	f04f 0400 	mov.w	r4, #0
 8004e2c:	49ae      	ldr	r1, [pc, #696]	; (80050e8 <UART_SetConfig+0x6c4>)
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	eb13 0b01 	adds.w	fp, r3, r1
 8004e36:	eb44 0c02 	adc.w	ip, r4, r2
 8004e3a:	4658      	mov	r0, fp
 8004e3c:	4661      	mov	r1, ip
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f04f 0400 	mov.w	r4, #0
 8004e46:	461a      	mov	r2, r3
 8004e48:	4623      	mov	r3, r4
 8004e4a:	f7fb f9bd 	bl	80001c8 <__aeabi_uldivmod>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004e54:	e03e      	b.n	8004ed4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fe fac1 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8004e5a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	f04f 0400 	mov.w	r4, #0
 8004e6c:	0214      	lsls	r4, r2, #8
 8004e6e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004e72:	020b      	lsls	r3, r1, #8
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	0852      	lsrs	r2, r2, #1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	f04f 0200 	mov.w	r2, #0
 8004e80:	eb13 0b01 	adds.w	fp, r3, r1
 8004e84:	eb44 0c02 	adc.w	ip, r4, r2
 8004e88:	4658      	mov	r0, fp
 8004e8a:	4661      	mov	r1, ip
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f04f 0400 	mov.w	r4, #0
 8004e94:	461a      	mov	r2, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	f7fb f996 	bl	80001c8 <__aeabi_uldivmod>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ea2:	e017      	b.n	8004ed4 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8004eb2:	f144 0100 	adc.w	r1, r4, #0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f04f 0400 	mov.w	r4, #0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	f7fb f981 	bl	80001c8 <__aeabi_uldivmod>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004ecc:	e002      	b.n	8004ed4 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	76fb      	strb	r3, [r7, #27]
            break;
 8004ed2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eda:	d308      	bcc.n	8004eee <UART_SetConfig+0x4ca>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d204      	bcs.n	8004eee <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e100      	b.n	80050f0 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	76fb      	strb	r3, [r7, #27]
 8004ef2:	e0fd      	b.n	80050f0 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efc:	f040 8084 	bne.w	8005008 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8004f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d85f      	bhi.n	8004fc8 <UART_SetConfig+0x5a4>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x4ec>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f35 	.word	0x08004f35
 8004f14:	08004f55 	.word	0x08004f55
 8004f18:	08004f75 	.word	0x08004f75
 8004f1c:	08004fc9 	.word	0x08004fc9
 8004f20:	08004f91 	.word	0x08004f91
 8004f24:	08004fc9 	.word	0x08004fc9
 8004f28:	08004fc9 	.word	0x08004fc9
 8004f2c:	08004fc9 	.word	0x08004fc9
 8004f30:	08004fb1 	.word	0x08004fb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f34:	f7fe fae8 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8004f38:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	005a      	lsls	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	441a      	add	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f52:	e03c      	b.n	8004fce <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f54:	f7fe faee 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 8004f58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	005a      	lsls	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	441a      	add	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f72:	e02c      	b.n	8004fce <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004f7e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6852      	ldr	r2, [r2, #4]
 8004f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f8e:	e01e      	b.n	8004fce <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f90:	f7fe fa24 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8004f94:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	005a      	lsls	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	441a      	add	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fae:	e00e      	b.n	8004fce <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004fc6:	e002      	b.n	8004fce <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	76fb      	strb	r3, [r7, #27]
        break;
 8004fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d916      	bls.n	8005002 <UART_SetConfig+0x5de>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d212      	bcs.n	8005002 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	89fb      	ldrh	r3, [r7, #14]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	89fa      	ldrh	r2, [r7, #14]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e076      	b.n	80050f0 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	76fb      	strb	r3, [r7, #27]
 8005006:	e073      	b.n	80050f0 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500c:	2b08      	cmp	r3, #8
 800500e:	d85c      	bhi.n	80050ca <UART_SetConfig+0x6a6>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x5f4>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800503d 	.word	0x0800503d
 800501c:	0800505b 	.word	0x0800505b
 8005020:	08005079 	.word	0x08005079
 8005024:	080050cb 	.word	0x080050cb
 8005028:	08005095 	.word	0x08005095
 800502c:	080050cb 	.word	0x080050cb
 8005030:	080050cb 	.word	0x080050cb
 8005034:	080050cb 	.word	0x080050cb
 8005038:	080050b3 	.word	0x080050b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800503c:	f7fe fa64 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8005040:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	085a      	lsrs	r2, r3, #1
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	441a      	add	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005058:	e03a      	b.n	80050d0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800505a:	f7fe fa6b 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 800505e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	085a      	lsrs	r2, r3, #1
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005072:	b29b      	uxth	r3, r3
 8005074:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005076:	e02b      	b.n	80050d0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005082:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6852      	ldr	r2, [r2, #4]
 800508a:	fbb3 f3f2 	udiv	r3, r3, r2
 800508e:	b29b      	uxth	r3, r3
 8005090:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005092:	e01d      	b.n	80050d0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005094:	f7fe f9a2 	bl	80033dc <HAL_RCC_GetSysClockFreq>
 8005098:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	085a      	lsrs	r2, r3, #1
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	441a      	add	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80050b0:	e00e      	b.n	80050d0 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80050c8:	e002      	b.n	80050d0 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	76fb      	strb	r3, [r7, #27]
        break;
 80050ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	d90a      	bls.n	80050ec <UART_SetConfig+0x6c8>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d206      	bcs.n	80050ec <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	e003      	b.n	80050f0 <UART_SetConfig+0x6cc>
 80050e8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050fc:	7efb      	ldrb	r3, [r7, #27]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005206:	d10a      	bne.n	800521e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00a      	beq.n	8005240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	605a      	str	r2, [r3, #4]
  }
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800525a:	f7fb fc0d 	bl	8000a78 <HAL_GetTick>
 800525e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10e      	bne.n	800528c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800526e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f82a 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e020      	b.n	80052ce <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b04      	cmp	r3, #4
 8005298:	d10e      	bne.n	80052b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800529a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f814 	bl	80052d6 <UART_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e00a      	b.n	80052ce <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e6:	e05d      	b.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d059      	beq.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7fb fbc2 	bl	8000a78 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <UART_WaitOnFlagUntilTimeout+0x30>
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d11b      	bne.n	800533e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005314:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e042      	b.n	80053c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02b      	beq.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800535a:	d123      	bne.n	80053a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005364:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005374:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e00f      	b.n	80053c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d092      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80053e2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2220      	movs	r2, #32
 80053e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80053ea:	bf00      	nop
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800540c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	661a      	str	r2, [r3, #96]	; 0x60
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d114      	bne.n	800547c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005468:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005478:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800547a:	e002      	b.n	8005482 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f003 f8f3 	bl	8008668 <HAL_UART_TxCpltCallback>
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fab9 	bl	8004a10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b086      	sub	sp, #24
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d109      	bne.n	80054e2 <UART_DMAError+0x3c>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b21      	cmp	r3, #33	; 0x21
 80054d2:	d106      	bne.n	80054e2 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80054dc:	6978      	ldr	r0, [r7, #20]
 80054de:	f7ff ff75 	bl	80053cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d109      	bne.n	8005504 <UART_DMAError+0x5e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b22      	cmp	r3, #34	; 0x22
 80054f4:	d106      	bne.n	8005504 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff ff79 	bl	80053f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005508:	f043 0210 	orr.w	r2, r3, #16
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005510:	6978      	ldr	r0, [r7, #20]
 8005512:	f003 f951 	bl	80087b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f003 f93b 	bl	80087b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2220      	movs	r2, #32
 8005566:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f003 f87a 	bl	8008668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005574:	bf00      	nop
 8005576:	3708      	adds	r7, #8
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800558a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005590:	2b22      	cmp	r3, #34	; 0x22
 8005592:	d13a      	bne.n	800560a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800559a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800559c:	89bb      	ldrh	r3, [r7, #12]
 800559e:	b2d9      	uxtb	r1, r3
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	400a      	ands	r2, r1
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055be:	b29b      	uxth	r3, r3
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d123      	bne.n	800561e <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80055e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f003 f80e 	bl	8008624 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005608:	e009      	b.n	800561e <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	8b1b      	ldrh	r3, [r3, #24]
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	b292      	uxth	r2, r2
 800561c:	831a      	strh	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005634:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800563a:	2b22      	cmp	r3, #34	; 0x22
 800563c:	d13a      	bne.n	80056b4 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005644:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800564c:	89ba      	ldrh	r2, [r7, #12]
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	4013      	ands	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	1c9a      	adds	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d123      	bne.n	80056c8 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800568e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0201 	bic.w	r2, r2, #1
 800569e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f002 ffb9 	bl	8008624 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056b2:	e009      	b.n	80056c8 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	8b1b      	ldrh	r3, [r3, #24]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0208 	orr.w	r2, r2, #8
 80056c4:	b292      	uxth	r2, r2
 80056c6:	831a      	strh	r2, [r3, #24]
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e4:	b084      	sub	sp, #16
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	f107 001c 	add.w	r0, r7, #28
 80056f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d122      	bne.n	8005742 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d105      	bne.n	8005736 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 f9c8 	bl	8006acc <USB_CoreReset>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
 8005740:	e01a      	b.n	8005778 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 f9bc 	bl	8006acc <USB_CoreReset>
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
 800576a:	e005      	b.n	8005778 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005784:	b004      	add	sp, #16
 8005786:	4770      	bx	lr

08005788 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d165      	bne.n	8005868 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4a3e      	ldr	r2, [pc, #248]	; (8005898 <USB_SetTurnaroundTime+0x110>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d906      	bls.n	80057b2 <USB_SetTurnaroundTime+0x2a>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4a3d      	ldr	r2, [pc, #244]	; (800589c <USB_SetTurnaroundTime+0x114>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d802      	bhi.n	80057b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057ac:	230f      	movs	r3, #15
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e05c      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4a39      	ldr	r2, [pc, #228]	; (800589c <USB_SetTurnaroundTime+0x114>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d906      	bls.n	80057c8 <USB_SetTurnaroundTime+0x40>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <USB_SetTurnaroundTime+0x118>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d802      	bhi.n	80057c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057c2:	230e      	movs	r3, #14
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e051      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a35      	ldr	r2, [pc, #212]	; (80058a0 <USB_SetTurnaroundTime+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d906      	bls.n	80057de <USB_SetTurnaroundTime+0x56>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <USB_SetTurnaroundTime+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d802      	bhi.n	80057de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057d8:	230d      	movs	r3, #13
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e046      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a30      	ldr	r2, [pc, #192]	; (80058a4 <USB_SetTurnaroundTime+0x11c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d906      	bls.n	80057f4 <USB_SetTurnaroundTime+0x6c>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a2f      	ldr	r2, [pc, #188]	; (80058a8 <USB_SetTurnaroundTime+0x120>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d802      	bhi.n	80057f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ee:	230c      	movs	r3, #12
 80057f0:	617b      	str	r3, [r7, #20]
 80057f2:	e03b      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <USB_SetTurnaroundTime+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d906      	bls.n	800580a <USB_SetTurnaroundTime+0x82>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <USB_SetTurnaroundTime+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d802      	bhi.n	800580a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005804:	230b      	movs	r3, #11
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e030      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a27      	ldr	r2, [pc, #156]	; (80058ac <USB_SetTurnaroundTime+0x124>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d906      	bls.n	8005820 <USB_SetTurnaroundTime+0x98>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <USB_SetTurnaroundTime+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d802      	bhi.n	8005820 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800581a:	230a      	movs	r3, #10
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	e025      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a23      	ldr	r2, [pc, #140]	; (80058b0 <USB_SetTurnaroundTime+0x128>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d906      	bls.n	8005836 <USB_SetTurnaroundTime+0xae>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <USB_SetTurnaroundTime+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d802      	bhi.n	8005836 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005830:	2309      	movs	r3, #9
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	e01a      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <USB_SetTurnaroundTime+0x12c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d906      	bls.n	800584c <USB_SetTurnaroundTime+0xc4>
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <USB_SetTurnaroundTime+0x130>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d802      	bhi.n	800584c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005846:	2308      	movs	r3, #8
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e00f      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4a1a      	ldr	r2, [pc, #104]	; (80058b8 <USB_SetTurnaroundTime+0x130>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d906      	bls.n	8005862 <USB_SetTurnaroundTime+0xda>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <USB_SetTurnaroundTime+0x134>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d802      	bhi.n	8005862 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800585c:	2307      	movs	r3, #7
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e004      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005862:	2306      	movs	r3, #6
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e001      	b.n	800586c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005868:	2309      	movs	r3, #9
 800586a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	029b      	lsls	r3, r3, #10
 8005880:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	00d8acbf 	.word	0x00d8acbf
 800589c:	00e4e1bf 	.word	0x00e4e1bf
 80058a0:	00f423ff 	.word	0x00f423ff
 80058a4:	0106737f 	.word	0x0106737f
 80058a8:	011a499f 	.word	0x011a499f
 80058ac:	01312cff 	.word	0x01312cff
 80058b0:	014ca43f 	.word	0x014ca43f
 80058b4:	016e35ff 	.word	0x016e35ff
 80058b8:	01a6ab1f 	.word	0x01a6ab1f
 80058bc:	01e847ff 	.word	0x01e847ff

080058c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f043 0201 	orr.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0201 	bic.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e00b      	b.n	8005948 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	e001      	b.n	8005948 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e003      	b.n	8005950 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005948:	2032      	movs	r0, #50	; 0x32
 800594a:	f7fb f8a1 	bl	8000a90 <HAL_Delay>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005958:	b084      	sub	sp, #16
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	e009      	b.n	800598c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3340      	adds	r3, #64	; 0x40
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	2200      	movs	r2, #0
 8005984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3301      	adds	r3, #1
 800598a:	613b      	str	r3, [r7, #16]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b0e      	cmp	r3, #14
 8005990:	d9f2      	bls.n	8005978 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11c      	bne.n	80059d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a6:	f043 0302 	orr.w	r3, r3, #2
 80059aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	e005      	b.n	80059de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2300      	movs	r3, #0
 80059e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	4619      	mov	r1, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f8:	461a      	mov	r2, r3
 80059fa:	680b      	ldr	r3, [r1, #0]
 80059fc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059fe:	2103      	movs	r1, #3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f93d 	bl	8005c80 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a06:	2110      	movs	r1, #16
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f8f1 	bl	8005bf0 <USB_FlushTxFifo>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f90f 	bl	8005c3c <USB_FlushRxFifo>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	461a      	mov	r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	461a      	mov	r2, r3
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e043      	b.n	8005ada <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a68:	d118      	bne.n	8005a9c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10a      	bne.n	8005a86 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e013      	b.n	8005aae <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a92:	461a      	mov	r2, r3
 8005a94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e008      	b.n	8005aae <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	461a      	mov	r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	461a      	mov	r2, r3
 8005ace:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ad2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3b7      	bcc.n	8005a52 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	e043      	b.n	8005b70 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005afe:	d118      	bne.n	8005b32 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10a      	bne.n	8005b1c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	461a      	mov	r2, r3
 8005b14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e013      	b.n	8005b44 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e008      	b.n	8005b44 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2300      	movs	r3, #0
 8005b42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2300      	movs	r3, #0
 8005b54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3b7      	bcc.n	8005ae8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f043 0210 	orr.w	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	4b10      	ldr	r3, [pc, #64]	; (8005bec <USB_DevInit+0x294>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f043 0208 	orr.w	r2, r3, #8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bd2:	f043 0304 	orr.w	r3, r3, #4
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005be6:	b004      	add	sp, #16
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	803c3800 	.word	0x803c3800

08005bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	f043 0220 	orr.w	r2, r3, #32
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <USB_FlushTxFifo+0x48>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d901      	bls.n	8005c1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b20      	cmp	r3, #32
 8005c26:	d0f0      	beq.n	8005c0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	00030d40 	.word	0x00030d40

08005c3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3301      	adds	r3, #1
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <USB_FlushRxFifo+0x40>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d901      	bls.n	8005c60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e006      	b.n	8005c6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b10      	cmp	r3, #16
 8005c6a:	d0f0      	beq.n	8005c4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	00030d40 	.word	0x00030d40

08005c80 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0306 	and.w	r3, r3, #6
 8005cca:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d002      	beq.n	8005cd8 <USB_GetDevSpeed+0x26>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d102      	bne.n	8005cde <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	75fb      	strb	r3, [r7, #23]
 8005cdc:	e001      	b.n	8005ce2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005cde:	230f      	movs	r3, #15
 8005ce0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d13a      	bne.n	8005d82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	68f9      	ldr	r1, [r7, #12]
 8005d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d155      	bne.n	8005df0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	78db      	ldrb	r3, [r3, #3]
 8005d5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	059b      	lsls	r3, r3, #22
 8005d66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e036      	b.n	8005df0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	69da      	ldr	r2, [r3, #28]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	2101      	movs	r1, #1
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11a      	bne.n	8005df0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d161      	bne.n	8005ee0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e32:	d11f      	bne.n	8005e74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	2101      	movs	r1, #1
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	68f9      	ldr	r1, [r7, #12]
 8005e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e94:	4013      	ands	r3, r2
 8005e96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb8:	4013      	ands	r3, r2
 8005eba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	0159      	lsls	r1, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	440b      	add	r3, r1
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4b35      	ldr	r3, [pc, #212]	; (8005fb0 <USB_DeactivateEndpoint+0x1b0>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
 8005ede:	e060      	b.n	8005fa2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef6:	d11f      	bne.n	8005f38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	0151      	lsls	r1, r2, #5
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	440a      	add	r2, r1
 8005f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	2101      	movs	r1, #1
 8005f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	43db      	mvns	r3, r3
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f58:	4013      	ands	r3, r2
 8005f5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	43db      	mvns	r3, r3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	0159      	lsls	r1, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	440b      	add	r3, r1
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <USB_DeactivateEndpoint+0x1b4>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	ec337800 	.word	0xec337800
 8005fb4:	eff37800 	.word	0xeff37800

08005fb8 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	f040 810a 	bne.w	80061ea <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d132      	bne.n	8006044 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ffc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	440a      	add	r2, r1
 8006018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006020:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	440a      	add	r2, r1
 8006038:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800603c:	0cdb      	lsrs	r3, r3, #19
 800603e:	04db      	lsls	r3, r3, #19
 8006040:	6113      	str	r3, [r2, #16]
 8006042:	e074      	b.n	800612e <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	0151      	lsls	r1, r2, #5
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	440a      	add	r2, r1
 800605a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605e:	0cdb      	lsrs	r3, r3, #19
 8006060:	04db      	lsls	r3, r3, #19
 8006062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	0151      	lsls	r1, r2, #5
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	440a      	add	r2, r1
 800607a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006082:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6959      	ldr	r1, [r3, #20]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	440b      	add	r3, r1
 80060a0:	1e59      	subs	r1, r3, #1
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80060aa:	04d9      	lsls	r1, r3, #19
 80060ac:	4baf      	ldr	r3, [pc, #700]	; (800636c <USB_EPStartXfer+0x3b4>)
 80060ae:	400b      	ands	r3, r1
 80060b0:	6939      	ldr	r1, [r7, #16]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	6979      	ldr	r1, [r7, #20]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d6:	6939      	ldr	r1, [r7, #16]
 80060d8:	0148      	lsls	r0, r1, #5
 80060da:	6979      	ldr	r1, [r7, #20]
 80060dc:	4401      	add	r1, r0
 80060de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	78db      	ldrb	r3, [r3, #3]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d11f      	bne.n	800612e <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006108:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800610c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800612c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006148:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800614c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d015      	beq.n	8006182 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8100 	beq.w	8006360 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800617c:	4313      	orrs	r3, r2
 800617e:	634b      	str	r3, [r1, #52]	; 0x34
 8006180:	e0ee      	b.n	8006360 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00f      	b.n	80061d4 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68d9      	ldr	r1, [r3, #12]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9e2 	bl	80065ac <USB_WritePacket>
 80061e8:	e0ba      	b.n	8006360 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	0cdb      	lsrs	r3, r3, #19
 8006206:	04db      	lsls	r3, r3, #19
 8006208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d123      	bne.n	800627e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	6939      	ldr	r1, [r7, #16]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	4401      	add	r1, r0
 8006254:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	440a      	add	r2, r1
 8006272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800627a:	6113      	str	r3, [r2, #16]
 800627c:	e033      	b.n	80062e6 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	4413      	add	r3, r2
 8006288:	1e5a      	subs	r2, r3, #1
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006292:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	89fb      	ldrh	r3, [r7, #14]
 80062a4:	04d9      	lsls	r1, r3, #19
 80062a6:	4b31      	ldr	r3, [pc, #196]	; (800636c <USB_EPStartXfer+0x3b4>)
 80062a8:	400b      	ands	r3, r1
 80062aa:	6939      	ldr	r1, [r7, #16]
 80062ac:	0148      	lsls	r0, r1, #5
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	4401      	add	r1, r0
 80062b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062b6:	4313      	orrs	r3, r2
 80062b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	89f9      	ldrh	r1, [r7, #14]
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d6:	6939      	ldr	r1, [r7, #16]
 80062d8:	0148      	lsls	r0, r1, #5
 80062da:	6979      	ldr	r1, [r7, #20]
 80062dc:	4401      	add	r1, r0
 80062de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062e2:	4313      	orrs	r3, r2
 80062e4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d128      	bne.n	8006340 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d110      	bne.n	8006320 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006318:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	e00f      	b.n	8006340 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800635e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	1ff80000 	.word	0x1ff80000

08006370 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	785b      	ldrb	r3, [r3, #1]
 8006388:	2b01      	cmp	r3, #1
 800638a:	f040 80ab 	bne.w	80064e4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d132      	bne.n	80063fc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f4:	0cdb      	lsrs	r3, r3, #19
 80063f6:	04db      	lsls	r3, r3, #19
 80063f8:	6113      	str	r3, [r2, #16]
 80063fa:	e04e      	b.n	800649a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006416:	0cdb      	lsrs	r3, r3, #19
 8006418:	04db      	lsls	r3, r3, #19
 800641a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800643a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800643e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695a      	ldr	r2, [r3, #20]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	d903      	bls.n	8006454 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	0148      	lsls	r0, r1, #5
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	4401      	add	r1, r0
 8006492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006496:	4313      	orrs	r3, r2
 8006498:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064b8:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d06d      	beq.n	800659e <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	2101      	movs	r1, #1
 80064d4:	fa01 f303 	lsl.w	r3, r1, r3
 80064d8:	68f9      	ldr	r1, [r7, #12]
 80064da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064de:	4313      	orrs	r3, r2
 80064e0:	634b      	str	r3, [r1, #52]	; 0x34
 80064e2:	e05c      	b.n	800659e <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fe:	0cdb      	lsrs	r3, r3, #19
 8006500:	04db      	lsls	r3, r3, #19
 8006502:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	0151      	lsls	r1, r2, #5
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	440a      	add	r2, r1
 800651a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006522:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006526:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006564:	691a      	ldr	r2, [r3, #16]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	0148      	lsls	r0, r1, #5
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	4401      	add	r1, r0
 8006576:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800657a:	4313      	orrs	r3, r2
 800657c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800659c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b089      	sub	sp, #36	; 0x24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	460b      	mov	r3, r1
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	4613      	mov	r3, r2
 80065c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80065ca:	88bb      	ldrh	r3, [r7, #4]
 80065cc:	3303      	adds	r3, #3
 80065ce:	089b      	lsrs	r3, r3, #2
 80065d0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e00f      	b.n	80065f8 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	031a      	lsls	r2, r3, #12
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e4:	461a      	mov	r2, r3
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6013      	str	r3, [r2, #0]
    pSrc++;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3304      	adds	r3, #4
 80065f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d3eb      	bcc.n	80065d8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3724      	adds	r7, #36	; 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800660e:	b480      	push	{r7}
 8006610:	b089      	sub	sp, #36	; 0x24
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006624:	88fb      	ldrh	r3, [r7, #6]
 8006626:	3303      	adds	r3, #3
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e00b      	b.n	800664a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	601a      	str	r2, [r3, #0]
    pDest++;
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3304      	adds	r3, #4
 8006642:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	3301      	adds	r3, #1
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d3ef      	bcc.n	8006632 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006652:	69fb      	ldr	r3, [r7, #28]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3724      	adds	r7, #36	; 0x24
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d12c      	bne.n	80066d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db12      	blt.n	80066b4 <USB_EPSetStall+0x54>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00f      	beq.n	80066b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	e02b      	b.n	800672e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	db12      	blt.n	800670e <USB_EPSetStall+0xae>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00f      	beq.n	800670e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006708:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800670c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800672c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d128      	bne.n	80067aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006776:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	78db      	ldrb	r3, [r3, #3]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d003      	beq.n	8006788 <USB_EPClearStall+0x4c>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	78db      	ldrb	r3, [r3, #3]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d138      	bne.n	80067fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e027      	b.n	80067fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	0151      	lsls	r1, r2, #5
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	440a      	add	r2, r1
 80067c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	78db      	ldrb	r3, [r3, #3]
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d003      	beq.n	80067da <USB_EPClearStall+0x9e>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	78db      	ldrb	r3, [r3, #3]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d10f      	bne.n	80067fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006826:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800682a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800686e:	f023 0302 	bic.w	r3, r3, #2
 8006872:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006874:	2003      	movs	r0, #3
 8006876:	f7fa f90b 	bl	8000a90 <HAL_Delay>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800689e:	f043 0302 	orr.w	r3, r3, #2
 80068a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80068a4:	2003      	movs	r0, #3
 80068a6:	f7fa f8f3 	bl	8000a90 <HAL_Delay>

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068cc:	68fb      	ldr	r3, [r7, #12]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	4013      	ands	r3, r2
 80068fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	0c1b      	lsrs	r3, r3, #16
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	4013      	ands	r3, r2
 8006930:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	b29b      	uxth	r3, r3
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4013      	ands	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006970:	68bb      	ldr	r3, [r7, #8]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	fa22 f303 	lsr.w	r3, r2, r3
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4013      	ands	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069cc:	68bb      	ldr	r3, [r7, #8]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0301 	and.w	r3, r3, #1
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	333c      	adds	r3, #60	; 0x3c
 8006a4e:	3304      	adds	r3, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4a1c      	ldr	r2, [pc, #112]	; (8006ac8 <USB_EP0_OutStart+0x8c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d90a      	bls.n	8006a72 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a6c:	d101      	bne.n	8006a72 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e024      	b.n	8006abc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa0:	f043 0318 	orr.w	r3, r3, #24
 8006aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ab8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	4f54300a 	.word	0x4f54300a

08006acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <USB_CoreReset+0x64>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e01b      	b.n	8006b22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	daf2      	bge.n	8006ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3301      	adds	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <USB_CoreReset+0x64>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d901      	bls.n	8006b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e006      	b.n	8006b22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d0f0      	beq.n	8006b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	00030d40 	.word	0x00030d40

08006b34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7c1b      	ldrb	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d115      	bne.n	8006b78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b50:	2202      	movs	r2, #2
 8006b52:	2181      	movs	r1, #129	; 0x81
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f93f 	bl	8008dd8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b64:	2202      	movs	r2, #2
 8006b66:	2101      	movs	r1, #1
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f002 f935 	bl	8008dd8 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b76:	e012      	b.n	8006b9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	2181      	movs	r1, #129	; 0x81
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f002 f92a 	bl	8008dd8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b8a:	2340      	movs	r3, #64	; 0x40
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	2101      	movs	r1, #1
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f002 f921 	bl	8008dd8 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	2182      	movs	r1, #130	; 0x82
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f002 f917 	bl	8008dd8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bb4:	f002 fb28 	bl	8009208 <USBD_static_malloc>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d102      	bne.n	8006bd0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	73fb      	strb	r3, [r7, #15]
 8006bce:	e026      	b.n	8006c1e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	7c1b      	ldrb	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c04:	2101      	movs	r1, #1
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 fa62 	bl	80090d0 <USBD_LL_PrepareReceive>
 8006c0c:	e007      	b.n	8006c1e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	2101      	movs	r1, #1
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f002 fa59 	bl	80090d0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006c38:	2181      	movs	r1, #129	; 0x81
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f002 f90a 	bl	8008e54 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006c46:	2101      	movs	r1, #1
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f002 f903 	bl	8008e54 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006c56:	2182      	movs	r1, #130	; 0x82
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f002 f8fb 	bl	8008e54 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f002 fad0 	bl	8009224 <USBD_static_free>
    pdev->pClassData = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d039      	beq.n	8006d34 <USBD_CDC_Setup+0x9e>
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d17c      	bne.n	8006dbe <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	88db      	ldrh	r3, [r3, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d029      	beq.n	8006d20 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b25b      	sxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da11      	bge.n	8006cfa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006ce2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	88d2      	ldrh	r2, [r2, #6]
 8006ce8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cea:	6939      	ldr	r1, [r7, #16]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fa6a 	bl	80081cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006cf8:	e068      	b.n	8006dcc <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	785a      	ldrb	r2, [r3, #1]
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	88db      	ldrh	r3, [r3, #6]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006d10:	6939      	ldr	r1, [r7, #16]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	88db      	ldrh	r3, [r3, #6]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 fa85 	bl	8008228 <USBD_CtlPrepareRx>
      break;
 8006d1e:	e055      	b.n	8006dcc <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	7850      	ldrb	r0, [r2, #1]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	4798      	blx	r3
      break;
 8006d32:	e04b      	b.n	8006dcc <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	785b      	ldrb	r3, [r3, #1]
 8006d38:	2b0a      	cmp	r3, #10
 8006d3a:	d017      	beq.n	8006d6c <USBD_CDC_Setup+0xd6>
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	d029      	beq.n	8006d94 <USBD_CDC_Setup+0xfe>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d133      	bne.n	8006dac <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d107      	bne.n	8006d5e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	2202      	movs	r2, #2
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fa38 	bl	80081cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d5c:	e02e      	b.n	8006dbc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f9c8 	bl	80080f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	75fb      	strb	r3, [r7, #23]
          break;
 8006d6a:	e027      	b.n	8006dbc <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d76:	f107 030f 	add.w	r3, r7, #15
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fa24 	bl	80081cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d84:	e01a      	b.n	8006dbc <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f9b4 	bl	80080f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	75fb      	strb	r3, [r7, #23]
          break;
 8006d92:	e013      	b.n	8006dbc <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d00d      	beq.n	8006dba <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f9a8 	bl	80080f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006daa:	e006      	b.n	8006dba <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 f9a1 	bl	80080f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006db4:	2302      	movs	r3, #2
 8006db6:	75fb      	strb	r3, [r7, #23]
          break;
 8006db8:	e000      	b.n	8006dbc <USBD_CDC_Setup+0x126>
          break;
 8006dba:	bf00      	nop
      }
      break;
 8006dbc:	e006      	b.n	8006dcc <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f998 	bl	80080f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dca:	bf00      	nop
  }

  return ret;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d03a      	beq.n	8006e72 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	331c      	adds	r3, #28
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d029      	beq.n	8006e66 <USBD_CDC_DataIn+0x90>
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	6879      	ldr	r1, [r7, #4]
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	440b      	add	r3, r1
 8006e20:	331c      	adds	r3, #28
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	78f9      	ldrb	r1, [r7, #3]
 8006e26:	68b8      	ldr	r0, [r7, #8]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	1a5b      	subs	r3, r3, r1
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4403      	add	r3, r0
 8006e32:	3344      	adds	r3, #68	; 0x44
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	fbb2 f1f3 	udiv	r1, r2, r3
 8006e3a:	fb03 f301 	mul.w	r3, r3, r1
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d110      	bne.n	8006e66 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	331c      	adds	r3, #28
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e58:	78f9      	ldrb	r1, [r7, #3]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f002 f8fc 	bl	800905c <USBD_LL_Transmit>
 8006e64:	e003      	b.n	8006e6e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	e000      	b.n	8006e74 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e72:	2302      	movs	r3, #2
  }
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	460b      	mov	r3, r1
 8006e86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e90:	78fb      	ldrb	r3, [r7, #3]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 f955 	bl	8009144 <USBD_LL_GetRxDataSize>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00d      	beq.n	8006ec8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4798      	blx	r3

    return USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	e000      	b.n	8006eca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ec8:	2302      	movs	r3, #2
  }
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d015      	beq.n	8006f18 <USBD_CDC_EP0_RxReady+0x46>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ef2:	2bff      	cmp	r3, #255	; 0xff
 8006ef4:	d010      	beq.n	8006f18 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006f04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	22ff      	movs	r2, #255	; 0xff
 8006f14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2243      	movs	r2, #67	; 0x43
 8006f30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000094 	.word	0x20000094

08006f44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2243      	movs	r2, #67	; 0x43
 8006f50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006f52:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	20000050 	.word	0x20000050

08006f64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2243      	movs	r2, #67	; 0x43
 8006f70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f72:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	200000d8 	.word	0x200000d8

08006f84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	2000000c 	.word	0x2000000c

08006fa4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006fae:	2302      	movs	r3, #2
 8006fb0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007016:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b084      	sub	sp, #16
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01c      	beq.n	8007082 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800704e:	2b00      	cmp	r3, #0
 8007050:	d115      	bne.n	800707e <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007070:	b29b      	uxth	r3, r3
 8007072:	2181      	movs	r1, #129	; 0x81
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fff1 	bl	800905c <USBD_LL_Transmit>

      return USBD_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e002      	b.n	8007084 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d017      	beq.n	80070d6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7c1b      	ldrb	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b8:	2101      	movs	r1, #1
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f002 f808 	bl	80090d0 <USBD_LL_PrepareReceive>
 80070c0:	e007      	b.n	80070d2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	2101      	movs	r1, #1
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 ffff 	bl	80090d0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070f4:	2302      	movs	r3, #2
 80070f6:	e01a      	b.n	800712e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	79fa      	ldrb	r2, [r7, #7]
 8007124:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 fdd8 	bl	8008cdc <USBD_LL_Init>

  return USBD_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d006      	beq.n	8007158 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]
 8007156:	e001      	b.n	800715c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007158:	2302      	movs	r3, #2
 800715a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b082      	sub	sp, #8
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fdfe 	bl	8008d74 <USBD_LL_Start>

  return USBD_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00c      	beq.n	80071cc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	4611      	mov	r1, r2
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	4611      	mov	r1, r2
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3

  return USBD_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 ff34 	bl	800807c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2b01      	cmp	r3, #1
 8007236:	d00c      	beq.n	8007252 <USBD_LL_SetupStage+0x56>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d302      	bcc.n	8007242 <USBD_LL_SetupStage+0x46>
 800723c:	2b02      	cmp	r3, #2
 800723e:	d010      	beq.n	8007262 <USBD_LL_SetupStage+0x66>
 8007240:	e017      	b.n	8007272 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa0a 	bl	8007664 <USBD_StdDevReq>
      break;
 8007250:	e01a      	b.n	8007288 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa6c 	bl	8007738 <USBD_StdItfReq>
      break;
 8007260:	e012      	b.n	8007288 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 faaa 	bl	80077c4 <USBD_StdEPReq>
      break;
 8007270:	e00a      	b.n	8007288 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007278:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800727c:	b2db      	uxtb	r3, r3
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 fe1d 	bl	8008ec0 <USBD_LL_StallEP>
      break;
 8007286:	bf00      	nop
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	460b      	mov	r3, r1
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d14b      	bne.n	800733e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d134      	bne.n	8007322 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d919      	bls.n	80072f8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072da:	429a      	cmp	r2, r3
 80072dc:	d203      	bcs.n	80072e6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	e002      	b.n	80072ec <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 ffb7 	bl	8008264 <USBD_CtlContinueRx>
 80072f6:	e038      	b.n	800736a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800730a:	2b03      	cmp	r3, #3
 800730c:	d105      	bne.n	800731a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 ffb4 	bl	8008288 <USBD_CtlSendStatus>
 8007320:	e023      	b.n	800736a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007328:	2b05      	cmp	r3, #5
 800732a:	d11e      	bne.n	800736a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f001 fdc2 	bl	8008ec0 <USBD_LL_StallEP>
 800733c:	e015      	b.n	800736a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00d      	beq.n	8007366 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007350:	2b03      	cmp	r3, #3
 8007352:	d108      	bne.n	8007366 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	7afa      	ldrb	r2, [r7, #11]
 800735e:	4611      	mov	r1, r2
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	4798      	blx	r3
 8007364:	e001      	b.n	800736a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007366:	2302      	movs	r3, #2
 8007368:	e000      	b.n	800736c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	460b      	mov	r3, r1
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d17f      	bne.n	8007488 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3314      	adds	r3, #20
 800738c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007394:	2b02      	cmp	r3, #2
 8007396:	d15c      	bne.n	8007452 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d915      	bls.n	80073d0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	1ad2      	subs	r2, r2, r3
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	461a      	mov	r2, r3
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 ff21 	bl	8008204 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	2100      	movs	r1, #0
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 fe81 	bl	80090d0 <USBD_LL_PrepareReceive>
 80073ce:	e04e      	b.n	800746e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	6912      	ldr	r2, [r2, #16]
 80073d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073dc:	fb02 f201 	mul.w	r2, r2, r1
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d11c      	bne.n	8007420 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d316      	bcc.n	8007420 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d20f      	bcs.n	8007420 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007400:	2200      	movs	r2, #0
 8007402:	2100      	movs	r1, #0
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fefd 	bl	8008204 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007412:	2300      	movs	r3, #0
 8007414:	2200      	movs	r2, #0
 8007416:	2100      	movs	r1, #0
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 fe59 	bl	80090d0 <USBD_LL_PrepareReceive>
 800741e:	e026      	b.n	800746e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007432:	2b03      	cmp	r3, #3
 8007434:	d105      	bne.n	8007442 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007442:	2180      	movs	r1, #128	; 0x80
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f001 fd3b 	bl	8008ec0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 ff2f 	bl	80082ae <USBD_CtlReceiveStatus>
 8007450:	e00d      	b.n	800746e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007458:	2b04      	cmp	r3, #4
 800745a:	d004      	beq.n	8007466 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f001 fd29 	bl	8008ec0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d11d      	bne.n	80074b4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff fe82 	bl	8007182 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007486:	e015      	b.n	80074b4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00d      	beq.n	80074b0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800749a:	2b03      	cmp	r3, #3
 800749c:	d108      	bne.n	80074b0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	7afa      	ldrb	r2, [r7, #11]
 80074a8:	4611      	mov	r1, r2
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
 80074ae:	e001      	b.n	80074b4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074b0:	2302      	movs	r3, #2
 80074b2:	e000      	b.n	80074b6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c6:	2340      	movs	r3, #64	; 0x40
 80074c8:	2200      	movs	r2, #0
 80074ca:	2100      	movs	r1, #0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fc83 	bl	8008dd8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2240      	movs	r2, #64	; 0x40
 80074de:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074e2:	2340      	movs	r3, #64	; 0x40
 80074e4:	2200      	movs	r2, #0
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fc75 	bl	8008dd8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2240      	movs	r2, #64	; 0x40
 80074f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	6852      	ldr	r2, [r2, #4]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	4611      	mov	r1, r2
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
  }

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2204      	movs	r2, #4
 8007578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007598:	2b04      	cmp	r3, #4
 800759a:	d105      	bne.n	80075a8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d10b      	bne.n	80075e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6852      	ldr	r2, [r2, #4]
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	4611      	mov	r1, r2
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767a:	2b20      	cmp	r3, #32
 800767c:	d004      	beq.n	8007688 <USBD_StdDevReq+0x24>
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d002      	beq.n	8007688 <USBD_StdDevReq+0x24>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <USBD_StdDevReq+0x34>
 8007686:	e04c      	b.n	8007722 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
      break;
 8007696:	e049      	b.n	800772c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b09      	cmp	r3, #9
 800769e:	d83a      	bhi.n	8007716 <USBD_StdDevReq+0xb2>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_StdDevReq+0x44>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	08007717 	.word	0x08007717
 80076b4:	08007703 	.word	0x08007703
 80076b8:	08007717 	.word	0x08007717
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	08007717 	.word	0x08007717
 80076c8:	080076ef 	.word	0x080076ef
 80076cc:	080076e5 	.word	0x080076e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9d4 	bl	8007a80 <USBD_GetDescriptor>
          break;
 80076d8:	e022      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb61 	bl	8007da4 <USBD_SetAddress>
          break;
 80076e2:	e01d      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb9e 	bl	8007e28 <USBD_SetConfig>
          break;
 80076ec:	e018      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc27 	bl	8007f44 <USBD_GetConfig>
          break;
 80076f6:	e013      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc56 	bl	8007fac <USBD_GetStatus>
          break;
 8007700:	e00e      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fc84 	bl	8008012 <USBD_SetFeature>
          break;
 800770a:	e009      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc93 	bl	800803a <USBD_ClrFeature>
          break;
 8007714:	e004      	b.n	8007720 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fcec 	bl	80080f6 <USBD_CtlError>
          break;
 800771e:	bf00      	nop
      }
      break;
 8007720:	e004      	b.n	800772c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fce6 	bl	80080f6 <USBD_CtlError>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774e:	2b20      	cmp	r3, #32
 8007750:	d003      	beq.n	800775a <USBD_StdItfReq+0x22>
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d001      	beq.n	800775a <USBD_StdItfReq+0x22>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d12a      	bne.n	80077b0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	3b01      	subs	r3, #1
 8007762:	2b02      	cmp	r3, #2
 8007764:	d81d      	bhi.n	80077a2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	889b      	ldrh	r3, [r3, #4]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	d813      	bhi.n	8007798 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	88db      	ldrh	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d110      	bne.n	80077ac <USBD_StdItfReq+0x74>
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd79 	bl	8008288 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007796:	e009      	b.n	80077ac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fcab 	bl	80080f6 <USBD_CtlError>
          break;
 80077a0:	e004      	b.n	80077ac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fca6 	bl	80080f6 <USBD_CtlError>
          break;
 80077aa:	e000      	b.n	80077ae <USBD_StdItfReq+0x76>
          break;
 80077ac:	bf00      	nop
      }
      break;
 80077ae:	e004      	b.n	80077ba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fc9f 	bl	80080f6 <USBD_CtlError>
      break;
 80077b8:	bf00      	nop
  }

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d004      	beq.n	80077ee <USBD_StdEPReq+0x2a>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d002      	beq.n	80077ee <USBD_StdEPReq+0x2a>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d008      	beq.n	80077fe <USBD_StdEPReq+0x3a>
 80077ec:	e13d      	b.n	8007a6a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
      break;
 80077fc:	e13a      	b.n	8007a74 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007806:	2b20      	cmp	r3, #32
 8007808:	d10a      	bne.n	8007820 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	e12a      	b.n	8007a76 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d03e      	beq.n	80078a6 <USBD_StdEPReq+0xe2>
 8007828:	2b03      	cmp	r3, #3
 800782a:	d002      	beq.n	8007832 <USBD_StdEPReq+0x6e>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d070      	beq.n	8007912 <USBD_StdEPReq+0x14e>
 8007830:	e115      	b.n	8007a5e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0x7e>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d015      	beq.n	800786c <USBD_StdEPReq+0xa8>
 8007840:	e02b      	b.n	800789a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <USBD_StdEPReq+0x9e>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d009      	beq.n	8007862 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f001 fb34 	bl	8008ec0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fb30 	bl	8008ec0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007860:	e020      	b.n	80078a4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc46 	bl	80080f6 <USBD_CtlError>
              break;
 800786a:	e01b      	b.n	80078a4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10e      	bne.n	8007892 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <USBD_StdEPReq+0xce>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d008      	beq.n	8007892 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	88db      	ldrh	r3, [r3, #6]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fb17 	bl	8008ec0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcf8 	bl	8008288 <USBD_CtlSendStatus>

              break;
 8007898:	e004      	b.n	80078a4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc2a 	bl	80080f6 <USBD_CtlError>
              break;
 80078a2:	bf00      	nop
          }
          break;
 80078a4:	e0e0      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d002      	beq.n	80078b6 <USBD_StdEPReq+0xf2>
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d015      	beq.n	80078e0 <USBD_StdEPReq+0x11c>
 80078b4:	e026      	b.n	8007904 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <USBD_StdEPReq+0x112>
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b80      	cmp	r3, #128	; 0x80
 80078c0:	d009      	beq.n	80078d6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 fafa 	bl	8008ec0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078cc:	2180      	movs	r1, #128	; 0x80
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 faf6 	bl	8008ec0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d4:	e01c      	b.n	8007910 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fc0c 	bl	80080f6 <USBD_CtlError>
              break;
 80078de:	e017      	b.n	8007910 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	885b      	ldrh	r3, [r3, #2]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d112      	bne.n	800790e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fb18 	bl	8008f2c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fcc3 	bl	8008288 <USBD_CtlSendStatus>
              }
              break;
 8007902:	e004      	b.n	800790e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fbf5 	bl	80080f6 <USBD_CtlError>
              break;
 800790c:	e000      	b.n	8007910 <USBD_StdEPReq+0x14c>
              break;
 800790e:	bf00      	nop
          }
          break;
 8007910:	e0aa      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d002      	beq.n	8007922 <USBD_StdEPReq+0x15e>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d032      	beq.n	8007986 <USBD_StdEPReq+0x1c2>
 8007920:	e097      	b.n	8007a52 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <USBD_StdEPReq+0x174>
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d004      	beq.n	8007938 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbe0 	bl	80080f6 <USBD_CtlError>
                break;
 8007936:	e091      	b.n	8007a5c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	da0b      	bge.n	8007958 <USBD_StdEPReq+0x194>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	3310      	adds	r3, #16
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	3304      	adds	r3, #4
 8007956:	e00b      	b.n	8007970 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	3304      	adds	r3, #4
 8007970:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fc24 	bl	80081cc <USBD_CtlSendData>
              break;
 8007984:	e06a      	b.n	8007a5c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da11      	bge.n	80079b2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	3318      	adds	r3, #24
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d117      	bne.n	80079d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fba3 	bl	80080f6 <USBD_CtlError>
                  break;
 80079b0:	e054      	b.n	8007a5c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fb90 	bl	80080f6 <USBD_CtlError>
                  break;
 80079d6:	e041      	b.n	8007a5c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da0b      	bge.n	80079f8 <USBD_StdEPReq+0x234>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3310      	adds	r3, #16
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	3304      	adds	r3, #4
 80079f6:	e00b      	b.n	8007a10 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0x25a>
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d103      	bne.n	8007a26 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e00e      	b.n	8007a44 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fab4 	bl	8008f98 <USBD_LL_IsStallEP>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e002      	b.n	8007a44 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2202      	movs	r2, #2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fbbe 	bl	80081cc <USBD_CtlSendData>
              break;
 8007a50:	e004      	b.n	8007a5c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb4e 	bl	80080f6 <USBD_CtlError>
              break;
 8007a5a:	bf00      	nop
          }
          break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb48 	bl	80080f6 <USBD_CtlError>
          break;
 8007a66:	bf00      	nop
      }
      break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb42 	bl	80080f6 <USBD_CtlError>
      break;
 8007a72:	bf00      	nop
  }

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	2b0e      	cmp	r3, #14
 8007aa2:	f200 8152 	bhi.w	8007d4a <USBD_GetDescriptor+0x2ca>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <USBD_GetDescriptor+0x2c>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007b1d 	.word	0x08007b1d
 8007ab0:	08007b35 	.word	0x08007b35
 8007ab4:	08007b75 	.word	0x08007b75
 8007ab8:	08007d4b 	.word	0x08007d4b
 8007abc:	08007d4b 	.word	0x08007d4b
 8007ac0:	08007ceb 	.word	0x08007ceb
 8007ac4:	08007d17 	.word	0x08007d17
 8007ac8:	08007d4b 	.word	0x08007d4b
 8007acc:	08007d4b 	.word	0x08007d4b
 8007ad0:	08007d4b 	.word	0x08007d4b
 8007ad4:	08007d4b 	.word	0x08007d4b
 8007ad8:	08007d4b 	.word	0x08007d4b
 8007adc:	08007d4b 	.word	0x08007d4b
 8007ae0:	08007d4b 	.word	0x08007d4b
 8007ae4:	08007ae9 	.word	0x08007ae9
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	7c12      	ldrb	r2, [r2, #16]
 8007b00:	f107 0108 	add.w	r1, r7, #8
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
 8007b08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b0a:	e126      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 faf1 	bl	80080f6 <USBD_CtlError>
        err++;
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	3301      	adds	r3, #1
 8007b18:	72fb      	strb	r3, [r7, #11]
      break;
 8007b1a:	e11e      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
      break;
 8007b32:	e112      	b.n	8007d5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7c1b      	ldrb	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10d      	bne.n	8007b58 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	f107 0208 	add.w	r2, r7, #8
 8007b48:	4610      	mov	r0, r2
 8007b4a:	4798      	blx	r3
 8007b4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	2202      	movs	r2, #2
 8007b54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b56:	e100      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	2202      	movs	r2, #2
 8007b70:	701a      	strb	r2, [r3, #0]
      break;
 8007b72:	e0f2      	b.n	8007d5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	885b      	ldrh	r3, [r3, #2]
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b05      	cmp	r3, #5
 8007b7c:	f200 80ac 	bhi.w	8007cd8 <USBD_GetDescriptor+0x258>
 8007b80:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBD_GetDescriptor+0x108>)
 8007b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b86:	bf00      	nop
 8007b88:	08007ba1 	.word	0x08007ba1
 8007b8c:	08007bd5 	.word	0x08007bd5
 8007b90:	08007c09 	.word	0x08007c09
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c71 	.word	0x08007c71
 8007b9c:	08007ca5 	.word	0x08007ca5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	7c12      	ldrb	r2, [r2, #16]
 8007bb8:	f107 0108 	add.w	r1, r7, #8
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4798      	blx	r3
 8007bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bc2:	e091      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa95 	bl	80080f6 <USBD_CtlError>
            err++;
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bd2:	e089      	b.n	8007ce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	7c12      	ldrb	r2, [r2, #16]
 8007bec:	f107 0108 	add.w	r1, r7, #8
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bf6:	e077      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa7b 	bl	80080f6 <USBD_CtlError>
            err++;
 8007c00:	7afb      	ldrb	r3, [r7, #11]
 8007c02:	3301      	adds	r3, #1
 8007c04:	72fb      	strb	r3, [r7, #11]
          break;
 8007c06:	e06f      	b.n	8007ce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00b      	beq.n	8007c2c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	7c12      	ldrb	r2, [r2, #16]
 8007c20:	f107 0108 	add.w	r1, r7, #8
 8007c24:	4610      	mov	r0, r2
 8007c26:	4798      	blx	r3
 8007c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c2a:	e05d      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa61 	bl	80080f6 <USBD_CtlError>
            err++;
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	3301      	adds	r3, #1
 8007c38:	72fb      	strb	r3, [r7, #11]
          break;
 8007c3a:	e055      	b.n	8007ce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7c12      	ldrb	r2, [r2, #16]
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c5e:	e043      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa47 	bl	80080f6 <USBD_CtlError>
            err++;
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c6e:	e03b      	b.n	8007ce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	7c12      	ldrb	r2, [r2, #16]
 8007c88:	f107 0108 	add.w	r1, r7, #8
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c92:	e029      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa2d 	bl	80080f6 <USBD_CtlError>
            err++;
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca2:	e021      	b.n	8007ce8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	7c12      	ldrb	r2, [r2, #16]
 8007cbc:	f107 0108 	add.w	r1, r7, #8
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
 8007cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cc6:	e00f      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa13 	bl	80080f6 <USBD_CtlError>
            err++;
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cd6:	e007      	b.n	8007ce8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa0b 	bl	80080f6 <USBD_CtlError>
          err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ce6:	e038      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
 8007ce8:	e037      	b.n	8007d5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7c1b      	ldrb	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	f107 0208 	add.w	r2, r7, #8
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4798      	blx	r3
 8007d02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d04:	e029      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f9f4 	bl	80080f6 <USBD_CtlError>
        err++;
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	3301      	adds	r3, #1
 8007d12:	72fb      	strb	r3, [r7, #11]
      break;
 8007d14:	e021      	b.n	8007d5a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7c1b      	ldrb	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	f107 0208 	add.w	r2, r7, #8
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
 8007d2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	2207      	movs	r2, #7
 8007d36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d38:	e00f      	b.n	8007d5a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d3a:	6839      	ldr	r1, [r7, #0]
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f9da 	bl	80080f6 <USBD_CtlError>
        err++;
 8007d42:	7afb      	ldrb	r3, [r7, #11]
 8007d44:	3301      	adds	r3, #1
 8007d46:	72fb      	strb	r3, [r7, #11]
      break;
 8007d48:	e007      	b.n	8007d5a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f9d2 	bl	80080f6 <USBD_CtlError>
      err++;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	3301      	adds	r3, #1
 8007d56:	72fb      	strb	r3, [r7, #11]
      break;
 8007d58:	bf00      	nop
  }

  if (err != 0U)
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d11c      	bne.n	8007d9a <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d60:	893b      	ldrh	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d011      	beq.n	8007d8a <USBD_GetDescriptor+0x30a>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	88db      	ldrh	r3, [r3, #6]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00d      	beq.n	8007d8a <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	88da      	ldrh	r2, [r3, #6]
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	bf28      	it	cs
 8007d78:	4613      	movcs	r3, r2
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	461a      	mov	r2, r3
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa21 	bl	80081cc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fa78 	bl	8008288 <USBD_CtlSendStatus>
 8007d98:	e000      	b.n	8007d9c <USBD_GetDescriptor+0x31c>
    return;
 8007d9a:	bf00      	nop
    }
  }
}
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop

08007da4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	889b      	ldrh	r3, [r3, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d130      	bne.n	8007e18 <USBD_SetAddress+0x74>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	88db      	ldrh	r3, [r3, #6]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d12c      	bne.n	8007e18 <USBD_SetAddress+0x74>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc4:	d828      	bhi.n	8007e18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d104      	bne.n	8007de6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f989 	bl	80080f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de4:	e01c      	b.n	8007e20 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7bfa      	ldrb	r2, [r7, #15]
 8007dea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 f8fc 	bl	8008ff0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fa45 	bl	8008288 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d004      	beq.n	8007e0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0c:	e008      	b.n	8007e20 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e16:	e003      	b.n	8007e20 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f96b 	bl	80080f6 <USBD_CtlError>
  }
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	885b      	ldrh	r3, [r3, #2]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	4b41      	ldr	r3, [pc, #260]	; (8007f40 <USBD_SetConfig+0x118>)
 8007e3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e3c:	4b40      	ldr	r3, [pc, #256]	; (8007f40 <USBD_SetConfig+0x118>)
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d904      	bls.n	8007e4e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f955 	bl	80080f6 <USBD_CtlError>
 8007e4c:	e075      	b.n	8007f3a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d002      	beq.n	8007e5e <USBD_SetConfig+0x36>
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d023      	beq.n	8007ea4 <USBD_SetConfig+0x7c>
 8007e5c:	e062      	b.n	8007f24 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e5e:	4b38      	ldr	r3, [pc, #224]	; (8007f40 <USBD_SetConfig+0x118>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01a      	beq.n	8007e9c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e66:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <USBD_SetConfig+0x118>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e78:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <USBD_SetConfig+0x118>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff f98a 	bl	8007198 <USBD_SetClassConfig>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d104      	bne.n	8007e94 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f932 	bl	80080f6 <USBD_CtlError>
            return;
 8007e92:	e052      	b.n	8007f3a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9f7 	bl	8008288 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e9a:	e04e      	b.n	8007f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f9f3 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007ea2:	e04a      	b.n	8007f3a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ea4:	4b26      	ldr	r3, [pc, #152]	; (8007f40 <USBD_SetConfig+0x118>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d112      	bne.n	8007ed2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007eb4:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <USBD_SetConfig+0x118>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ebe:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <USBD_SetConfig+0x118>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff f986 	bl	80071d6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9dc 	bl	8008288 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ed0:	e033      	b.n	8007f3a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <USBD_SetConfig+0x118>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d01d      	beq.n	8007f1c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff f974 	bl	80071d6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <USBD_SetConfig+0x118>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ef8:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <USBD_SetConfig+0x118>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff f94a 	bl	8007198 <USBD_SetClassConfig>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d104      	bne.n	8007f14 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f8f2 	bl	80080f6 <USBD_CtlError>
            return;
 8007f12:	e012      	b.n	8007f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f9b7 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007f1a:	e00e      	b.n	8007f3a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f9b3 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007f22:	e00a      	b.n	8007f3a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8e5 	bl	80080f6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f2c:	4b04      	ldr	r3, [pc, #16]	; (8007f40 <USBD_SetConfig+0x118>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff f94f 	bl	80071d6 <USBD_ClrClassConfig>
        break;
 8007f38:	bf00      	nop
    }
  }
}
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200001b0 	.word	0x200001b0

08007f44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	88db      	ldrh	r3, [r3, #6]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d004      	beq.n	8007f60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f8cc 	bl	80080f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f5e:	e021      	b.n	8007fa4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	db17      	blt.n	8007f9a <USBD_GetConfig+0x56>
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	dd02      	ble.n	8007f74 <USBD_GetConfig+0x30>
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d00b      	beq.n	8007f8a <USBD_GetConfig+0x46>
 8007f72:	e012      	b.n	8007f9a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	2201      	movs	r2, #1
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f922 	bl	80081cc <USBD_CtlSendData>
        break;
 8007f88:	e00c      	b.n	8007fa4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f91a 	bl	80081cc <USBD_CtlSendData>
        break;
 8007f98:	e004      	b.n	8007fa4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f8aa 	bl	80080f6 <USBD_CtlError>
        break;
 8007fa2:	bf00      	nop
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d81e      	bhi.n	8008000 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d004      	beq.n	8007fd4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f892 	bl	80080f6 <USBD_CtlError>
        break;
 8007fd2:	e01a      	b.n	800800a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f043 0202 	orr.w	r2, r3, #2
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f8e7 	bl	80081cc <USBD_CtlSendData>
      break;
 8007ffe:	e004      	b.n	800800a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f877 	bl	80080f6 <USBD_CtlError>
      break;
 8008008:	bf00      	nop
  }
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	885b      	ldrh	r3, [r3, #2]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d106      	bne.n	8008032 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f92b 	bl	8008288 <USBD_CtlSendStatus>
  }
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804a:	3b01      	subs	r3, #1
 800804c:	2b02      	cmp	r3, #2
 800804e:	d80b      	bhi.n	8008068 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10c      	bne.n	8008072 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f911 	bl	8008288 <USBD_CtlSendStatus>
      }
      break;
 8008066:	e004      	b.n	8008072 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f843 	bl	80080f6 <USBD_CtlError>
      break;
 8008070:	e000      	b.n	8008074 <USBD_ClrFeature+0x3a>
      break;
 8008072:	bf00      	nop
  }
}
 8008074:	bf00      	nop
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	785a      	ldrb	r2, [r3, #1]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	3302      	adds	r3, #2
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b29a      	uxth	r2, r3
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	3303      	adds	r3, #3
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	b29a      	uxth	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	3304      	adds	r3, #4
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	3305      	adds	r3, #5
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	3306      	adds	r3, #6
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	3307      	adds	r3, #7
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	80da      	strh	r2, [r3, #6]

}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008100:	2180      	movs	r1, #128	; 0x80
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fedc 	bl	8008ec0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fed8 	bl	8008ec0 <USBD_LL_StallEP>
}
 8008110:	bf00      	nop
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008124:	2300      	movs	r3, #0
 8008126:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d032      	beq.n	8008194 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f834 	bl	800819c <USBD_GetLen>
 8008134:	4603      	mov	r3, r0
 8008136:	3301      	adds	r3, #1
 8008138:	b29b      	uxth	r3, r3
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	75fa      	strb	r2, [r7, #23]
 8008148:	461a      	mov	r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	7812      	ldrb	r2, [r2, #0]
 8008152:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	75fa      	strb	r2, [r7, #23]
 800815a:	461a      	mov	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	4413      	add	r3, r2
 8008160:	2203      	movs	r2, #3
 8008162:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008164:	e012      	b.n	800818c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1c5a      	adds	r2, r3, #1
 800816a:	60fa      	str	r2, [r7, #12]
 800816c:	7dfa      	ldrb	r2, [r7, #23]
 800816e:	1c51      	adds	r1, r2, #1
 8008170:	75f9      	strb	r1, [r7, #23]
 8008172:	4611      	mov	r1, r2
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	440a      	add	r2, r1
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	75fa      	strb	r2, [r7, #23]
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4413      	add	r3, r2
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e8      	bne.n	8008166 <USBD_GetString+0x4e>
    }
  }
}
 8008194:	bf00      	nop
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081a8:	e005      	b.n	80081b6 <USBD_GetLen+0x1a>
  {
    len++;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	3301      	adds	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3301      	adds	r3, #1
 80081b4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f5      	bne.n	80081aa <USBD_GetLen+0xe>
  }

  return len;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2202      	movs	r2, #2
 80081de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ee:	88fb      	ldrh	r3, [r7, #6]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	2100      	movs	r1, #0
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 ff31 	bl	800905c <USBD_LL_Transmit>

  return USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	4613      	mov	r3, r2
 8008210:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008212:	88fb      	ldrh	r3, [r7, #6]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	2100      	movs	r1, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f000 ff1f 	bl	800905c <USBD_LL_Transmit>

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2203      	movs	r2, #3
 800823a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 ff3b 	bl	80090d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 ff29 	bl	80090d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2204      	movs	r2, #4
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008298:	2300      	movs	r3, #0
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fedc 	bl	800905c <USBD_LL_Transmit>

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2205      	movs	r2, #5
 80082ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 ff03 	bl	80090d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082d8:	2200      	movs	r2, #0
 80082da:	4912      	ldr	r1, [pc, #72]	; (8008324 <MX_USB_DEVICE_Init+0x50>)
 80082dc:	4812      	ldr	r0, [pc, #72]	; (8008328 <MX_USB_DEVICE_Init+0x54>)
 80082de:	f7fe feff 	bl	80070e0 <USBD_Init>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082e8:	f7f8 f9a8 	bl	800063c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082ec:	490f      	ldr	r1, [pc, #60]	; (800832c <MX_USB_DEVICE_Init+0x58>)
 80082ee:	480e      	ldr	r0, [pc, #56]	; (8008328 <MX_USB_DEVICE_Init+0x54>)
 80082f0:	f7fe ff21 	bl	8007136 <USBD_RegisterClass>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082fa:	f7f8 f99f 	bl	800063c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082fe:	490c      	ldr	r1, [pc, #48]	; (8008330 <MX_USB_DEVICE_Init+0x5c>)
 8008300:	4809      	ldr	r0, [pc, #36]	; (8008328 <MX_USB_DEVICE_Init+0x54>)
 8008302:	f7fe fe4f 	bl	8006fa4 <USBD_CDC_RegisterInterface>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800830c:	f7f8 f996 	bl	800063c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008310:	4805      	ldr	r0, [pc, #20]	; (8008328 <MX_USB_DEVICE_Init+0x54>)
 8008312:	f7fe ff2a 	bl	800716a <USBD_Start>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800831c:	f7f8 f98e 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000134 	.word	0x20000134
 8008328:	200004a8 	.word	0x200004a8
 800832c:	20000018 	.word	0x20000018
 8008330:	20000124 	.word	0x20000124

08008334 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /*##-1- Configure the UART peripheral ######################################*/
  	  /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	  huart2.Instance = USART2;
 8008338:	4b26      	ldr	r3, [pc, #152]	; (80083d4 <CDC_Init_FS+0xa0>)
 800833a:	4a27      	ldr	r2, [pc, #156]	; (80083d8 <CDC_Init_FS+0xa4>)
 800833c:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 800833e:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008344:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008346:	4b23      	ldr	r3, [pc, #140]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008348:	2200      	movs	r2, #0
 800834a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 800834c:	4b21      	ldr	r3, [pc, #132]	; (80083d4 <CDC_Init_FS+0xa0>)
 800834e:	2200      	movs	r2, #0
 8008350:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8008352:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008354:	2200      	movs	r2, #0
 8008356:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8008358:	4b1e      	ldr	r3, [pc, #120]	; (80083d4 <CDC_Init_FS+0xa0>)
 800835a:	220c      	movs	r2, #12
 800835c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008360:	2200      	movs	r2, #0
 8008362:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008364:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008366:	2200      	movs	r2, #0
 8008368:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800836a:	4b1a      	ldr	r3, [pc, #104]	; (80083d4 <CDC_Init_FS+0xa0>)
 800836c:	2200      	movs	r2, #0
 800836e:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008370:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008372:	2200      	movs	r2, #0
 8008374:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008376:	4817      	ldr	r0, [pc, #92]	; (80083d4 <CDC_Init_FS+0xa0>)
 8008378:	f7fc f862 	bl	8004440 <HAL_UART_Init>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <CDC_Init_FS+0x52>
	  {
	    Error_Handler();
 8008382:	f7f8 f95b 	bl	800063c <Error_Handler>
	  }

  	  /*##-2- Put UART peripheral in IT reception process ########################*/
  	  /* Any data received will be stored in "UserTxBuffer" buffer  */
  	  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8008386:	2201      	movs	r2, #1
 8008388:	4914      	ldr	r1, [pc, #80]	; (80083dc <CDC_Init_FS+0xa8>)
 800838a:	4812      	ldr	r0, [pc, #72]	; (80083d4 <CDC_Init_FS+0xa0>)
 800838c:	f7fc f8dc 	bl	8004548 <HAL_UART_Receive_IT>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <CDC_Init_FS+0x66>
  	  {
  	    /* Transfer error in reception process */
  	    Error_Handler();
 8008396:	f7f8 f951 	bl	800063c <Error_Handler>
  	  }

  	  /*##-3- Configure the TIM Base generation  #################################*/
  	  TIM_Config();
 800839a:	f000 f9ed 	bl	8008778 <TIM_Config>

  	  /*##-4- Start the TIM Base generation in interrupt mode ####################*/
  	  /* Start Channel1 */
  	  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 800839e:	4810      	ldr	r0, [pc, #64]	; (80083e0 <CDC_Init_FS+0xac>)
 80083a0:	f7fb fe24 	bl	8003fec <HAL_TIM_Base_Start_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <CDC_Init_FS+0x7a>
  	  {
  	    /* Starting Error */
  	    Error_Handler();
 80083aa:	f7f8 f947 	bl	800063c <Error_Handler>
  	  }

  	  __HAL_DBGMCU_FREEZE_TIM3();
 80083ae:	4b0d      	ldr	r3, [pc, #52]	; (80083e4 <CDC_Init_FS+0xb0>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4a0c      	ldr	r2, [pc, #48]	; (80083e4 <CDC_Init_FS+0xb0>)
 80083b4:	f043 0302 	orr.w	r3, r3, #2
 80083b8:	6093      	str	r3, [r2, #8]

  	  /*##-5- Set Application Buffers ############################################*/
  	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083ba:	2200      	movs	r2, #0
 80083bc:	4907      	ldr	r1, [pc, #28]	; (80083dc <CDC_Init_FS+0xa8>)
 80083be:	480a      	ldr	r0, [pc, #40]	; (80083e8 <CDC_Init_FS+0xb4>)
 80083c0:	f7fe fe07 	bl	8006fd2 <USBD_CDC_SetTxBuffer>
  	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083c4:	4909      	ldr	r1, [pc, #36]	; (80083ec <CDC_Init_FS+0xb8>)
 80083c6:	4808      	ldr	r0, [pc, #32]	; (80083e8 <CDC_Init_FS+0xb4>)
 80083c8:	f7fe fe1d 	bl	8007006 <USBD_CDC_SetRxBuffer>

  	  return (USBD_OK);
 80083cc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000424 	.word	0x20000424
 80083d8:	40004400 	.word	0x40004400
 80083dc:	20000f70 	.word	0x20000f70
 80083e0:	20001770 	.word	0x20001770
 80083e4:	e0042000 	.word	0xe0042000
 80083e8:	200004a8 	.word	0x200004a8
 80083ec:	20000770 	.word	0x20000770

080083f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

	    /* DeInitialize the UART peripheral */
	    if(HAL_UART_DeInit(&huart2) != HAL_OK)
 80083f4:	4805      	ldr	r0, [pc, #20]	; (800840c <CDC_DeInit_FS+0x1c>)
 80083f6:	f7fc f871 	bl	80044dc <HAL_UART_DeInit>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <CDC_DeInit_FS+0x14>
	    {
	      /* Initialization Error */
	      Error_Handler();
 8008400:	f7f8 f91c 	bl	800063c <Error_Handler>
	    }
	    return (USBD_OK);
 8008404:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008406:	4618      	mov	r0, r3
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000424 	.word	0x20000424

08008410 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	6039      	str	r1, [r7, #0]
 800841a:	71fb      	strb	r3, [r7, #7]
 800841c:	4613      	mov	r3, r2
 800841e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b23      	cmp	r3, #35	; 0x23
 8008424:	f200 809a 	bhi.w	800855c <CDC_Control_FS+0x14c>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <CDC_Control_FS+0x20>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	0800855d 	.word	0x0800855d
 8008434:	0800855d 	.word	0x0800855d
 8008438:	0800855d 	.word	0x0800855d
 800843c:	0800855d 	.word	0x0800855d
 8008440:	0800855d 	.word	0x0800855d
 8008444:	0800855d 	.word	0x0800855d
 8008448:	0800855d 	.word	0x0800855d
 800844c:	0800855d 	.word	0x0800855d
 8008450:	0800855d 	.word	0x0800855d
 8008454:	0800855d 	.word	0x0800855d
 8008458:	0800855d 	.word	0x0800855d
 800845c:	0800855d 	.word	0x0800855d
 8008460:	0800855d 	.word	0x0800855d
 8008464:	0800855d 	.word	0x0800855d
 8008468:	0800855d 	.word	0x0800855d
 800846c:	0800855d 	.word	0x0800855d
 8008470:	0800855d 	.word	0x0800855d
 8008474:	0800855d 	.word	0x0800855d
 8008478:	0800855d 	.word	0x0800855d
 800847c:	0800855d 	.word	0x0800855d
 8008480:	0800855d 	.word	0x0800855d
 8008484:	0800855d 	.word	0x0800855d
 8008488:	0800855d 	.word	0x0800855d
 800848c:	0800855d 	.word	0x0800855d
 8008490:	0800855d 	.word	0x0800855d
 8008494:	0800855d 	.word	0x0800855d
 8008498:	0800855d 	.word	0x0800855d
 800849c:	0800855d 	.word	0x0800855d
 80084a0:	0800855d 	.word	0x0800855d
 80084a4:	0800855d 	.word	0x0800855d
 80084a8:	0800855d 	.word	0x0800855d
 80084ac:	0800855d 	.word	0x0800855d
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	08008509 	.word	0x08008509
 80084b8:	0800855d 	.word	0x0800855d
 80084bc:	0800855d 	.word	0x0800855d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	3302      	adds	r3, #2
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	041b      	lsls	r3, r3, #16
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80084d8:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	3303      	adds	r3, #3
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	061b      	lsls	r3, r3, #24
 80084e2:	4313      	orrs	r3, r2
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80084e4:	461a      	mov	r2, r3
 80084e6:	4b20      	ldr	r3, [pc, #128]	; (8008568 <CDC_Control_FS+0x158>)
 80084e8:	601a      	str	r2, [r3, #0]
      LineCoding.format     = pbuf[4];
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	791a      	ldrb	r2, [r3, #4]
 80084ee:	4b1e      	ldr	r3, [pc, #120]	; (8008568 <CDC_Control_FS+0x158>)
 80084f0:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	795a      	ldrb	r2, [r3, #5]
 80084f6:	4b1c      	ldr	r3, [pc, #112]	; (8008568 <CDC_Control_FS+0x158>)
 80084f8:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	799a      	ldrb	r2, [r3, #6]
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <CDC_Control_FS+0x158>)
 8008500:	719a      	strb	r2, [r3, #6]

      /* Set the new configuration */
      ComPort_Config();
 8008502:	f000 f8bf 	bl	8008684 <ComPort_Config>
      break;
 8008506:	e02a      	b.n	800855e <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <CDC_Control_FS+0x158>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	b2da      	uxtb	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008512:	4b15      	ldr	r3, [pc, #84]	; (8008568 <CDC_Control_FS+0x158>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	0a1a      	lsrs	r2, r3, #8
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <CDC_Control_FS+0x158>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	0c1a      	lsrs	r2, r3, #16
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	3302      	adds	r3, #2
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800852e:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <CDC_Control_FS+0x158>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	0e1a      	lsrs	r2, r3, #24
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	3303      	adds	r3, #3
 8008538:	b2d2      	uxtb	r2, r2
 800853a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	3304      	adds	r3, #4
 8008540:	4a09      	ldr	r2, [pc, #36]	; (8008568 <CDC_Control_FS+0x158>)
 8008542:	7912      	ldrb	r2, [r2, #4]
 8008544:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	3305      	adds	r3, #5
 800854a:	4a07      	ldr	r2, [pc, #28]	; (8008568 <CDC_Control_FS+0x158>)
 800854c:	7952      	ldrb	r2, [r2, #5]
 800854e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	3306      	adds	r3, #6
 8008554:	4a04      	ldr	r2, [pc, #16]	; (8008568 <CDC_Control_FS+0x158>)
 8008556:	7992      	ldrb	r2, [r2, #6]
 8008558:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800855a:	e000      	b.n	800855e <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800855c:	bf00      	nop
  }

  return (USBD_OK);
 800855e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	2000011c 	.word	0x2000011c

0800856c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 HAL_UART_Transmit_DMA(&huart2, Buf, *Len);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	461a      	mov	r2, r3
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4803      	ldr	r0, [pc, #12]	; (8008590 <CDC_Receive_FS+0x24>)
 8008582:	f7fc f883 	bl	800468c <HAL_UART_Transmit_DMA>
	  return (USBD_OK);
 8008586:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000424 	.word	0x20000424

08008594 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 800859c:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d031      	beq.n	800860c <HAL_TIM_PeriodElapsedCallback+0x78>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* rollback */
 80085a8:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d905      	bls.n	80085c0 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80085b4:	4b17      	ldr	r3, [pc, #92]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e005      	b.n	80085cc <HAL_TIM_PeriodElapsedCallback+0x38>
    }
    else
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b13      	ldr	r3, [pc, #76]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4a11      	ldr	r2, [pc, #68]	; (800861c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80085d6:	4413      	add	r3, r2
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	b292      	uxth	r2, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	4810      	ldr	r0, [pc, #64]	; (8008620 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80085e0:	f7fe fcf7 	bl	8006fd2 <USBD_CDC_SetTxBuffer>

    if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 80085e4:	480e      	ldr	r0, [pc, #56]	; (8008620 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80085e6:	f7fe fd22 	bl	800702e <USBD_CDC_TransmitPacket>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10d      	bne.n	800860c <HAL_TIM_PeriodElapsedCallback+0x78>
    {
      UserTxBufPtrOut += buffsize;
 80085f0:	4b08      	ldr	r3, [pc, #32]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085fa:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 80085fc:	4b05      	ldr	r3, [pc, #20]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008604:	d102      	bne.n	800860c <HAL_TIM_PeriodElapsedCallback+0x78>
      {
        UserTxBufPtrOut = 0;
 8008606:	4b03      	ldr	r3, [pc, #12]	; (8008614 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 800860c:	bf00      	nop
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200001b8 	.word	0x200001b8
 8008618:	200001b4 	.word	0x200001b4
 800861c:	20000f70 	.word	0x20000f70
 8008620:	200004a8 	.word	0x200004a8

08008624 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 800862c:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <HAL_UART_RxCpltCallback+0x3c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <HAL_UART_RxCpltCallback+0x3c>)
 8008634:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_UART_RxCpltCallback+0x3c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863e:	d102      	bne.n	8008646 <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <HAL_UART_RxCpltCallback+0x3c>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <HAL_UART_RxCpltCallback+0x3c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a06      	ldr	r2, [pc, #24]	; (8008664 <HAL_UART_RxCpltCallback+0x40>)
 800864c:	4413      	add	r3, r2
 800864e:	2201      	movs	r2, #1
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f7fb ff78 	bl	8004548 <HAL_UART_Receive_IT>
  //Toggle_Leds();
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	200001b4 	.word	0x200001b4
 8008664:	20000f70 	.word	0x20000f70

08008668 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008670:	4803      	ldr	r0, [pc, #12]	; (8008680 <HAL_UART_TxCpltCallback+0x18>)
 8008672:	f7fe fd0b 	bl	800708c <USBD_CDC_ReceivePacket>
  //Toggle_Leds();
}
 8008676:	bf00      	nop
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	200004a8 	.word	0x200004a8

08008684 <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart2) != HAL_OK)
 8008688:	4837      	ldr	r0, [pc, #220]	; (8008768 <ComPort_Config+0xe4>)
 800868a:	f7fb ff27 	bl	80044dc <HAL_UART_DeInit>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 8008694:	f7f7 ffd2 	bl	800063c <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8008698:	4b34      	ldr	r3, [pc, #208]	; (800876c <ComPort_Config+0xe8>)
 800869a:	791b      	ldrb	r3, [r3, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <ComPort_Config+0x22>
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d004      	beq.n	80086ae <ComPort_Config+0x2a>
 80086a4:	e008      	b.n	80086b8 <ComPort_Config+0x34>
  {
  case 0:
    huart2.Init.StopBits = UART_STOPBITS_1;
 80086a6:	4b30      	ldr	r3, [pc, #192]	; (8008768 <ComPort_Config+0xe4>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	60da      	str	r2, [r3, #12]
    break;
 80086ac:	e008      	b.n	80086c0 <ComPort_Config+0x3c>
  case 2:
    huart2.Init.StopBits = UART_STOPBITS_2;
 80086ae:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <ComPort_Config+0xe4>)
 80086b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086b4:	60da      	str	r2, [r3, #12]
    break;
 80086b6:	e003      	b.n	80086c0 <ComPort_Config+0x3c>
  default :
    huart2.Init.StopBits = UART_STOPBITS_1;
 80086b8:	4b2b      	ldr	r3, [pc, #172]	; (8008768 <ComPort_Config+0xe4>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	60da      	str	r2, [r3, #12]
    break;
 80086be:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 80086c0:	4b2a      	ldr	r3, [pc, #168]	; (800876c <ComPort_Config+0xe8>)
 80086c2:	795b      	ldrb	r3, [r3, #5]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d007      	beq.n	80086d8 <ComPort_Config+0x54>
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d00a      	beq.n	80086e2 <ComPort_Config+0x5e>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10d      	bne.n	80086ec <ComPort_Config+0x68>
  {
  case 0:
    huart2.Init.Parity = UART_PARITY_NONE;
 80086d0:	4b25      	ldr	r3, [pc, #148]	; (8008768 <ComPort_Config+0xe4>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	611a      	str	r2, [r3, #16]
    break;
 80086d6:	e00d      	b.n	80086f4 <ComPort_Config+0x70>
  case 1:
    huart2.Init.Parity = UART_PARITY_ODD;
 80086d8:	4b23      	ldr	r3, [pc, #140]	; (8008768 <ComPort_Config+0xe4>)
 80086da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80086de:	611a      	str	r2, [r3, #16]
    break;
 80086e0:	e008      	b.n	80086f4 <ComPort_Config+0x70>
  case 2:
    huart2.Init.Parity = UART_PARITY_EVEN;
 80086e2:	4b21      	ldr	r3, [pc, #132]	; (8008768 <ComPort_Config+0xe4>)
 80086e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e8:	611a      	str	r2, [r3, #16]
    break;
 80086ea:	e003      	b.n	80086f4 <ComPort_Config+0x70>
  default :
    huart2.Init.Parity = UART_PARITY_NONE;
 80086ec:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <ComPort_Config+0xe4>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	611a      	str	r2, [r3, #16]
    break;
 80086f2:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 80086f4:	4b1d      	ldr	r3, [pc, #116]	; (800876c <ComPort_Config+0xe8>)
 80086f6:	799b      	ldrb	r3, [r3, #6]
 80086f8:	2b07      	cmp	r3, #7
 80086fa:	d002      	beq.n	8008702 <ComPort_Config+0x7e>
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d004      	beq.n	800870a <ComPort_Config+0x86>
 8008700:	e010      	b.n	8008724 <ComPort_Config+0xa0>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008702:	4b19      	ldr	r3, [pc, #100]	; (8008768 <ComPort_Config+0xe4>)
 8008704:	2200      	movs	r2, #0
 8008706:	609a      	str	r2, [r3, #8]
    break;
 8008708:	e010      	b.n	800872c <ComPort_Config+0xa8>
  case 0x08:
    if(huart2.Init.Parity == UART_PARITY_NONE)
 800870a:	4b17      	ldr	r3, [pc, #92]	; (8008768 <ComPort_Config+0xe4>)
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d103      	bne.n	800871a <ComPort_Config+0x96>
    {
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <ComPort_Config+0xe4>)
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
    else
    {
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008718:	e008      	b.n	800872c <ComPort_Config+0xa8>
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800871a:	4b13      	ldr	r3, [pc, #76]	; (8008768 <ComPort_Config+0xe4>)
 800871c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008720:	609a      	str	r2, [r3, #8]
    break;
 8008722:	e003      	b.n	800872c <ComPort_Config+0xa8>
  default :
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008724:	4b10      	ldr	r3, [pc, #64]	; (8008768 <ComPort_Config+0xe4>)
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
    break;
 800872a:	bf00      	nop
  }

  huart2.Init.BaudRate = LineCoding.bitrate;
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <ComPort_Config+0xe8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a0d      	ldr	r2, [pc, #52]	; (8008768 <ComPort_Config+0xe4>)
 8008732:	6053      	str	r3, [r2, #4]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <ComPort_Config+0xe4>)
 8008736:	2200      	movs	r2, #0
 8008738:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode       = UART_MODE_TX_RX;
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <ComPort_Config+0xe4>)
 800873c:	220c      	movs	r2, #12
 800873e:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart2) != HAL_OK)
 8008740:	4809      	ldr	r0, [pc, #36]	; (8008768 <ComPort_Config+0xe4>)
 8008742:	f7fb fe7d 	bl	8004440 <HAL_UART_Init>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <ComPort_Config+0xcc>
  {
    /* Initialization Error */
    Error_Handler();
 800874c:	f7f7 ff76 	bl	800063c <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <ComPort_Config+0xec>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a07      	ldr	r2, [pc, #28]	; (8008774 <ComPort_Config+0xf0>)
 8008756:	4413      	add	r3, r2
 8008758:	2201      	movs	r2, #1
 800875a:	4619      	mov	r1, r3
 800875c:	4802      	ldr	r0, [pc, #8]	; (8008768 <ComPort_Config+0xe4>)
 800875e:	f7fb fef3 	bl	8004548 <HAL_UART_Receive_IT>
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000424 	.word	0x20000424
 800876c:	2000011c 	.word	0x2000011c
 8008770:	200001b4 	.word	0x200001b4
 8008774:	20000f70 	.word	0x20000f70

08008778 <TIM_Config>:
  * @brief  TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void TIM_Config(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 800877c:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <TIM_Config+0x38>)
 800877e:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <TIM_Config+0x3c>)
 8008780:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8008782:	4b0b      	ldr	r3, [pc, #44]	; (80087b0 <TIM_Config+0x38>)
 8008784:	f241 3287 	movw	r2, #4999	; 0x1387
 8008788:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 84-1;
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <TIM_Config+0x38>)
 800878c:	2253      	movs	r2, #83	; 0x53
 800878e:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <TIM_Config+0x38>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008796:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <TIM_Config+0x38>)
 8008798:	2200      	movs	r2, #0
 800879a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 800879c:	4804      	ldr	r0, [pc, #16]	; (80087b0 <TIM_Config+0x38>)
 800879e:	f7fb fbef 	bl	8003f80 <HAL_TIM_Base_Init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <TIM_Config+0x34>
  {
    /* Initialization Error */
    Error_Handler();
 80087a8:	f7f7 ff48 	bl	800063c <Error_Handler>
  }
}
 80087ac:	bf00      	nop
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20001770 	.word	0x20001770
 80087b4:	40000400 	.word	0x40000400

080087b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  huart2: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Transfer error occured in reception and/or transmission process */
  Error_Handler();
 80087c0:	f7f7 ff3c 	bl	800063c <Error_Handler>
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2212      	movs	r2, #18
 80087dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087de:	4b03      	ldr	r3, [pc, #12]	; (80087ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000154 	.word	0x20000154

080087f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2204      	movs	r2, #4
 8008800:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008802:	4b03      	ldr	r3, [pc, #12]	; (8008810 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	20000174 	.word	0x20000174

08008814 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d105      	bne.n	8008832 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	4907      	ldr	r1, [pc, #28]	; (8008848 <USBD_FS_ProductStrDescriptor+0x34>)
 800882a:	4808      	ldr	r0, [pc, #32]	; (800884c <USBD_FS_ProductStrDescriptor+0x38>)
 800882c:	f7ff fc74 	bl	8008118 <USBD_GetString>
 8008830:	e004      	b.n	800883c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4904      	ldr	r1, [pc, #16]	; (8008848 <USBD_FS_ProductStrDescriptor+0x34>)
 8008836:	4805      	ldr	r0, [pc, #20]	; (800884c <USBD_FS_ProductStrDescriptor+0x38>)
 8008838:	f7ff fc6e 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	200017b0 	.word	0x200017b0
 800884c:	080092b4 	.word	0x080092b4

08008850 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	4904      	ldr	r1, [pc, #16]	; (8008870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008860:	4804      	ldr	r0, [pc, #16]	; (8008874 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008862:	f7ff fc59 	bl	8008118 <USBD_GetString>
  return USBD_StrDesc;
 8008866:	4b02      	ldr	r3, [pc, #8]	; (8008870 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	200017b0 	.word	0x200017b0
 8008874:	080092cc 	.word	0x080092cc

08008878 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	221a      	movs	r2, #26
 8008888:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800888a:	f000 f855 	bl	8008938 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800888e:	4b02      	ldr	r3, [pc, #8]	; (8008898 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000178 	.word	0x20000178

0800889c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	6039      	str	r1, [r7, #0]
 80088a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	4907      	ldr	r1, [pc, #28]	; (80088d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088b2:	4808      	ldr	r0, [pc, #32]	; (80088d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088b4:	f7ff fc30 	bl	8008118 <USBD_GetString>
 80088b8:	e004      	b.n	80088c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	4904      	ldr	r1, [pc, #16]	; (80088d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80088be:	4805      	ldr	r0, [pc, #20]	; (80088d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80088c0:	f7ff fc2a 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	200017b0 	.word	0x200017b0
 80088d4:	080092e0 	.word	0x080092e0

080088d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	6039      	str	r1, [r7, #0]
 80088e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d105      	bne.n	80088f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	4907      	ldr	r1, [pc, #28]	; (800890c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ee:	4808      	ldr	r0, [pc, #32]	; (8008910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088f0:	f7ff fc12 	bl	8008118 <USBD_GetString>
 80088f4:	e004      	b.n	8008900 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	4904      	ldr	r1, [pc, #16]	; (800890c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088fa:	4805      	ldr	r0, [pc, #20]	; (8008910 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088fc:	f7ff fc0c 	bl	8008118 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008900:	4b02      	ldr	r3, [pc, #8]	; (800890c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	200017b0 	.word	0x200017b0
 8008910:	080092ec 	.word	0x080092ec

08008914 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	220c      	movs	r2, #12
 8008924:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008926:	4b03      	ldr	r3, [pc, #12]	; (8008934 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	20000168 	.word	0x20000168

08008938 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800893e:	4b0f      	ldr	r3, [pc, #60]	; (800897c <Get_SerialNum+0x44>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008944:	4b0e      	ldr	r3, [pc, #56]	; (8008980 <Get_SerialNum+0x48>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <Get_SerialNum+0x4c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4413      	add	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800895e:	2208      	movs	r2, #8
 8008960:	4909      	ldr	r1, [pc, #36]	; (8008988 <Get_SerialNum+0x50>)
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 f814 	bl	8008990 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008968:	2204      	movs	r2, #4
 800896a:	4908      	ldr	r1, [pc, #32]	; (800898c <Get_SerialNum+0x54>)
 800896c:	68b8      	ldr	r0, [r7, #8]
 800896e:	f000 f80f 	bl	8008990 <IntToUnicode>
  }
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	1fff7590 	.word	0x1fff7590
 8008980:	1fff7594 	.word	0x1fff7594
 8008984:	1fff7598 	.word	0x1fff7598
 8008988:	2000017a 	.word	0x2000017a
 800898c:	2000018a 	.word	0x2000018a

08008990 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]
 80089a6:	e027      	b.n	80089f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	0f1b      	lsrs	r3, r3, #28
 80089ac:	2b09      	cmp	r3, #9
 80089ae:	d80b      	bhi.n	80089c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0f1b      	lsrs	r3, r3, #28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	4619      	mov	r1, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	440b      	add	r3, r1
 80089c0:	3230      	adds	r2, #48	; 0x30
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	e00a      	b.n	80089de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	0f1b      	lsrs	r3, r3, #28
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	4619      	mov	r1, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	440b      	add	r3, r1
 80089d8:	3237      	adds	r2, #55	; 0x37
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	3301      	adds	r3, #1
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
 80089f4:	3301      	adds	r3, #1
 80089f6:	75fb      	strb	r3, [r7, #23]
 80089f8:	7dfa      	ldrb	r2, [r7, #23]
 80089fa:	79fb      	ldrb	r3, [r7, #7]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d3d3      	bcc.n	80089a8 <IntToUnicode+0x18>
  }
}
 8008a00:	bf00      	nop
 8008a02:	371c      	adds	r7, #28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08a      	sub	sp, #40	; 0x28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	605a      	str	r2, [r3, #4]
 8008a1e:	609a      	str	r2, [r3, #8]
 8008a20:	60da      	str	r2, [r3, #12]
 8008a22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a2c:	d14e      	bne.n	8008acc <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a2e:	4b29      	ldr	r3, [pc, #164]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a32:	4a28      	ldr	r2, [pc, #160]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a3a:	4b26      	ldr	r3, [pc, #152]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	613b      	str	r3, [r7, #16]
 8008a44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008a46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a54:	2303      	movs	r3, #3
 8008a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a58:	230a      	movs	r3, #10
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a5c:	f107 0314 	add.w	r3, r7, #20
 8008a60:	4619      	mov	r1, r3
 8008a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a66:	f7f8 fc41 	bl	80012ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a6a:	4b1a      	ldr	r3, [pc, #104]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6e:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a76:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a7e:	60fb      	str	r3, [r7, #12]
 8008a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d114      	bne.n	8008ab8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a98:	6593      	str	r3, [r2, #88]	; 0x58
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa2:	60bb      	str	r3, [r7, #8]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008aa6:	f7f9 ffc1 	bl	8002a2c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <HAL_PCD_MspInit+0xc8>)
 8008ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab6:	e001      	b.n	8008abc <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008ab8:	f7f9 ffb8 	bl	8002a2c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008abc:	2200      	movs	r2, #0
 8008abe:	2100      	movs	r1, #0
 8008ac0:	2043      	movs	r0, #67	; 0x43
 8008ac2:	f7f8 f904 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ac6:	2043      	movs	r0, #67	; 0x43
 8008ac8:	f7f8 f91d 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008acc:	bf00      	nop
 8008ace:	3728      	adds	r7, #40	; 0x28
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40021000 	.word	0x40021000

08008ad8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe fb84 	bl	80071fc <USBD_LL_SetupStage>
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b0e:	78fa      	ldrb	r2, [r7, #3]
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	1a9b      	subs	r3, r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	78fb      	ldrb	r3, [r7, #3]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f7fe fbb4 	bl	8007292 <USBD_LL_DataOutStage>
}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008b44:	78fa      	ldrb	r2, [r7, #3]
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	1a9b      	subs	r3, r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3348      	adds	r3, #72	; 0x48
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7fe fc0b 	bl	8007374 <USBD_LL_DataInStage>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b082      	sub	sp, #8
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe fd1e 	bl	80075b6 <USBD_LL_SOF>
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d001      	beq.n	8008b9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b96:	f7f7 fd51 	bl	800063c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ba0:	7bfa      	ldrb	r2, [r7, #15]
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe fccb 	bl	8007540 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fe fc84 	bl	80074be <USBD_LL_Reset>
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fcba 	bl	8007560 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <HAL_PCD_SuspendCallback+0x48>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	4a03      	ldr	r2, [pc, #12]	; (8008c08 <HAL_PCD_SuspendCallback+0x48>)
 8008bfa:	f043 0306 	orr.w	r3, r3, #6
 8008bfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	e000ed00 	.word	0xe000ed00

08008c0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6812      	ldr	r2, [r2, #0]
 8008c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c26:	f023 0301 	bic.w	r3, r3, #1
 8008c2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a1b      	ldr	r3, [r3, #32]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c34:	4b08      	ldr	r3, [pc, #32]	; (8008c58 <HAL_PCD_ResumeCallback+0x4c>)
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	4a07      	ldr	r2, [pc, #28]	; (8008c58 <HAL_PCD_ResumeCallback+0x4c>)
 8008c3a:	f023 0306 	bic.w	r3, r3, #6
 8008c3e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008c40:	f000 fafa 	bl	8009238 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fc9d 	bl	800758a <USBD_LL_Resume>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	e000ed00 	.word	0xe000ed00

08008c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe fcc6 	bl	8007604 <USBD_LL_IsoOUTIncomplete>
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe fca7 	bl	80075ea <USBD_LL_IsoINIncomplete>
}
 8008c9c:	bf00      	nop
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe fcb3 	bl	800761e <USBD_LL_DevConnected>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fe fcb0 	bl	8007634 <USBD_LL_DevDisconnected>
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d13c      	bne.n	8008d66 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008cec:	4a20      	ldr	r2, [pc, #128]	; (8008d70 <USBD_LL_Init+0x94>)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1e      	ldr	r2, [pc, #120]	; (8008d70 <USBD_LL_Init+0x94>)
 8008cf8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <USBD_LL_Init+0x94>)
 8008cfe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d06:	2206      	movs	r2, #6
 8008d08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d0a:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d10:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d12:	2202      	movs	r2, #2
 8008d14:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d16:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d1c:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d22:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008d28:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d2e:	4b10      	ldr	r3, [pc, #64]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d34:	4b0e      	ldr	r3, [pc, #56]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d3a:	480d      	ldr	r0, [pc, #52]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d3c:	f7f8 fd72 	bl	8001824 <HAL_PCD_Init>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d46:	f7f7 fc79 	bl	800063c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d4a:	2180      	movs	r1, #128	; 0x80
 8008d4c:	4808      	ldr	r0, [pc, #32]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d4e:	f7f9 fdd4 	bl	80028fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d52:	2240      	movs	r2, #64	; 0x40
 8008d54:	2100      	movs	r1, #0
 8008d56:	4806      	ldr	r0, [pc, #24]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d58:	f7f9 fd88 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d5c:	2280      	movs	r2, #128	; 0x80
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4803      	ldr	r0, [pc, #12]	; (8008d70 <USBD_LL_Init+0x94>)
 8008d62:	f7f9 fd83 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200019b0 	.word	0x200019b0

08008d74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f8 fe6e 	bl	8001a6c <HAL_PCD_Start>
 8008d90:	4603      	mov	r3, r0
 8008d92:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d816      	bhi.n	8008dc8 <USBD_LL_Start+0x54>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <USBD_LL_Start+0x2c>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db1 	.word	0x08008db1
 8008da4:	08008db7 	.word	0x08008db7
 8008da8:	08008dbd 	.word	0x08008dbd
 8008dac:	08008dc3 	.word	0x08008dc3
    case HAL_OK :
      usb_status = USBD_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
    break;
 8008db4:	e00b      	b.n	8008dce <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008db6:	2302      	movs	r3, #2
 8008db8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dba:	e008      	b.n	8008dce <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc0:	e005      	b.n	8008dce <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc6:	e002      	b.n	8008dce <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008dc8:	2302      	movs	r3, #2
 8008dca:	73fb      	strb	r3, [r7, #15]
    break;
 8008dcc:	bf00      	nop
  }
  return usb_status;
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	4608      	mov	r0, r1
 8008de2:	4611      	mov	r1, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	70fb      	strb	r3, [r7, #3]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70bb      	strb	r3, [r7, #2]
 8008dee:	4613      	mov	r3, r2
 8008df0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008e00:	78bb      	ldrb	r3, [r7, #2]
 8008e02:	883a      	ldrh	r2, [r7, #0]
 8008e04:	78f9      	ldrb	r1, [r7, #3]
 8008e06:	f7f9 fa29 	bl	800225c <HAL_PCD_EP_Open>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d817      	bhi.n	8008e44 <USBD_LL_OpenEP+0x6c>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_LL_OpenEP+0x44>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e33 	.word	0x08008e33
 8008e24:	08008e39 	.word	0x08008e39
 8008e28:	08008e3f 	.word	0x08008e3f
    case HAL_OK :
      usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e30:	e00b      	b.n	8008e4a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e32:	2302      	movs	r3, #2
 8008e34:	73fb      	strb	r3, [r7, #15]
    break;
 8008e36:	e008      	b.n	8008e4a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3c:	e005      	b.n	8008e4a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	73fb      	strb	r3, [r7, #15]
    break;
 8008e42:	e002      	b.n	8008e4a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008e44:	2302      	movs	r3, #2
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	bf00      	nop
  }
  return usb_status;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	4611      	mov	r1, r2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f9 fa5a 	bl	800232c <HAL_PCD_EP_Close>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d816      	bhi.n	8008eb0 <USBD_LL_CloseEP+0x5c>
 8008e82:	a201      	add	r2, pc, #4	; (adr r2, 8008e88 <USBD_LL_CloseEP+0x34>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008e9f 	.word	0x08008e9f
 8008e90:	08008ea5 	.word	0x08008ea5
 8008e94:	08008eab 	.word	0x08008eab
    case HAL_OK :
      usb_status = USBD_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e9c:	e00b      	b.n	8008eb6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea2:	e008      	b.n	8008eb6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea8:	e005      	b.n	8008eb6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	73fb      	strb	r3, [r7, #15]
    break;
 8008eae:	e002      	b.n	8008eb6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	bf00      	nop
  }
  return usb_status;  
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	4611      	mov	r1, r2
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f9 fb01 	bl	80024e6 <HAL_PCD_EP_SetStall>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d816      	bhi.n	8008f1c <USBD_LL_StallEP+0x5c>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <USBD_LL_StallEP+0x34>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f0b 	.word	0x08008f0b
 8008efc:	08008f11 	.word	0x08008f11
 8008f00:	08008f17 	.word	0x08008f17
    case HAL_OK :
      usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	73fb      	strb	r3, [r7, #15]
    break;
 8008f08:	e00b      	b.n	8008f22 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0e:	e008      	b.n	8008f22 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f10:	2301      	movs	r3, #1
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e005      	b.n	8008f22 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f16:	2302      	movs	r3, #2
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	e002      	b.n	8008f22 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	bf00      	nop
  }
  return usb_status;  
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7f9 fb2d 	bl	80025aa <HAL_PCD_EP_ClrStall>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d816      	bhi.n	8008f88 <USBD_LL_ClearStallEP+0x5c>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <USBD_LL_ClearStallEP+0x34>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008f71 	.word	0x08008f71
 8008f64:	08008f77 	.word	0x08008f77
 8008f68:	08008f7d 	.word	0x08008f7d
 8008f6c:	08008f83 	.word	0x08008f83
    case HAL_OK :
      usb_status = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
    break;
 8008f74:	e00b      	b.n	8008f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7a:	e008      	b.n	8008f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f80:	e005      	b.n	8008f8e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f82:	2302      	movs	r3, #2
 8008f84:	73fb      	strb	r3, [r7, #15]
    break;
 8008f86:	e002      	b.n	8008f8e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8c:	bf00      	nop
  }
  return usb_status; 
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008faa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	da0b      	bge.n	8008fcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fba:	68f9      	ldr	r1, [r7, #12]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	1a9b      	subs	r3, r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	333e      	adds	r3, #62	; 0x3e
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	e00b      	b.n	8008fe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008fcc:	78fb      	ldrb	r3, [r7, #3]
 8008fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	1a9b      	subs	r3, r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3714      	adds	r7, #20
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f9 f8ff 	bl	8002212 <HAL_PCD_SetAddress>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d816      	bhi.n	800904c <USBD_LL_SetUSBAddress+0x5c>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <USBD_LL_SetUSBAddress+0x34>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	08009035 	.word	0x08009035
 8009028:	0800903b 	.word	0x0800903b
 800902c:	08009041 	.word	0x08009041
 8009030:	08009047 	.word	0x08009047
    case HAL_OK :
      usb_status = USBD_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
    break;
 8009038:	e00b      	b.n	8009052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800903a:	2302      	movs	r3, #2
 800903c:	73fb      	strb	r3, [r7, #15]
    break;
 800903e:	e008      	b.n	8009052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009040:	2301      	movs	r3, #1
 8009042:	73fb      	strb	r3, [r7, #15]
    break;
 8009044:	e005      	b.n	8009052 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009046:	2302      	movs	r3, #2
 8009048:	73fb      	strb	r3, [r7, #15]
    break;
 800904a:	e002      	b.n	8009052 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800904c:	2302      	movs	r3, #2
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	bf00      	nop
  }
  return usb_status;  
 8009052:	7bfb      	ldrb	r3, [r7, #15]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	461a      	mov	r2, r3
 8009068:	460b      	mov	r3, r1
 800906a:	72fb      	strb	r3, [r7, #11]
 800906c:	4613      	mov	r3, r2
 800906e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800907e:	893b      	ldrh	r3, [r7, #8]
 8009080:	7af9      	ldrb	r1, [r7, #11]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	f7f9 f9f2 	bl	800246c <HAL_PCD_EP_Transmit>
 8009088:	4603      	mov	r3, r0
 800908a:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 800908c:	7dbb      	ldrb	r3, [r7, #22]
 800908e:	2b03      	cmp	r3, #3
 8009090:	d816      	bhi.n	80090c0 <USBD_LL_Transmit+0x64>
 8009092:	a201      	add	r2, pc, #4	; (adr r2, 8009098 <USBD_LL_Transmit+0x3c>)
 8009094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009098:	080090a9 	.word	0x080090a9
 800909c:	080090af 	.word	0x080090af
 80090a0:	080090b5 	.word	0x080090b5
 80090a4:	080090bb 	.word	0x080090bb
    case HAL_OK :
      usb_status = USBD_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	75fb      	strb	r3, [r7, #23]
    break;
 80090ac:	e00b      	b.n	80090c6 <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ae:	2302      	movs	r3, #2
 80090b0:	75fb      	strb	r3, [r7, #23]
    break;
 80090b2:	e008      	b.n	80090c6 <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090b4:	2301      	movs	r3, #1
 80090b6:	75fb      	strb	r3, [r7, #23]
    break;
 80090b8:	e005      	b.n	80090c6 <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090ba:	2302      	movs	r3, #2
 80090bc:	75fb      	strb	r3, [r7, #23]
    break;
 80090be:	e002      	b.n	80090c6 <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80090c0:	2302      	movs	r3, #2
 80090c2:	75fb      	strb	r3, [r7, #23]
    break;
 80090c4:	bf00      	nop
  }
  return usb_status;    
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	461a      	mov	r2, r3
 80090dc:	460b      	mov	r3, r1
 80090de:	72fb      	strb	r3, [r7, #11]
 80090e0:	4613      	mov	r3, r2
 80090e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80090f2:	893b      	ldrh	r3, [r7, #8]
 80090f4:	7af9      	ldrb	r1, [r7, #11]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f7f9 f962 	bl	80023c0 <HAL_PCD_EP_Receive>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009100:	7dbb      	ldrb	r3, [r7, #22]
 8009102:	2b03      	cmp	r3, #3
 8009104:	d816      	bhi.n	8009134 <USBD_LL_PrepareReceive+0x64>
 8009106:	a201      	add	r2, pc, #4	; (adr r2, 800910c <USBD_LL_PrepareReceive+0x3c>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	0800911d 	.word	0x0800911d
 8009110:	08009123 	.word	0x08009123
 8009114:	08009129 	.word	0x08009129
 8009118:	0800912f 	.word	0x0800912f
    case HAL_OK :
      usb_status = USBD_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	75fb      	strb	r3, [r7, #23]
    break;
 8009120:	e00b      	b.n	800913a <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009122:	2302      	movs	r3, #2
 8009124:	75fb      	strb	r3, [r7, #23]
    break;
 8009126:	e008      	b.n	800913a <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009128:	2301      	movs	r3, #1
 800912a:	75fb      	strb	r3, [r7, #23]
    break;
 800912c:	e005      	b.n	800913a <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800912e:	2302      	movs	r3, #2
 8009130:	75fb      	strb	r3, [r7, #23]
    break;
 8009132:	e002      	b.n	800913a <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009134:	2302      	movs	r3, #2
 8009136:	75fb      	strb	r3, [r7, #23]
    break;
 8009138:	bf00      	nop
  }
  return usb_status; 
 800913a:	7dfb      	ldrb	r3, [r7, #23]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009156:	78fa      	ldrb	r2, [r7, #3]
 8009158:	4611      	mov	r1, r2
 800915a:	4618      	mov	r0, r3
 800915c:	f7f9 f96e 	bl	800243c <HAL_PCD_EP_GetRxCount>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009178:	78fb      	ldrb	r3, [r7, #3]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <HAL_PCDEx_LPM_Callback+0x18>
 800917e:	2b01      	cmp	r3, #1
 8009180:	d01f      	beq.n	80091c2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009182:	e03b      	b.n	80091fc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d007      	beq.n	800919c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800918c:	f000 f854 	bl	8009238 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009190:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <HAL_PCDEx_LPM_Callback+0x98>)
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	4a1b      	ldr	r2, [pc, #108]	; (8009204 <HAL_PCDEx_LPM_Callback+0x98>)
 8009196:	f023 0306 	bic.w	r3, r3, #6
 800919a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6812      	ldr	r2, [r2, #0]
 80091aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe f9e5 	bl	800758a <USBD_LL_Resume>
    break;
 80091c0:	e01c      	b.n	80091fc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6812      	ldr	r2, [r2, #0]
 80091d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091d4:	f043 0301 	orr.w	r3, r3, #1
 80091d8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fe f9bd 	bl	8007560 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <HAL_PCDEx_LPM_Callback+0x98>)
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <HAL_PCDEx_LPM_Callback+0x98>)
 80091f4:	f043 0306 	orr.w	r3, r3, #6
 80091f8:	6113      	str	r3, [r2, #16]
    break;   
 80091fa:	bf00      	nop
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	e000ed00 	.word	0xe000ed00

08009208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <USBD_static_malloc+0x18>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	200001bc 	.word	0x200001bc

08009224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]

}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800923c:	f7f7 f94f 	bl	80004de <SystemClock_Config>
}
 8009240:	bf00      	nop
 8009242:	bd80      	pop	{r7, pc}

08009244 <__libc_init_array>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	4e0d      	ldr	r6, [pc, #52]	; (800927c <__libc_init_array+0x38>)
 8009248:	4c0d      	ldr	r4, [pc, #52]	; (8009280 <__libc_init_array+0x3c>)
 800924a:	1ba4      	subs	r4, r4, r6
 800924c:	10a4      	asrs	r4, r4, #2
 800924e:	2500      	movs	r5, #0
 8009250:	42a5      	cmp	r5, r4
 8009252:	d109      	bne.n	8009268 <__libc_init_array+0x24>
 8009254:	4e0b      	ldr	r6, [pc, #44]	; (8009284 <__libc_init_array+0x40>)
 8009256:	4c0c      	ldr	r4, [pc, #48]	; (8009288 <__libc_init_array+0x44>)
 8009258:	f000 f820 	bl	800929c <_init>
 800925c:	1ba4      	subs	r4, r4, r6
 800925e:	10a4      	asrs	r4, r4, #2
 8009260:	2500      	movs	r5, #0
 8009262:	42a5      	cmp	r5, r4
 8009264:	d105      	bne.n	8009272 <__libc_init_array+0x2e>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800926c:	4798      	blx	r3
 800926e:	3501      	adds	r5, #1
 8009270:	e7ee      	b.n	8009250 <__libc_init_array+0xc>
 8009272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009276:	4798      	blx	r3
 8009278:	3501      	adds	r5, #1
 800927a:	e7f2      	b.n	8009262 <__libc_init_array+0x1e>
 800927c:	0800934c 	.word	0x0800934c
 8009280:	0800934c 	.word	0x0800934c
 8009284:	0800934c 	.word	0x0800934c
 8009288:	08009350 	.word	0x08009350

0800928c <memset>:
 800928c:	4402      	add	r2, r0
 800928e:	4603      	mov	r3, r0
 8009290:	4293      	cmp	r3, r2
 8009292:	d100      	bne.n	8009296 <memset+0xa>
 8009294:	4770      	bx	lr
 8009296:	f803 1b01 	strb.w	r1, [r3], #1
 800929a:	e7f9      	b.n	8009290 <memset+0x4>

0800929c <_init>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr

080092a8 <_fini>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr
