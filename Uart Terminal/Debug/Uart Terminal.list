
Uart Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a69c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800a82c  0800a82c  0001a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa58  0800aa58  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa58  0800aa58  0001aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa60  0800aa60  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa60  0800aa60  0001aa60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800aa68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006848  200001f8  0800ac60  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a40  0800ac60  00026a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb7e  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ea9  00000000  00000000  0003fda6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001698  00000000  00000000  00043c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014c0  00000000  00000000  000452e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b00c  00000000  00000000  000467a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014cad  00000000  00000000  000717b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7568  00000000  00000000  00086461  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d9c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000611c  00000000  00000000  0017da44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a814 	.word	0x0800a814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800a814 	.word	0x0800a814

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 ff1f 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f891 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f919 	bl	80007c4 <MX_GPIO_Init>
  //MX_DMA_Init();
  //MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 8000592:	f008 fd2b 	bl	8008fec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  if (esp8266_init(&huart2)){
 8000596:	483e      	ldr	r0, [pc, #248]	; (8000690 <main+0x110>)
 8000598:	f000 fb16 	bl	8000bc8 <esp8266_init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d000      	beq.n	80005a4 <main+0x24>
  		while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x22>
  			;
  	}
  	if (esp8266_connect_WiFi(&huart2, "ESP8266",
 80005a4:	4a3b      	ldr	r2, [pc, #236]	; (8000694 <main+0x114>)
 80005a6:	493c      	ldr	r1, [pc, #240]	; (8000698 <main+0x118>)
 80005a8:	4839      	ldr	r0, [pc, #228]	; (8000690 <main+0x110>)
 80005aa:	f000 fbdb 	bl	8000d64 <esp8266_connect_WiFi>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d000      	beq.n	80005b6 <main+0x36>
  			"hijason12")) {
  		while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x34>
  			;
  	}
  	if (esp8266_connect_TCP(&huart2, "172.20.10.2", 10000)) {
 80005b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80005ba:	4938      	ldr	r1, [pc, #224]	; (800069c <main+0x11c>)
 80005bc:	4834      	ldr	r0, [pc, #208]	; (8000690 <main+0x110>)
 80005be:	f000 fc2b 	bl	8000e18 <esp8266_connect_TCP>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <main+0x4a>
  		while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x48>
  	// 1. port krpc-cnano into this project
  	// 	1.1 writing the four functions in "communication.h"
  	//	1.2 writing the iostream callback functions
  	// 2. get the initialization sequence in this code

  	init_task_list();
 80005ca:	f000 fd1d 	bl	8001008 <init_task_list>

  	strcpy((char *) buffer, "Hello Jeremy every 15 seconds!");
 80005ce:	4a34      	ldr	r2, [pc, #208]	; (80006a0 <main+0x120>)
 80005d0:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <main+0x124>)
 80005d2:	4614      	mov	r4, r2
 80005d4:	461d      	mov	r5, r3
 80005d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005de:	c407      	stmia	r4!, {r0, r1, r2}
 80005e0:	8023      	strh	r3, [r4, #0]
 80005e2:	3402      	adds	r4, #2
 80005e4:	0c1b      	lsrs	r3, r3, #16
 80005e6:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 80005e8:	482d      	ldr	r0, [pc, #180]	; (80006a0 <main+0x120>)
 80005ea:	f7ff fdf1 	bl	80001d0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <main+0x120>)
 80005f4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	//HAL_UART_Transmit_IT(&s_UARTHandle, &buffer[BUF_SIZE], 1);
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 15 * SEC, 15 * SEC);
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <main+0x120>)
 80005fa:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 80005fe:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000608:	4a25      	ldr	r2, [pc, #148]	; (80006a0 <main+0x120>)
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fd8a 	bl	8001124 <add_task>
  	strcpy((char *) buffer, "Hello Nick every 10 seconds!");
 8000610:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <main+0x120>)
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0x128>)
 8000614:	4614      	mov	r4, r2
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000620:	c407      	stmia	r4!, {r0, r1, r2}
 8000622:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 8000624:	481e      	ldr	r0, [pc, #120]	; (80006a0 <main+0x120>)
 8000626:	f7ff fdd3 	bl	80001d0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <main+0x120>)
 8000630:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 10 * SEC, 10 * SEC);
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x120>)
 8000636:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 800063a:	f242 7310 	movw	r3, #10000	; 0x2710
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	f242 7310 	movw	r3, #10000	; 0x2710
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <main+0x120>)
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fd6c 	bl	8001124 <add_task>
  	strcpy((char *) buffer, "Hello Pablo every 5 seconds!");
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <main+0x120>)
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0x12c>)
 8000650:	4614      	mov	r4, r2
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800065c:	c407      	stmia	r4!, {r0, r1, r2}
 800065e:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 8000660:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x120>)
 8000662:	f7ff fdb5 	bl	80001d0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <main+0x120>)
 800066c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 5 * SEC, 5 * SEC);
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <main+0x120>)
 8000672:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8000676:	f241 3388 	movw	r3, #5000	; 0x1388
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <main+0x120>)
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fd4e 	bl	8001124 <add_task>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //asm("wfi");
	  handle_tasks(&huart2);
 8000688:	4801      	ldr	r0, [pc, #4]	; (8000690 <main+0x110>)
 800068a:	f000 fe29 	bl	80012e0 <handle_tasks>
 800068e:	e7fb      	b.n	8000688 <main+0x108>
 8000690:	200050a8 	.word	0x200050a8
 8000694:	0800a82c 	.word	0x0800a82c
 8000698:	0800a838 	.word	0x0800a838
 800069c:	0800a840 	.word	0x0800a840
 80006a0:	20000214 	.word	0x20000214
 80006a4:	0800a84c 	.word	0x0800a84c
 80006a8:	0800a86c 	.word	0x0800a86c
 80006ac:	0800a88c 	.word	0x0800a88c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b0b8      	sub	sp, #224	; 0xe0
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 fc81 	bl	8009fc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d4:	463b      	mov	r3, r7
 80006d6:	2288      	movs	r2, #136	; 0x88
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 fc73 	bl	8009fc6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e0:	2310      	movs	r3, #16
 80006e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f2:	2360      	movs	r3, #96	; 0x60
 80006f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800070a:	2328      	movs	r3, #40	; 0x28
 800070c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000710:	2307      	movs	r3, #7
 8000712:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000726:	4618      	mov	r0, r3
 8000728:	f002 febc 	bl	80034a4 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000732:	f000 f86b 	bl	800080c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2303      	movs	r3, #3
 800073e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000754:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fa88 	bl	8003c70 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000766:	f000 f851 	bl	800080c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 800076a:	f242 0302 	movw	r3, #8194	; 0x2002
 800076e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000774:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000778:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000782:	2318      	movs	r3, #24
 8000784:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000786:	2307      	movs	r3, #7
 8000788:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000792:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000796:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4618      	mov	r0, r3
 800079c:	f003 fc6c 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80007a6:	f000 f831 	bl	800080c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ae:	f002 fe13 	bl	80033d8 <HAL_PWREx_ControlVoltageScaling>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80007b8:	f000 f828 	bl	800080c <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	37e0      	adds	r7, #224	; 0xe0
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x44>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_GPIO_Init+0x44>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_GPIO_Init+0x44>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x44>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x44>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a4a      	ldr	r2, [pc, #296]	; (80009ac <HAL_UART_MspInit+0x148>)
 8000882:	4293      	cmp	r3, r2
 8000884:	f040 808e 	bne.w	80009a4 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

	  /* Enable USARTx clock */
	    USARTx_CLK_ENABLE();
 8000888:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	4a48      	ldr	r2, [pc, #288]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800088e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000892:	6593      	str	r3, [r2, #88]	; 0x58
 8000894:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	69bb      	ldr	r3, [r7, #24]

	    /* Enable DMA clock */
	    DMAx_CLK_ENABLE();
 80008a0:	4b43      	ldr	r3, [pc, #268]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008a4:	4a42      	ldr	r2, [pc, #264]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	6493      	str	r3, [r2, #72]	; 0x48
 80008ac:	4b40      	ldr	r3, [pc, #256]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008bc:	4a3c      	ldr	r2, [pc, #240]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c2:	6593      	str	r3, [r2, #88]	; 0x58
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a36      	ldr	r2, [pc, #216]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e8:	230c      	movs	r3, #12
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f8:	2307      	movs	r3, #7
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 fa05 	bl	8001d14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800090a:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <HAL_UART_MspInit+0x150>)
 800090c:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <HAL_UART_MspInit+0x154>)
 800090e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000912:	2202      	movs	r2, #2
 8000914:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000916:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000918:	2210      	movs	r2, #16
 800091a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <HAL_UART_MspInit+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000922:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <HAL_UART_MspInit+0x150>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092e:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <HAL_UART_MspInit+0x150>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000942:	f000 ff1d 	bl	8001780 <HAL_DMA_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800094c:	f7ff ff5e 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000954:	669a      	str	r2, [r3, #104]	; 0x68
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x150>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2026      	movs	r0, #38	; 0x26
 8000962:	f000 fec8 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000966:	2026      	movs	r0, #38	; 0x26
 8000968:	f000 fee1 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 5, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	2011      	movs	r0, #17
 8000972:	f000 fec0 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8000976:	2011      	movs	r0, #17
 8000978:	f000 fed9 	bl	800172e <HAL_NVIC_EnableIRQ>


    TIMx_CLK_ENABLE();
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000980:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	6593      	str	r3, [r2, #88]	; 0x58
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]

    HAL_NVIC_SetPriority(TIMx_IRQn, 5, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2105      	movs	r1, #5
 8000998:	201d      	movs	r0, #29
 800099a:	f000 feac 	bl	80016f6 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(TIMx_IRQn);
 800099e:	201d      	movs	r0, #29
 80009a0:	f000 fec5 	bl	800172e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	; 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40004400 	.word	0x40004400
 80009b0:	40021000 	.word	0x40021000
 80009b4:	20005060 	.word	0x20005060
 80009b8:	40020080 	.word	0x40020080

080009bc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <HAL_UART_MspDeInit+0x40>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d112      	bne.n	80009f4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_UART_MspDeInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <HAL_UART_MspDeInit+0x44>)
 80009d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80009da:	210c      	movs	r1, #12
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 fb40 	bl	8002064 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 ff81 	bl	80018f0 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80009ee:	2026      	movs	r0, #38	; 0x26
 80009f0:	f000 feab 	bl	800174a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 fd10 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <DMA1_Channel7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void DMA1_Channel7_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <DMA1_Channel7_IRQHandler+0x10>)
 8000a66:	f001 f876 	bl	8001b56 <HAL_DMA_IRQHandler>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20005060 	.word	0x20005060

08000a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USART2_IRQHandler+0x10>)
 8000a7a:	f004 fd0f 	bl	800549c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200050a8 	.word	0x200050a8

08000a88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <OTG_FS_IRQHandler+0x10>)
 8000a8e:	f001 fd48 	bl	8002522 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20006634 	.word	0x20006634

08000a9c <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM3_IRQHandler+0x10>)
 8000aa2:	f003 fff9 	bl	8004a98 <HAL_TIM_IRQHandler>
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200063f4 	.word	0x200063f4

08000ab0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x50>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x16>
		heap_end = &end;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <_sbrk+0x50>)
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <_sbrk+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <_sbrk+0x50>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <_sbrk+0x50>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	466a      	mov	r2, sp
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d907      	bls.n	8000aea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ada:	f009 fa3f 	bl	8009f5c <__errno>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	e006      	b.n	8000af8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <_sbrk+0x50>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <_sbrk+0x50>)
 8000af4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000618 	.word	0x20000618
 8000b04:	20006a40 	.word	0x20006a40

08000b08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <SystemInit+0x64>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a16      	ldr	r2, [pc, #88]	; (8000b6c <SystemInit+0x64>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <SystemInit+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <SystemInit+0x68>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <SystemInit+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <SystemInit+0x68>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <SystemInit+0x68>)
 8000b34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <SystemInit+0x68>)
 8000b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <SystemInit+0x68>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <SystemInit+0x68>)
 8000b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <SystemInit+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SystemInit+0x64>)
 8000b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	40021000 	.word	0x40021000

08000b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
	ldr	r2, =_sbss
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b94:	f842 3b04 	str.w	r3, [r2], #4

08000b98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8000b9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9e:	f7ff ffb3 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f009 f9e1 	bl	8009f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba6:	f7ff fceb 	bl	8000580 <main>

08000baa <LoopForever>:

LoopForever:
    b LoopForever
 8000baa:	e7fe      	b.n	8000baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bb0:	0800aa68 	.word	0x0800aa68
	ldr	r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bb8:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8000bbc:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8000bc0:	20006a40 	.word	0x20006a40

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>
	...

08000bc8 <esp8266_init>:
//#include "stm32l476g_discovery.h"

static uint8_t esp_buffer[ESP_BUF_SIZE];

/*-- Checks to see if the ESP8266 module is alive, then disables command echoing, and enables station mode --*/
ESP8266_STATUS esp8266_init(UART_HandleTypeDef *huart) {
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (esp8266_reset(huart)) {
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f88d 	bl	8000cf0 <esp8266_reset>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <esp8266_init+0x18>
		return ESP8266_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e075      	b.n	8000ccc <esp8266_init+0x104>
	}

	// Check if alive, note that echoing has yet to be disabled
	strcpy((char *) esp_buffer, C_AT);
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <esp8266_init+0x10c>)
 8000be2:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <esp8266_init+0x110>)
 8000be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be8:	6018      	str	r0, [r3, #0]
 8000bea:	3304      	adds	r3, #4
 8000bec:	7019      	strb	r1, [r3, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_AT_LEN) == HAL_ERROR);
 8000bee:	bf00      	nop
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	4938      	ldr	r1, [pc, #224]	; (8000cd4 <esp8266_init+0x10c>)
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f004 fbd5 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d0f7      	beq.n	8000bf0 <esp8266_init+0x28>
	HAL_UART_Receive(huart, esp_buffer, C_AT_LEN + R_OK_LEN, DELAY_5_SEC);
 8000c00:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c04:	220a      	movs	r2, #10
 8000c06:	4933      	ldr	r1, [pc, #204]	; (8000cd4 <esp8266_init+0x10c>)
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f004 fa5b 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, C_AT, C_AT_LEN)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4931      	ldr	r1, [pc, #196]	; (8000cd8 <esp8266_init+0x110>)
 8000c12:	4830      	ldr	r0, [pc, #192]	; (8000cd4 <esp8266_init+0x10c>)
 8000c14:	f009 fa0f 	bl	800a036 <strncmp>
 8000c18:	4604      	mov	r4, r0
			| strncmp((char *) &esp_buffer[C_AT_LEN], R_OK, R_OK_LEN)) {
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	492f      	ldr	r1, [pc, #188]	; (8000cdc <esp8266_init+0x114>)
 8000c1e:	4830      	ldr	r0, [pc, #192]	; (8000ce0 <esp8266_init+0x118>)
 8000c20:	f009 fa09 	bl	800a036 <strncmp>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4323      	orrs	r3, r4
	if (strncmp((char *) esp_buffer, C_AT, C_AT_LEN)
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <esp8266_init+0x68>
		return ESP8266_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e04d      	b.n	8000ccc <esp8266_init+0x104>
	}

	// Disable echoing
	strcpy((char *) esp_buffer, C_ATE("0"));
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <esp8266_init+0x10c>)
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <esp8266_init+0x11c>)
 8000c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c38:	6018      	str	r0, [r3, #0]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	8019      	strh	r1, [r3, #0]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	0c0a      	lsrs	r2, r1, #16
 8000c42:	701a      	strb	r2, [r3, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_ATE_LEN("0")) == HAL_ERROR);
 8000c44:	bf00      	nop
 8000c46:	2206      	movs	r2, #6
 8000c48:	4922      	ldr	r1, [pc, #136]	; (8000cd4 <esp8266_init+0x10c>)
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f004 fbaa 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d0f7      	beq.n	8000c46 <esp8266_init+0x7e>
	HAL_UART_Receive(huart, esp_buffer, C_ATE_LEN("0") + R_OK_LEN, DELAY_5_SEC);
 8000c56:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	491d      	ldr	r1, [pc, #116]	; (8000cd4 <esp8266_init+0x10c>)
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f004 fa30 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, C_ATE("0"), C_ATE_LEN("0"))
 8000c64:	2206      	movs	r2, #6
 8000c66:	491f      	ldr	r1, [pc, #124]	; (8000ce4 <esp8266_init+0x11c>)
 8000c68:	481a      	ldr	r0, [pc, #104]	; (8000cd4 <esp8266_init+0x10c>)
 8000c6a:	f009 f9e4 	bl	800a036 <strncmp>
 8000c6e:	4604      	mov	r4, r0
			| strncmp((char *) &esp_buffer[C_ATE_LEN("0")], R_OK, R_OK_LEN)) {
 8000c70:	2206      	movs	r2, #6
 8000c72:	491a      	ldr	r1, [pc, #104]	; (8000cdc <esp8266_init+0x114>)
 8000c74:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <esp8266_init+0x120>)
 8000c76:	f009 f9de 	bl	800a036 <strncmp>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4323      	orrs	r3, r4
	if (strncmp((char *) esp_buffer, C_ATE("0"), C_ATE_LEN("0"))
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <esp8266_init+0xbe>
		return ESP8266_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e022      	b.n	8000ccc <esp8266_init+0x104>
	}

	// Enable station mode
	strcpy((char *) esp_buffer, C_AT_CWMODE("1"));
 8000c86:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <esp8266_init+0x10c>)
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <esp8266_init+0x124>)
 8000c8a:	4614      	mov	r4, r2
 8000c8c:	461d      	mov	r5, r3
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	682b      	ldr	r3, [r5, #0]
 8000c94:	8023      	strh	r3, [r4, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_AT_CWMODE_LEN("1")) == HAL_ERROR);
 8000c96:	bf00      	nop
 8000c98:	2211      	movs	r2, #17
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <esp8266_init+0x10c>)
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f004 fb81 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d0f7      	beq.n	8000c98 <esp8266_init+0xd0>
	HAL_UART_Receive(huart, esp_buffer, R_OK_LEN, DELAY_10_SEC);
 8000ca8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cac:	2206      	movs	r2, #6
 8000cae:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <esp8266_init+0x10c>)
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f004 fa07 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, R_OK, R_OK_LEN)) {
 8000cb6:	2206      	movs	r2, #6
 8000cb8:	4908      	ldr	r1, [pc, #32]	; (8000cdc <esp8266_init+0x114>)
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <esp8266_init+0x10c>)
 8000cbc:	f009 f9bb 	bl	800a036 <strncmp>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <esp8266_init+0x102>
		return ESP8266_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e000      	b.n	8000ccc <esp8266_init+0x104>
	}

	return ESP8266_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cd4:	2000061c 	.word	0x2000061c
 8000cd8:	0800a8ac 	.word	0x0800a8ac
 8000cdc:	0800a8b4 	.word	0x0800a8b4
 8000ce0:	20000620 	.word	0x20000620
 8000ce4:	0800a8bc 	.word	0x0800a8bc
 8000ce8:	20000622 	.word	0x20000622
 8000cec:	0800a8c4 	.word	0x0800a8c4

08000cf0 <esp8266_reset>:

/*-- Physically resets the ESP8266 by triggering its reset pin using GPIOA Pin 1 --*/
ESP8266_STATUS esp8266_reset(UART_HandleTypeDef *huart) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2102      	movs	r1, #2
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f001 faa4 	bl	800224c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f000 fbd7 	bl	80014b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f001 fa9b 	bl	800224c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d16:	200a      	movs	r0, #10
 8000d18:	f000 fbce 	bl	80014b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2102      	movs	r1, #2
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f001 fa92 	bl	800224c <HAL_GPIO_WritePin>

	HAL_UART_Receive(huart, esp_buffer, 565, DELAY_5_SEC);
 8000d28:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d2c:	f240 2235 	movw	r2, #565	; 0x235
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <esp8266_reset+0x68>)
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f004 f9c6 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) &esp_buffer[565 - R_RESET_LEN], R_RESET,
 8000d38:	2209      	movs	r2, #9
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <esp8266_reset+0x6c>)
 8000d3c:	4808      	ldr	r0, [pc, #32]	; (8000d60 <esp8266_reset+0x70>)
 8000d3e:	f009 f97a 	bl	800a036 <strncmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <esp8266_reset+0x5c>
	R_RESET_LEN)) {
		return ESP8266_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e000      	b.n	8000d4e <esp8266_reset+0x5e>
	}
	return ESP8266_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000061c 	.word	0x2000061c
 8000d5c:	0800a8d8 	.word	0x0800a8d8
 8000d60:	20000848 	.word	0x20000848

08000d64 <esp8266_connect_WiFi>:

/*-- Connects to WiFI network with given SSID and PSWD --*/
ESP8266_STATUS esp8266_connect_WiFi(UART_HandleTypeDef *huart, char *ssid,
		char *pswd) {
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	// Create connection string
	strcpy((char *) esp_buffer, "AT+CWJAP_CUR=\"");
 8000d70:	4a24      	ldr	r2, [pc, #144]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <esp8266_connect_WiFi+0xa4>)
 8000d74:	4614      	mov	r4, r2
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	c407      	stmia	r4!, {r0, r1, r2}
 8000d7a:	8023      	strh	r3, [r4, #0]
 8000d7c:	3402      	adds	r4, #2
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	7023      	strb	r3, [r4, #0]
	strcat((char *) esp_buffer, ssid);
 8000d82:	68b9      	ldr	r1, [r7, #8]
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000d86:	f009 f947 	bl	800a018 <strcat>
	strcat((char *) esp_buffer, "\",\"");
 8000d8a:	481e      	ldr	r0, [pc, #120]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000d8c:	f7ff fa20 	bl	80001d0 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000d96:	4413      	add	r3, r2
 8000d98:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <esp8266_connect_WiFi+0xa8>)
 8000d9a:	6810      	ldr	r0, [r2, #0]
 8000d9c:	6018      	str	r0, [r3, #0]
	strcat((char *) esp_buffer, pswd);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4818      	ldr	r0, [pc, #96]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000da2:	f009 f939 	bl	800a018 <strcat>
	strcat((char *) esp_buffer, "\"\r\n");
 8000da6:	4817      	ldr	r0, [pc, #92]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000da8:	f7ff fa12 	bl	80001d0 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000db2:	4413      	add	r3, r2
 8000db4:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <esp8266_connect_WiFi+0xac>)
 8000db6:	6810      	ldr	r0, [r2, #0]
 8000db8:	6018      	str	r0, [r3, #0]

	// Connect to WiFi
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, strlen((char *) esp_buffer)) == HAL_ERROR);
 8000dba:	bf00      	nop
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000dbe:	f7ff fa07 	bl	80001d0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	490e      	ldr	r1, [pc, #56]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f004 faea 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d0f2      	beq.n	8000dbc <esp8266_connect_WiFi+0x58>
	HAL_UART_Receive(huart, esp_buffer, R_AT_CWJAP_LEN, DELAY_20_SEC);
 8000dd6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dda:	2223      	movs	r2, #35	; 0x23
 8000ddc:	4909      	ldr	r1, [pc, #36]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f004 f970 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, R_AT_CWJAP, R_AT_CWJAP_LEN)) {
 8000de4:	2223      	movs	r2, #35	; 0x23
 8000de6:	490b      	ldr	r1, [pc, #44]	; (8000e14 <esp8266_connect_WiFi+0xb0>)
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <esp8266_connect_WiFi+0xa0>)
 8000dea:	f009 f924 	bl	800a036 <strncmp>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <esp8266_connect_WiFi+0x94>
		return ESP8266_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e000      	b.n	8000dfa <esp8266_connect_WiFi+0x96>
	}

	return ESP8266_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000061c 	.word	0x2000061c
 8000e08:	0800a8e4 	.word	0x0800a8e4
 8000e0c:	0800a8f4 	.word	0x0800a8f4
 8000e10:	0800a8f8 	.word	0x0800a8f8
 8000e14:	0800a8fc 	.word	0x0800a8fc

08000e18 <esp8266_connect_TCP>:

/*-- Connects to TCP port specified by IP and port, sets SSL size to 4096, and enables UART pass-through --*/
ESP8266_STATUS esp8266_connect_TCP(UART_HandleTypeDef *huart, char *ip,
		uint16_t port) {
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	4613      	mov	r3, r2
 8000e24:	80fb      	strh	r3, [r7, #6]
	// Convert port integer to a string
	char port_str[6];
	sprintf(port_str, "%d", port);
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4951      	ldr	r1, [pc, #324]	; (8000f74 <esp8266_connect_TCP+0x15c>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f009 f8d2 	bl	8009fd8 <siprintf>

	// Create connection string
	strcpy((char *) esp_buffer, "AT+CIPSTART=\"TCP\",\"");
 8000e34:	4a50      	ldr	r2, [pc, #320]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <esp8266_connect_TCP+0x164>)
 8000e38:	4614      	mov	r4, r2
 8000e3a:	461d      	mov	r5, r3
 8000e3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e40:	682b      	ldr	r3, [r5, #0]
 8000e42:	6023      	str	r3, [r4, #0]
	strcat((char *) esp_buffer, ip);
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	484c      	ldr	r0, [pc, #304]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e48:	f009 f8e6 	bl	800a018 <strcat>
	strcat((char *) esp_buffer, "\",");
 8000e4c:	484a      	ldr	r0, [pc, #296]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e4e:	f7ff f9bf 	bl	80001d0 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b48      	ldr	r3, [pc, #288]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <esp8266_connect_TCP+0x168>)
 8000e5c:	8811      	ldrh	r1, [r2, #0]
 8000e5e:	7892      	ldrb	r2, [r2, #2]
 8000e60:	8019      	strh	r1, [r3, #0]
 8000e62:	709a      	strb	r2, [r3, #2]
	strcat((char *) esp_buffer, port_str);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4843      	ldr	r0, [pc, #268]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e6c:	f009 f8d4 	bl	800a018 <strcat>
	strcat((char *) esp_buffer, "\r\n");
 8000e70:	4841      	ldr	r0, [pc, #260]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e72:	f7ff f9ad 	bl	80001d0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a41      	ldr	r2, [pc, #260]	; (8000f84 <esp8266_connect_TCP+0x16c>)
 8000e80:	8811      	ldrh	r1, [r2, #0]
 8000e82:	7892      	ldrb	r2, [r2, #2]
 8000e84:	8019      	strh	r1, [r3, #0]
 8000e86:	709a      	strb	r2, [r3, #2]

	// Connect to TCP port
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, strlen((char *) esp_buffer)) == HAL_ERROR);
 8000e88:	bf00      	nop
 8000e8a:	483b      	ldr	r0, [pc, #236]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e8c:	f7ff f9a0 	bl	80001d0 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4938      	ldr	r1, [pc, #224]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f004 fa83 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d0f2      	beq.n	8000e8a <esp8266_connect_TCP+0x72>
	HAL_UART_Receive(huart, esp_buffer, R_AT_CIPSTART_LEN, DELAY_10_SEC);
 8000ea4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	4933      	ldr	r1, [pc, #204]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f004 f909 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, R_AT_CIPSTART, R_AT_CIPSTART_LEN)) {
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	4934      	ldr	r1, [pc, #208]	; (8000f88 <esp8266_connect_TCP+0x170>)
 8000eb6:	4830      	ldr	r0, [pc, #192]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000eb8:	f009 f8bd 	bl	800a036 <strncmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <esp8266_connect_TCP+0xae>
		return ESP8266_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e051      	b.n	8000f6a <esp8266_connect_TCP+0x152>
	}

	// Set SSL size to 4096
	strcpy((char *) esp_buffer, C_AT_CIPSSLSIZE("4096"));
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000ec8:	4b30      	ldr	r3, [pc, #192]	; (8000f8c <esp8266_connect_TCP+0x174>)
 8000eca:	4614      	mov	r4, r2
 8000ecc:	461d      	mov	r5, r3
 8000ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed6:	6020      	str	r0, [r4, #0]
 8000ed8:	3404      	adds	r4, #4
 8000eda:	7021      	strb	r1, [r4, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_AT_CIPSSLSIZE_LEN("4096")) == HAL_ERROR);
 8000edc:	bf00      	nop
 8000ede:	2214      	movs	r2, #20
 8000ee0:	4925      	ldr	r1, [pc, #148]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f004 fa5e 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d0f7      	beq.n	8000ede <esp8266_connect_TCP+0xc6>
	HAL_UART_Receive(huart, esp_buffer, R_OK_LEN, DELAY_10_SEC);
 8000eee:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	4920      	ldr	r1, [pc, #128]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f004 f8e4 	bl	80050c4 <HAL_UART_Receive>
	if (strncmp((char *) esp_buffer, R_OK, R_OK_LEN)) {
 8000efc:	2206      	movs	r2, #6
 8000efe:	4924      	ldr	r1, [pc, #144]	; (8000f90 <esp8266_connect_TCP+0x178>)
 8000f00:	481d      	ldr	r0, [pc, #116]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000f02:	f009 f898 	bl	800a036 <strncmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <esp8266_connect_TCP+0xf8>
		return ESP8266_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e02c      	b.n	8000f6a <esp8266_connect_TCP+0x152>
	}

	// Set IP mode to 1, UART pass-through
	if (esp8266_enable_passthrough(huart)) {
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f843 	bl	8000f9c <esp8266_enable_passthrough>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <esp8266_connect_TCP+0x108>
		return ESP8266_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e024      	b.n	8000f6a <esp8266_connect_TCP+0x152>
	}

	// Start communications
	strcpy((char *) esp_buffer, C_AT_CIPSEND);
 8000f20:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <esp8266_connect_TCP+0x17c>)
 8000f24:	4614      	mov	r4, r2
 8000f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f28:	c407      	stmia	r4!, {r0, r1, r2}
 8000f2a:	7023      	strb	r3, [r4, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_AT_CIPSEND_LEN) == HAL_ERROR);
 8000f2c:	bf00      	nop
 8000f2e:	220c      	movs	r2, #12
 8000f30:	4911      	ldr	r1, [pc, #68]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f004 fa36 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d0f7      	beq.n	8000f2e <esp8266_connect_TCP+0x116>
	while(HAL_UART_Receive(huart, esp_buffer, R_AT_CIPSEND_LEN,
 8000f3e:	bf00      	nop
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	2209      	movs	r2, #9
 8000f46:	490c      	ldr	r1, [pc, #48]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f004 f8bb 	bl	80050c4 <HAL_UART_Receive>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d0f5      	beq.n	8000f40 <esp8266_connect_TCP+0x128>
	HAL_MAX_DELAY) == HAL_ERROR);
	if (strncmp((char *) esp_buffer, R_AT_CIPSEND, R_AT_CIPSEND_LEN)) {
 8000f54:	2209      	movs	r2, #9
 8000f56:	4910      	ldr	r1, [pc, #64]	; (8000f98 <esp8266_connect_TCP+0x180>)
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <esp8266_connect_TCP+0x160>)
 8000f5a:	f009 f86c 	bl	800a036 <strncmp>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <esp8266_connect_TCP+0x150>
		return ESP8266_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <esp8266_connect_TCP+0x152>
	}

	return ESP8266_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bdb0      	pop	{r4, r5, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	0800a920 	.word	0x0800a920
 8000f78:	2000061c 	.word	0x2000061c
 8000f7c:	0800a924 	.word	0x0800a924
 8000f80:	0800a938 	.word	0x0800a938
 8000f84:	0800a93c 	.word	0x0800a93c
 8000f88:	0800a940 	.word	0x0800a940
 8000f8c:	0800a950 	.word	0x0800a950
 8000f90:	0800a8b4 	.word	0x0800a8b4
 8000f94:	0800a968 	.word	0x0800a968
 8000f98:	0800a978 	.word	0x0800a978

08000f9c <esp8266_enable_passthrough>:

ESP8266_STATUS esp8266_enable_passthrough(UART_HandleTypeDef *huart) {
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	// Set IP mode to 1, UART pass-through
	strcpy((char *) esp_buffer, C_AT_CIPMODE("1"));
 8000fa4:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <esp8266_enable_passthrough+0x60>)
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <esp8266_enable_passthrough+0x64>)
 8000fa8:	4614      	mov	r4, r2
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	c407      	stmia	r4!, {r0, r1, r2}
 8000fae:	8023      	strh	r3, [r4, #0]
 8000fb0:	3402      	adds	r4, #2
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	7023      	strb	r3, [r4, #0]
	while(HAL_UART_Transmit_DMA(huart, esp_buffer, C_AT_CIPMODE_LEN("1")) == HAL_ERROR);
 8000fb6:	bf00      	nop
 8000fb8:	220e      	movs	r2, #14
 8000fba:	4910      	ldr	r1, [pc, #64]	; (8000ffc <esp8266_enable_passthrough+0x60>)
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f004 f9f1 	bl	80053a4 <HAL_UART_Transmit_DMA>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d0f7      	beq.n	8000fb8 <esp8266_enable_passthrough+0x1c>
	while(HAL_UART_Receive(huart, esp_buffer, R_OK_LEN,
 8000fc8:	bf00      	nop
 8000fca:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fce:	2206      	movs	r2, #6
 8000fd0:	490a      	ldr	r1, [pc, #40]	; (8000ffc <esp8266_enable_passthrough+0x60>)
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f004 f876 	bl	80050c4 <HAL_UART_Receive>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d0f5      	beq.n	8000fca <esp8266_enable_passthrough+0x2e>
	DELAY_10_SEC) == HAL_ERROR);
	if (strncmp((char *) esp_buffer, R_OK, R_OK_LEN)) {
 8000fde:	2206      	movs	r2, #6
 8000fe0:	4908      	ldr	r1, [pc, #32]	; (8001004 <esp8266_enable_passthrough+0x68>)
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <esp8266_enable_passthrough+0x60>)
 8000fe4:	f009 f827 	bl	800a036 <strncmp>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <esp8266_enable_passthrough+0x56>
		return ESP8266_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <esp8266_enable_passthrough+0x58>
	}

	return ESP8266_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	2000061c 	.word	0x2000061c
 8001000:	0800a984 	.word	0x0800a984
 8001004:	0800a8b4 	.word	0x0800a8b4

08001008 <init_task_list>:
static uint32_t last_time;

static void handle_response (UART_HandleTypeDef *huart, TASK_NODE *t);
static void handle_request (UART_HandleTypeDef *huart, TASK_NODE *t);

void init_task_list() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t cnt;
	head = tasks;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <init_task_list+0x70>)
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <init_task_list+0x74>)
 8001012:	601a      	str	r2, [r3, #0]
	tail = tasks;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <init_task_list+0x78>)
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <init_task_list+0x74>)
 8001018:	601a      	str	r2, [r3, #0]
	TASK_NODE *temp = head;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <init_task_list+0x70>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	603b      	str	r3, [r7, #0]
	for (cnt = 1; cnt < MAX_TASKS; cnt++) {
 8001020:	2301      	movs	r3, #1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	e011      	b.n	800104a <init_task_list+0x42>
		temp->task_type = NULL_TASK;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	22ff      	movs	r2, #255	; 0xff
 800102a:	711a      	strb	r2, [r3, #4]
		temp->next = &tasks[cnt];
 800102c:	79fa      	ldrb	r2, [r7, #7]
 800102e:	4613      	mov	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <init_task_list+0x74>)
 8001038:	441a      	add	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
		temp = temp->next;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	603b      	str	r3, [r7, #0]
	for (cnt = 1; cnt < MAX_TASKS; cnt++) {
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3301      	adds	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b3f      	cmp	r3, #63	; 0x3f
 800104e:	d9ea      	bls.n	8001026 <init_task_list+0x1e>
	}
	temp->task_type = NULL_TASK;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	22ff      	movs	r2, #255	; 0xff
 8001054:	711a      	strb	r2, [r3, #4]
	temp->next = head;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <init_task_list+0x70>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	601a      	str	r2, [r3, #0]
	last_time = HAL_GetTick();
 800105e:	f000 fa1f 	bl	80014a0 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <init_task_list+0x7c>)
 8001066:	601a      	str	r2, [r3, #0]
	num_tasks = 0;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <init_task_list+0x80>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20004e1c 	.word	0x20004e1c
 800107c:	20000a1c 	.word	0x20000a1c
 8001080:	20004e20 	.word	0x20004e20
 8001084:	20004e28 	.word	0x20004e28
 8001088:	20004e24 	.word	0x20004e24

0800108c <bring_current>:
	} else {
		return 0;
	}
}

uint32_t bring_current() {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint32_t dt;
	uint32_t current_time = HAL_GetTick();
 8001092:	f000 fa05 	bl	80014a0 <HAL_GetTick>
 8001096:	6038      	str	r0, [r7, #0]
	if (current_time < last_time) {
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <bring_current+0x8c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d206      	bcs.n	80010b0 <bring_current+0x24>
		dt = (UINT32_MAX - last_time) + current_time;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <bring_current+0x8c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	3b01      	subs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	e004      	b.n	80010ba <bring_current+0x2e>
	} else {
		dt = current_time - last_time;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <bring_current+0x8c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	607b      	str	r3, [r7, #4]
	}
	last_time = current_time;
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <bring_current+0x8c>)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6013      	str	r3, [r2, #0]
	if (num_tasks == 0) {
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <bring_current+0x90>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <bring_current+0x42>
		return 0xFFFFFFFF;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	e020      	b.n	8001110 <bring_current+0x84>
	} else {
		if (head->timeout < dt) {
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <bring_current+0x94>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d906      	bls.n	80010ea <bring_current+0x5e>
			head->timeout = 0;
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <bring_current+0x94>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			return 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e012      	b.n	8001110 <bring_current+0x84>
		} else {
			head->timeout = head->timeout - dt;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <bring_current+0x94>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <bring_current+0x94>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	1a8a      	subs	r2, r1, r2
 80010fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			return (head->timeout > MAX_WAIT) ? MAX_WAIT : head->timeout;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <bring_current+0x94>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	bf28      	it	cs
 800110c:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
		}
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20004e28 	.word	0x20004e28
 800111c:	20004e24 	.word	0x20004e24
 8001120:	20004e1c 	.word	0x20004e1c

08001124 <add_task>:

void add_task(TASK_TYPE task_type, uint8_t size, void *task, uint32_t timeout,
		uint32_t repeat_interval) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	60ba      	str	r2, [r7, #8]
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	460b      	mov	r3, r1
 8001134:	73bb      	strb	r3, [r7, #14]
	if (num_tasks == MAX_TASKS) {
 8001136:	4b67      	ldr	r3, [pc, #412]	; (80012d4 <add_task+0x1b0>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b40      	cmp	r3, #64	; 0x40
 800113c:	f000 80c5 	beq.w	80012ca <add_task+0x1a6>
		return;
	}
	uint8_t cnt;
	TASK_NODE *t, *temp;
	// If empty simply fill head with relevant data
	if (num_tasks == 0) {
 8001140:	4b64      	ldr	r3, [pc, #400]	; (80012d4 <add_task+0x1b0>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d11e      	bne.n	8001186 <add_task+0x62>
		t = head;
 8001148:	4b63      	ldr	r3, [pc, #396]	; (80012d8 <add_task+0x1b4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]
		t->task_type = task_type;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	7bfa      	ldrb	r2, [r7, #15]
 8001152:	711a      	strb	r2, [r3, #4]
		t->size = size;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	7bba      	ldrb	r2, [r7, #14]
 8001158:	715a      	strb	r2, [r3, #5]
		memcpy(t->task, (uint8_t *) task, size);
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3306      	adds	r3, #6
 800115e:	7bba      	ldrb	r2, [r7, #14]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f008 ff24 	bl	8009fb0 <memcpy>
		t->timeout = timeout;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		t->repeat_interval = repeat_interval;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001174:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		num_tasks++;
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <add_task+0x1b0>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <add_task+0x1b0>)
 8001182:	701a      	strb	r2, [r3, #0]
		return;
 8001184:	e0a2      	b.n	80012cc <add_task+0x1a8>
	}
	// If not empty take a free task (tail->next) and fill it with relevant data (except timeout, which is relative to the other tasks)
	t = tail->next;
 8001186:	4b55      	ldr	r3, [pc, #340]	; (80012dc <add_task+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	617b      	str	r3, [r7, #20]
	t->task_type = task_type;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	711a      	strb	r2, [r3, #4]
	t->size = size;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	7bba      	ldrb	r2, [r7, #14]
 8001198:	715a      	strb	r2, [r3, #5]
	memcpy(t->task, (uint8_t *) task, size);
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	3306      	adds	r3, #6
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 ff04 	bl	8009fb0 <memcpy>
	t->repeat_interval = repeat_interval;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	// Unlink the task from the list
	tail->next = t->next;
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <add_task+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	601a      	str	r2, [r3, #0]
	t->next = NULL;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
	// Process the case were the task has to be inserted at the beginning of the task list
	if (timeout < head->timeout) {
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <add_task+0x1b4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d22d      	bcs.n	800122a <add_task+0x106>
		// Get empty task that precedes the head in the circular task list
		for (cnt = 0, temp = head; cnt < MAX_TASKS - 2; cnt++, temp = temp->next);
 80011ce:	2300      	movs	r3, #0
 80011d0:	77fb      	strb	r3, [r7, #31]
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <add_task+0x1b4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	e005      	b.n	80011e6 <add_task+0xc2>
 80011da:	7ffb      	ldrb	r3, [r7, #31]
 80011dc:	3301      	adds	r3, #1
 80011de:	77fb      	strb	r3, [r7, #31]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	2b3d      	cmp	r3, #61	; 0x3d
 80011ea:	d9f6      	bls.n	80011da <add_task+0xb6>
		temp->next = t;
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	601a      	str	r2, [r3, #0]
		t->timeout = timeout;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		t->next = head;
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <add_task+0x1b4>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]
		head->timeout = head->timeout - timeout;
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <add_task+0x1b4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800120a:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <add_task+0x1b4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	1a8a      	subs	r2, r1, r2
 8001212:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		head = t;
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <add_task+0x1b4>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	6013      	str	r3, [r2, #0]
		num_tasks++;
 800121c:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <add_task+0x1b0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <add_task+0x1b0>)
 8001226:	701a      	strb	r2, [r3, #0]
		return;
 8001228:	e050      	b.n	80012cc <add_task+0x1a8>
	}
	// Iterate through task list and find where the task should be inserted based on its timeout.
	for (cnt = 0, temp = head; cnt < num_tasks; cnt++, temp = temp->next) {
 800122a:	2300      	movs	r3, #0
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <add_task+0x1b4>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	61bb      	str	r3, [r7, #24]
 8001234:	e03d      	b.n	80012b2 <add_task+0x18e>
		timeout = timeout - temp->timeout;
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
		// Handle case when we are at the end of the task list
		if (cnt == num_tasks - 1) {
 8001242:	7ffa      	ldrb	r2, [r7, #31]
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <add_task+0x1b0>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	429a      	cmp	r2, r3
 800124c:	d10e      	bne.n	800126c <add_task+0x148>
			t->timeout = timeout;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			t->next = temp->next;
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	601a      	str	r2, [r3, #0]
			temp->next = t;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	601a      	str	r2, [r3, #0]
			tail = t;
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <add_task+0x1b8>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	6013      	str	r3, [r2, #0]
			break;
 800126a:	e027      	b.n	80012bc <add_task+0x198>
		}
		// Handle normal case
		else if (timeout < temp->next->timeout) {
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d215      	bcs.n	80012a6 <add_task+0x182>
			t->timeout = timeout;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			temp->next->timeout = temp->next->timeout - timeout;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	1a8a      	subs	r2, r1, r2
 8001292:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			t->next = temp->next;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]
			temp->next = t;
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]
			break;
 80012a4:	e00a      	b.n	80012bc <add_task+0x198>
	for (cnt = 0, temp = head; cnt < num_tasks; cnt++, temp = temp->next) {
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	3301      	adds	r3, #1
 80012aa:	77fb      	strb	r3, [r7, #31]
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <add_task+0x1b0>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	7ffa      	ldrb	r2, [r7, #31]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3bc      	bcc.n	8001236 <add_task+0x112>
		}
	}
	num_tasks++;
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <add_task+0x1b0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <add_task+0x1b0>)
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e000      	b.n	80012cc <add_task+0x1a8>
		return;
 80012ca:	bf00      	nop
}
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20004e24 	.word	0x20004e24
 80012d8:	20004e1c 	.word	0x20004e1c
 80012dc:	20004e20 	.word	0x20004e20

080012e0 <handle_tasks>:

void handle_tasks (UART_HandleTypeDef *huart) {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	6078      	str	r0, [r7, #4]
	if (bring_current() > 2) {
 80012e8:	f7ff fed0 	bl	800108c <bring_current>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d83c      	bhi.n	800136c <handle_tasks+0x8c>
		return;
	}
	TASK_NODE *t = head;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <handle_tasks+0x94>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	60fb      	str	r3, [r7, #12]
	head = head->next;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <handle_tasks+0x94>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <handle_tasks+0x94>)
 8001300:	6013      	str	r3, [r2, #0]
	num_tasks--;
 8001302:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <handle_tasks+0x98>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3b01      	subs	r3, #1
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <handle_tasks+0x98>)
 800130c:	701a      	strb	r2, [r3, #0]
	switch (t->task_type) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <handle_tasks+0x48>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d000      	beq.n	800131e <handle_tasks+0x3e>
			break;
		case REQUEST_TASK:
			handle_request(huart, t);
			break;
		default:
			break;
 800131c:	e009      	b.n	8001332 <handle_tasks+0x52>
			handle_response(huart, t);
 800131e:	68f9      	ldr	r1, [r7, #12]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f82b 	bl	800137c <handle_response>
			break;
 8001326:	e004      	b.n	8001332 <handle_tasks+0x52>
			handle_request(huart, t);
 8001328:	68f9      	ldr	r1, [r7, #12]
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f831 	bl	8001392 <handle_request>
			break;
 8001330:	bf00      	nop
	}
	if (t->repeat_interval) {
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001338:	2b00      	cmp	r3, #0
 800133a:	d012      	beq.n	8001362 <handle_tasks+0x82>
		bring_current();
 800133c:	f7ff fea6 	bl	800108c <bring_current>
		add_task(t->task_type, t->size, t->task, t->repeat_interval, t->repeat_interval);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f993 0004 	ldrsb.w	r0, [r3, #4]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	7959      	ldrb	r1, [r3, #5]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1d9a      	adds	r2, r3, #6
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4623      	mov	r3, r4
 800135e:	f7ff fee1 	bl	8001124 <add_task>
	}
	t->task_type = NULL_TASK;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	22ff      	movs	r2, #255	; 0xff
 8001366:	711a      	strb	r2, [r3, #4]
	return;
 8001368:	bf00      	nop
 800136a:	e000      	b.n	800136e <handle_tasks+0x8e>
		return;
 800136c:	bf00      	nop
}
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	20004e1c 	.word	0x20004e1c
 8001378:	20004e24 	.word	0x20004e24

0800137c <handle_response>:

void handle_response (UART_HandleTypeDef *huart, TASK_NODE *t) {
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]

}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <handle_request>:

void handle_request (UART_HandleTypeDef *huart, TASK_NODE *t) {
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, &t->size, 1, 5 * SEC);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	1d59      	adds	r1, r3, #5
 80013a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80013a4:	2201      	movs	r2, #1
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f003 fdf9 	bl	8004f9e <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, t->task, t->size, 5 * SEC);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	1d99      	adds	r1, r3, #6
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f003 fdef 	bl	8004f9e <HAL_UART_Transmit>
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_Init+0x3c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_Init+0x3c>)
 80013d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013dc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
 80013e0:	f000 f97e 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e4:	2000      	movs	r0, #0
 80013e6:	f000 f80f 	bl	8001408 <HAL_InitTick>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	71fb      	strb	r3, [r7, #7]
 80013f4:	e001      	b.n	80013fa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013f6:	f7ff fa11 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_InitTick+0x68>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d022      	beq.n	8001462 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_InitTick+0x6c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_InitTick+0x68>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001428:	fbb1 f3f3 	udiv	r3, r1, r3
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f998 	bl	8001766 <HAL_SYSTICK_Config>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10f      	bne.n	800145c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	d809      	bhi.n	8001456 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001442:	2200      	movs	r2, #0
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	f04f 30ff 	mov.w	r0, #4294967295
 800144a:	f000 f954 	bl	80016f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_InitTick+0x70>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e007      	b.n	8001466 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e004      	b.n	8001466 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000008 	.word	0x20000008
 8001474:	20000000 	.word	0x20000000
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x1c>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x20>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4413      	add	r3, r2
 800148a:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_IncTick+0x1c>)
 800148c:	6013      	str	r3, [r2, #0]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20005128 	.word	0x20005128
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20005128 	.word	0x20005128

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d004      	beq.n	80014dc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_Delay+0x40>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014dc:	bf00      	nop
 80014de:	f7ff ffdf 	bl	80014a0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d8f7      	bhi.n	80014de <HAL_Delay+0x26>
  {
  }
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db10      	blt.n	80015d0 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4909      	ldr	r1, [pc, #36]	; (80015dc <__NVIC_DisableIRQ+0x40>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	3320      	adds	r3, #32
 80015c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80015cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff07 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff1c 	bl	8001544 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff0f 	bl	8001560 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff1f 	bl	800159c <__NVIC_DisableIRQ>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff94 	bl	800169c <SysTick_Config>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e098      	b.n	80018c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_DMA_Init+0x150>)
 800179a:	429a      	cmp	r2, r3
 800179c:	d80f      	bhi.n	80017be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_DMA_Init+0x154>)
 80017a6:	4413      	add	r3, r2
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_DMA_Init+0x158>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	009a      	lsls	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_DMA_Init+0x15c>)
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
 80017bc:	e00e      	b.n	80017dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_DMA_Init+0x160>)
 80017c6:	4413      	add	r3, r2
 80017c8:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <HAL_DMA_Init+0x158>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	009a      	lsls	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a42      	ldr	r2, [pc, #264]	; (80018e4 <HAL_DMA_Init+0x164>)
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2202      	movs	r2, #2
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001836:	d039      	beq.n	80018ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_DMA_Init+0x15c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d11a      	bne.n	8001878 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HAL_DMA_Init+0x168>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f003 031c 	and.w	r3, r3, #28
 800184e:	210f      	movs	r1, #15
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	4924      	ldr	r1, [pc, #144]	; (80018e8 <HAL_DMA_Init+0x168>)
 8001858:	4013      	ands	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_DMA_Init+0x168>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6859      	ldr	r1, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	f003 031c 	and.w	r3, r3, #28
 800186c:	fa01 f303 	lsl.w	r3, r1, r3
 8001870:	491d      	ldr	r1, [pc, #116]	; (80018e8 <HAL_DMA_Init+0x168>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
 8001876:	e019      	b.n	80018ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_DMA_Init+0x16c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 031c 	and.w	r3, r3, #28
 8001884:	210f      	movs	r1, #15
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	4917      	ldr	r1, [pc, #92]	; (80018ec <HAL_DMA_Init+0x16c>)
 800188e:	4013      	ands	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_DMA_Init+0x16c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f003 031c 	and.w	r3, r3, #28
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	4911      	ldr	r1, [pc, #68]	; (80018ec <HAL_DMA_Init+0x16c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40020407 	.word	0x40020407
 80018d4:	bffdfff8 	.word	0xbffdfff8
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	40020000 	.word	0x40020000
 80018e0:	bffdfbf8 	.word	0xbffdfbf8
 80018e4:	40020400 	.word	0x40020400
 80018e8:	400200a8 	.word	0x400200a8
 80018ec:	400204a8 	.word	0x400204a8

080018f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e072      	b.n	80019e8 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_DMA_DeInit+0x104>)
 800191a:	429a      	cmp	r2, r3
 800191c:	d80f      	bhi.n	800193e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_DMA_DeInit+0x108>)
 8001926:	4413      	add	r3, r2
 8001928:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_DMA_DeInit+0x10c>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	009a      	lsls	r2, r3, #2
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <HAL_DMA_DeInit+0x110>)
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
 800193c:	e00e      	b.n	800195c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_DMA_DeInit+0x114>)
 8001946:	4413      	add	r3, r2
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_DMA_DeInit+0x10c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	009a      	lsls	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_DMA_DeInit+0x118>)
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 021c 	and.w	r2, r3, #28
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <HAL_DMA_DeInit+0x110>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10d      	bne.n	800199e <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_DMA_DeInit+0x11c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f003 031c 	and.w	r3, r3, #28
 800198e:	210f      	movs	r1, #15
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	491d      	ldr	r1, [pc, #116]	; (8001a0c <HAL_DMA_DeInit+0x11c>)
 8001998:	4013      	ands	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
 800199c:	e00c      	b.n	80019b8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_DMA_DeInit+0x120>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f003 031c 	and.w	r3, r3, #28
 80019aa:	210f      	movs	r1, #15
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4917      	ldr	r1, [pc, #92]	; (8001a10 <HAL_DMA_DeInit+0x120>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40020407 	.word	0x40020407
 80019f8:	bffdfff8 	.word	0xbffdfff8
 80019fc:	cccccccd 	.word	0xcccccccd
 8001a00:	40020000 	.word	0x40020000
 8001a04:	bffdfbf8 	.word	0xbffdfbf8
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	400200a8 	.word	0x400200a8
 8001a10:	400204a8 	.word	0x400204a8

08001a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Start_IT+0x20>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e04b      	b.n	8001acc <HAL_DMA_Start_IT+0xb8>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d13a      	bne.n	8001abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f921 	bl	8001cb4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 020e 	orr.w	r2, r2, #14
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00f      	b.n	8001aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 020a 	orr.w	r2, r2, #10
 8001aaa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e005      	b.n	8001aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d005      	beq.n	8001af8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	e029      	b.n	8001b4c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 020e 	bic.w	r2, r2, #14
 8001b06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 021c 	and.w	r2, r3, #28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
    }
  }
  return status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 031c 	and.w	r3, r3, #28
 8001b76:	2204      	movs	r2, #4
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d026      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x7a>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d107      	bne.n	8001baa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0204 	bic.w	r2, r2, #4
 8001ba8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f003 021c 	and.w	r2, r3, #28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d071      	beq.n	8001caa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001bce:	e06c      	b.n	8001caa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f003 031c 	and.w	r3, r3, #28
 8001bd8:	2202      	movs	r2, #2
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02e      	beq.n	8001c42 <HAL_DMA_IRQHandler+0xec>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d029      	beq.n	8001c42 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10b      	bne.n	8001c14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 020a 	bic.w	r2, r2, #10
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f003 021c 	and.w	r2, r3, #28
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	2102      	movs	r1, #2
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d038      	beq.n	8001caa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c40:	e033      	b.n	8001caa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 031c 	and.w	r3, r3, #28
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d02a      	beq.n	8001cac <HAL_DMA_IRQHandler+0x156>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d025      	beq.n	8001cac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020e 	bic.w	r2, r2, #14
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c74:	f003 021c 	and.w	r2, r3, #28
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
}
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f003 021c 	and.w	r2, r3, #28
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b10      	cmp	r3, #16
 8001ce4:	d108      	bne.n	8001cf8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cf6:	e007      	b.n	8001d08 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	e17f      	b.n	8002024 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f000 8171 	beq.w	800201e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00b      	beq.n	8001d5c <HAL_GPIO_Init+0x48>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d50:	2b11      	cmp	r3, #17
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b12      	cmp	r3, #18
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d118      	bne.n	8001dfc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x128>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d123      	bne.n	8001e84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80ac 	beq.w	800201e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec6:	4b5e      	ldr	r3, [pc, #376]	; (8002040 <HAL_GPIO_Init+0x32c>)
 8001ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eca:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <HAL_GPIO_Init+0x32c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	; (8002040 <HAL_GPIO_Init+0x32c>)
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ede:	4a59      	ldr	r2, [pc, #356]	; (8002044 <HAL_GPIO_Init+0x330>)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f08:	d025      	beq.n	8001f56 <HAL_GPIO_Init+0x242>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4e      	ldr	r2, [pc, #312]	; (8002048 <HAL_GPIO_Init+0x334>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01f      	beq.n	8001f52 <HAL_GPIO_Init+0x23e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x23a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x236>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x232>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x22e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	; (800205c <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x22a>
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x244>
 8001f56:	2300      	movs	r3, #0
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f68:	4936      	ldr	r1, [pc, #216]	; (8002044 <HAL_GPIO_Init+0x330>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f9a:	4a31      	ldr	r2, [pc, #196]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_GPIO_Init+0x34c>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f47f ae78 	bne.w	8001d24 <HAL_GPIO_Init+0x10>
  }
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000
 8002044:	40010000 	.word	0x40010000
 8002048:	48000400 	.word	0x48000400
 800204c:	48000800 	.word	0x48000800
 8002050:	48000c00 	.word	0x48000c00
 8002054:	48001000 	.word	0x48001000
 8002058:	48001400 	.word	0x48001400
 800205c:	48001800 	.word	0x48001800
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002072:	e0cd      	b.n	8002210 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002074:	2201      	movs	r2, #1
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80c0 	beq.w	800220a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800208a:	4a68      	ldr	r2, [pc, #416]	; (800222c <HAL_GPIO_DeInit+0x1c8>)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002096:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020b2:	d025      	beq.n	8002100 <HAL_GPIO_DeInit+0x9c>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a5e      	ldr	r2, [pc, #376]	; (8002230 <HAL_GPIO_DeInit+0x1cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d01f      	beq.n	80020fc <HAL_GPIO_DeInit+0x98>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <HAL_GPIO_DeInit+0x1d0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d019      	beq.n	80020f8 <HAL_GPIO_DeInit+0x94>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <HAL_GPIO_DeInit+0x1d4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d013      	beq.n	80020f4 <HAL_GPIO_DeInit+0x90>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a5b      	ldr	r2, [pc, #364]	; (800223c <HAL_GPIO_DeInit+0x1d8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00d      	beq.n	80020f0 <HAL_GPIO_DeInit+0x8c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a5a      	ldr	r2, [pc, #360]	; (8002240 <HAL_GPIO_DeInit+0x1dc>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_GPIO_DeInit+0x88>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a59      	ldr	r2, [pc, #356]	; (8002244 <HAL_GPIO_DeInit+0x1e0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_GPIO_DeInit+0x84>
 80020e4:	2306      	movs	r3, #6
 80020e6:	e00c      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020e8:	2307      	movs	r3, #7
 80020ea:	e00a      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020ec:	2305      	movs	r3, #5
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020f4:	2303      	movs	r3, #3
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_DeInit+0x9e>
 8002100:	2300      	movs	r3, #0
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	429a      	cmp	r2, r3
 8002110:	d132      	bne.n	8002178 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002112:	4b4d      	ldr	r3, [pc, #308]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	494b      	ldr	r1, [pc, #300]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 800211c:	4013      	ands	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002120:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	4947      	ldr	r1, [pc, #284]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 800212a:	4013      	ands	r3, r2
 800212c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800212e:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	4944      	ldr	r1, [pc, #272]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 8002138:	4013      	ands	r3, r2
 800213a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800213c:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	4940      	ldr	r1, [pc, #256]	; (8002248 <HAL_GPIO_DeInit+0x1e4>)
 8002146:	4013      	ands	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800215a:	4a34      	ldr	r2, [pc, #208]	; (800222c <HAL_GPIO_DeInit+0x1c8>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	3302      	adds	r3, #2
 8002162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43da      	mvns	r2, r3
 800216a:	4830      	ldr	r0, [pc, #192]	; (800222c <HAL_GPIO_DeInit+0x1c8>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	400a      	ands	r2, r1
 8002172:	3302      	adds	r3, #2
 8002174:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	2103      	movs	r1, #3
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	08d2      	lsrs	r2, r2, #3
 80021ac:	4019      	ands	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2103      	movs	r1, #3
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	401a      	ands	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2103      	movs	r1, #3
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	401a      	ands	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fa:	2101      	movs	r1, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	f47f af2b 	bne.w	8002074 <HAL_GPIO_DeInit+0x10>
  }
}
 800221e:	bf00      	nop
 8002220:	371c      	adds	r7, #28
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	48000400 	.word	0x48000400
 8002234:	48000800 	.word	0x48000800
 8002238:	48000c00 	.word	0x48000c00
 800223c:	48001000 	.word	0x48001000
 8002240:	48001400 	.word	0x48001400
 8002244:	48001800 	.word	0x48001800
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002268:	e002      	b.n	8002270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227e:	b08f      	sub	sp, #60	; 0x3c
 8002280:	af0a      	add	r7, sp, #40	; 0x28
 8002282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e116      	b.n	80024bc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f007 fa3b 	bl	8009724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2203      	movs	r2, #3
 80022b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 f994 	bl	80065fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	687e      	ldr	r6, [r7, #4]
 80022da:	466d      	mov	r5, sp
 80022dc:	f106 0410 	add.w	r4, r6, #16
 80022e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f0:	1d33      	adds	r3, r6, #4
 80022f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f004 f881 	bl	80063fc <USB_CoreInit>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0d7      	b.n	80024bc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f004 f982 	bl	800661c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e04a      	b.n	80023b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	333d      	adds	r3, #61	; 0x3d
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	333c      	adds	r3, #60	; 0x3c
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	b298      	uxth	r0, r3
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3342      	adds	r3, #66	; 0x42
 800235a:	4602      	mov	r2, r0
 800235c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	333f      	adds	r3, #63	; 0x3f
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	3344      	adds	r3, #68	; 0x44
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	1a9b      	subs	r3, r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	3348      	adds	r3, #72	; 0x48
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3350      	adds	r3, #80	; 0x50
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
 80023b0:	3301      	adds	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d3af      	bcc.n	800231e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e044      	b.n	800244e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	3301      	adds	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3b5      	bcc.n	80023c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	687e      	ldr	r6, [r7, #4]
 8002460:	466d      	mov	r5, sp
 8002462:	f106 0410 	add.w	r4, r6, #16
 8002466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002472:	e885 0003 	stmia.w	r5, {r0, r1}
 8002476:	1d33      	adds	r3, r6, #4
 8002478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f004 f8f8 	bl	8006670 <USB_DevInit>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e014      	b.n	80024bc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 ff62 	bl	8003374 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f005 f871 	bl	800759c <USB_DevDisconnect>

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_PCD_Start+0x1c>
 80024dc:	2302      	movs	r3, #2
 80024de:	e01c      	b.n	800251a <HAL_PCD_Start+0x56>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f005 f833 	bl	800756c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f004 f864 	bl	80065d8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002522:	b590      	push	{r4, r7, lr}
 8002524:	b08d      	sub	sp, #52	; 0x34
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f005 f8da 	bl	80076f2 <USB_GetMode>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 838f 	bne.w	8002c64 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f005 f83e 	bl	80075cc <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8385 	beq.w	8002c62 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f005 f835 	bl	80075cc <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b02      	cmp	r3, #2
 800256a:	d107      	bne.n	800257c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f002 0202 	and.w	r2, r2, #2
 800257a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f005 f823 	bl	80075cc <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b10      	cmp	r3, #16
 800258e:	d161      	bne.n	8002654 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0210 	bic.w	r2, r2, #16
 800259e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d124      	bne.n	8002616 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d035      	beq.n	8002644 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f004 fe9b 	bl	8007326 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025fc:	441a      	add	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260e:	441a      	add	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	619a      	str	r2, [r3, #24]
 8002614:	e016      	b.n	8002644 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	0c5b      	lsrs	r3, r3, #17
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	2b06      	cmp	r3, #6
 8002620:	d110      	bne.n	8002644 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002628:	2208      	movs	r2, #8
 800262a:	4619      	mov	r1, r3
 800262c:	6a38      	ldr	r0, [r7, #32]
 800262e:	f004 fe7a 	bl	8007326 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263e:	441a      	add	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0210 	orr.w	r2, r2, #16
 8002652:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f004 ffb7 	bl	80075cc <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002664:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002668:	d16e      	bne.n	8002748 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 ffbd 	bl	80075f2 <USB_ReadDevAllOutEpInterrupt>
 8002678:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800267a:	e062      	b.n	8002742 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d057      	beq.n	8002736 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	4611      	mov	r1, r2
 8002690:	4618      	mov	r0, r3
 8002692:	f004 ffe2 	bl	800765a <USB_ReadDevOutEPInterrupt>
 8002696:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	461a      	mov	r2, r3
 80026b0:	2301      	movs	r3, #1
 80026b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fd82 	bl	80031c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d2:	461a      	mov	r2, r3
 80026d4:	2308      	movs	r3, #8
 80026d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fdbe 	bl	800325c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f6:	461a      	mov	r2, r3
 80026f8:	2310      	movs	r3, #16
 80026fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002712:	461a      	mov	r2, r3
 8002714:	2320      	movs	r3, #32
 8002716:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	4413      	add	r3, r2
 800272a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272e:	461a      	mov	r2, r3
 8002730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002734:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	3301      	adds	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d199      	bne.n	800267c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f004 ff3d 	bl	80075cc <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800275c:	f040 8087 	bne.w	800286e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f004 ff5e 	bl	8007626 <USB_ReadDevAllInEpInterrupt>
 800276a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002770:	e07a      	b.n	8002868 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d06f      	beq.n	800285c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f004 ff85 	bl	8007696 <USB_ReadDevInEPInterrupt>
 800278c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	2201      	movs	r2, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69f9      	ldr	r1, [r7, #28]
 80027b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027b8:	4013      	ands	r3, r2
 80027ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c8:	461a      	mov	r2, r3
 80027ca:	2301      	movs	r3, #1
 80027cc:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f007 f838 	bl	800984a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f0:	461a      	mov	r2, r3
 80027f2:	2308      	movs	r3, #8
 80027f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280c:	461a      	mov	r2, r3
 800280e:	2310      	movs	r3, #16
 8002810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002828:	461a      	mov	r2, r3
 800282a:	2340      	movs	r3, #64	; 0x40
 800282c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	4413      	add	r3, r2
 8002840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002844:	461a      	mov	r2, r3
 8002846:	2302      	movs	r3, #2
 8002848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fc29 	bl	80030ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3301      	adds	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d181      	bne.n	8002772 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f004 feaa 	bl	80075cc <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800287e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002882:	d122      	bne.n	80028ca <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d108      	bne.n	80028b4 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80028aa:	2100      	movs	r1, #0
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f007 fae9 	bl	8009e84 <HAL_PCDEx_LPM_Callback>
 80028b2:	e002      	b.n	80028ba <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f007 f835 	bl	8009924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80028c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fe7c 	bl	80075cc <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028de:	d112      	bne.n	8002906 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d102      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f006 fff1 	bl	80098d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002904:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f004 fe5e 	bl	80075cc <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291a:	d121      	bne.n	8002960 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800292a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d111      	bne.n	800295a <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	f003 020f 	and.w	r2, r3, #15
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002950:	2101      	movs	r1, #1
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f007 fa96 	bl	8009e84 <HAL_PCDEx_LPM_Callback>
 8002958:	e002      	b.n	8002960 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f006 ffbc 	bl	80098d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fe31 	bl	80075cc <USB_ReadInterrupts>
 800296a:	4603      	mov	r3, r0
 800296c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	f040 80c5 	bne.w	8002b02 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2110      	movs	r1, #16
 8002992:	4618      	mov	r0, r3
 8002994:	f003 ffb8 	bl	8006908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299c:	e056      	b.n	8002a4c <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029aa:	461a      	mov	r2, r3
 80029ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c2:	0151      	lsls	r1, r2, #5
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	440a      	add	r2, r1
 80029c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029d0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e2:	0151      	lsls	r1, r2, #5
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	440a      	add	r2, r1
 80029e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fe:	461a      	mov	r2, r3
 8002a00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a16:	0151      	lsls	r1, r2, #5
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a36:	0151      	lsls	r1, r2, #5
 8002a38:	69fa      	ldr	r2, [r7, #28]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a48:	3301      	adds	r3, #1
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3a3      	bcc.n	800299e <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7c:	69fa      	ldr	r2, [r7, #28]
 8002a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a82:	f043 030b 	orr.w	r3, r3, #11
 8002a86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a98:	f043 030b 	orr.w	r3, r3, #11
 8002a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9e:	e015      	b.n	8002acc <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ab2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ab6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac6:	f043 030b 	orr.w	r3, r3, #11
 8002aca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ade:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f004 fe31 	bl	8007754 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fd60 	bl	80075cc <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b16:	d124      	bne.n	8002b62 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f004 fdf6 	bl	800770e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 ff4f 	bl	80069ca <USB_GetDevSpeed>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681c      	ldr	r4, [r3, #0]
 8002b38:	f001 fa06 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4620      	mov	r0, r4
 8002b48:	f003 fcaa 	bl	80064a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f006 fea4 	bl	800989a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 fd30 	bl	80075cc <USB_ReadInterrupts>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d10a      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f006 fe81 	bl	800987e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f002 0208 	and.w	r2, r2, #8
 8002b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fd1b 	bl	80075cc <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f006 fef3 	bl	8009998 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f004 fd00 	bl	80075cc <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f006 fec6 	bl	8009974 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fce5 	bl	80075cc <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0c:	d10a      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f006 fed4 	bl	80099bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f004 fccf 	bl	80075cc <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d115      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f006 fec4 	bl	80099d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
 8002c60:	e000      	b.n	8002c64 <HAL_PCD_IRQHandler+0x742>
      return;
 8002c62:	bf00      	nop
    }
  }
}
 8002c64:	3734      	adds	r7, #52	; 0x34
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd90      	pop	{r4, r7, pc}

08002c6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_SetAddress+0x1a>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e013      	b.n	8002cac <HAL_PCD_SetAddress+0x42>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fc3f 	bl	8007520 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	70fb      	strb	r3, [r7, #3]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	803b      	strh	r3, [r7, #0]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	da0f      	bge.n	8002cfa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 020f 	and.w	r2, r3, #15
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
 8002cf8:	e00f      	b.n	8002d1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	3304      	adds	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d26:	883a      	ldrh	r2, [r7, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	78ba      	ldrb	r2, [r7, #2]
 8002d30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d102      	bne.n	8002d50 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_PCD_EP_Open+0xaa>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e00e      	b.n	8002d7c <HAL_PCD_EP_Open+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fe4b 	bl	8006a08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da0f      	bge.n	8002db8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3338      	adds	r3, #56	; 0x38
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
 8002db6:	e00f      	b.n	8002dd8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	78fb      	ldrb	r3, [r7, #3]
 8002dba:	f003 020f 	and.w	r2, r3, #15
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_PCD_EP_Close+0x6e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e00e      	b.n	8002e10 <HAL_PCD_EP_Close+0x8c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fe89 	bl	8006b18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3304      	adds	r3, #4
 8002e40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2200      	movs	r2, #0
 8002e58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6979      	ldr	r1, [r7, #20]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 f906 	bl	8007088 <USB_EP0StartXfer>
 8002e7c:	e005      	b.n	8002e8a <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6979      	ldr	r1, [r7, #20]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f003 ff23 	bl	8006cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	7afb      	ldrb	r3, [r7, #11]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3338      	adds	r3, #56	; 0x38
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2201      	movs	r2, #1
 8002f02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f04:	7afb      	ldrb	r3, [r7, #11]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6979      	ldr	r1, [r7, #20]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 f8b1 	bl	8007088 <USB_EP0StartXfer>
 8002f26:	e005      	b.n	8002f34 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6979      	ldr	r1, [r7, #20]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fece 	bl	8006cd0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	f003 020f 	and.w	r2, r3, #15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d901      	bls.n	8002f5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04e      	b.n	8002ffa <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	da0f      	bge.n	8002f84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3338      	adds	r3, #56	; 0x38
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	705a      	strb	r2, [r3, #1]
 8002f82:	e00d      	b.n	8002fa0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_PCD_EP_SetStall+0x82>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e01c      	b.n	8002ffa <HAL_PCD_EP_SetStall+0xbc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 f9d2 	bl	8007378 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f004 fbb2 	bl	8007754 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d901      	bls.n	8003020 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e042      	b.n	80030a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	da0f      	bge.n	8003048 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3338      	adds	r3, #56	; 0x38
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e00f      	b.n	8003068 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_PCD_EP_ClrStall+0x86>
 8003084:	2302      	movs	r3, #2
 8003086:	e00e      	b.n	80030a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	4618      	mov	r0, r3
 8003098:	f004 f9dc 	bl	8007454 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b088      	sub	sp, #32
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	3338      	adds	r3, #56	; 0x38
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d901      	bls.n	80030e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e067      	b.n	80031b6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d902      	bls.n	8003102 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3303      	adds	r3, #3
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310a:	e026      	b.n	800315a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695a      	ldr	r2, [r3, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	429a      	cmp	r2, r3
 8003120:	d902      	bls.n	8003128 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3303      	adds	r3, #3
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	68d9      	ldr	r1, [r3, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	b29b      	uxth	r3, r3
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f004 f8c1 	bl	80072c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	441a      	add	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	441a      	add	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	b29b      	uxth	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d809      	bhi.n	8003184 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003178:	429a      	cmp	r2, r3
 800317a:	d203      	bcs.n	8003184 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1c3      	bne.n	800310c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	429a      	cmp	r2, r3
 800318e:	d811      	bhi.n	80031b4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	2201      	movs	r2, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	6939      	ldr	r1, [r7, #16]
 80031ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b0:	4013      	ands	r3, r2
 80031b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	333c      	adds	r3, #60	; 0x3c
 80031d8:	3304      	adds	r3, #4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <PCD_EP_OutXfrComplete_int+0x98>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d124      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320c:	461a      	mov	r2, r3
 800320e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	e01a      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	2320      	movs	r3, #32
 8003230:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f006 faeb 	bl	8009814 <HAL_PCD_DataOutStageCallback>
 800323e:	e005      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f006 fae4 	bl	8009814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	4f54310a 	.word	0x4f54310a

0800325c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	333c      	adds	r3, #60	; 0x3c
 8003274:	3304      	adds	r3, #4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <PCD_EP_OutSetupPacket_int+0x64>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d90e      	bls.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f006 fa9d 	bl	80097f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	4f54300a 	.word	0x4f54300a

080032c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
 80032d0:	4613      	mov	r3, r2
 80032d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032e2:	883b      	ldrh	r3, [r7, #0]
 80032e4:	0419      	lsls	r1, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
 80032f0:	e028      	b.n	8003344 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	0c1b      	lsrs	r3, r3, #16
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	4413      	add	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e00d      	b.n	8003322 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3340      	adds	r3, #64	; 0x40
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	0c1b      	lsrs	r3, r3, #16
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	3301      	adds	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	3b01      	subs	r3, #1
 8003328:	429a      	cmp	r2, r3
 800332a:	d3ec      	bcc.n	8003306 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800332c:	883b      	ldrh	r3, [r7, #0]
 800332e:	0418      	lsls	r0, r3, #16
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	3b01      	subs	r3, #1
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	4302      	orrs	r2, r0
 800333c:	3340      	adds	r3, #64	; 0x40
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a6:	f043 0303 	orr.w	r3, r3, #3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40007000 	.word	0x40007000

080033d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d130      	bne.n	800344a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f4:	d038      	beq.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003404:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2232      	movs	r2, #50	; 0x32
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	3301      	adds	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341c:	e002      	b.n	8003424 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	3b01      	subs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d102      	bne.n	8003438 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f2      	bne.n	800341e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d110      	bne.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e00f      	b.n	800346a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003456:	d007      	beq.n	8003468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003460:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003466:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40007000 	.word	0x40007000
 800347c:	20000000 	.word	0x20000000
 8003480:	431bde83 	.word	0x431bde83

08003484 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800348e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003492:	6053      	str	r3, [r2, #4]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40007000 	.word	0x40007000

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e3d4      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b6:	4ba1      	ldr	r3, [pc, #644]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c0:	4b9e      	ldr	r3, [pc, #632]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80e4 	beq.w	80036a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_RCC_OscConfig+0x4a>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	f040 808b 	bne.w	80035fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 8087 	bne.w	80035fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ee:	4b93      	ldr	r3, [pc, #588]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e3ac      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	4b8c      	ldr	r3, [pc, #560]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_RCC_OscConfig+0x7c>
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351e:	e005      	b.n	800352c <HAL_RCC_OscConfig+0x88>
 8003520:	4b86      	ldr	r3, [pc, #536]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800352c:	4293      	cmp	r3, r2
 800352e:	d223      	bcs.n	8003578 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fd3f 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e38d      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003544:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7c      	ldr	r2, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b7a      	ldr	r3, [pc, #488]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4977      	ldr	r1, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	4972      	ldr	r1, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e025      	b.n	80035c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003578:	4b70      	ldr	r3, [pc, #448]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6f      	ldr	r2, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800357e:	f043 0308 	orr.w	r3, r3, #8
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	496a      	ldr	r1, [pc, #424]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003596:	4b69      	ldr	r3, [pc, #420]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	4965      	ldr	r1, [pc, #404]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fcff 	bl	8003fb8 <RCC_SetFlashLatencyFromMSIRange>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e34d      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035c4:	f000 fc36 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 80035c8:	4601      	mov	r1, r0
 80035ca:	4b5c      	ldr	r3, [pc, #368]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	4a5a      	ldr	r2, [pc, #360]	; (8003740 <HAL_RCC_OscConfig+0x29c>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	fa21 f303 	lsr.w	r3, r1, r3
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_OscConfig+0x2a0>)
 80035e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x2a4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd ff0d 	bl	8001408 <HAL_InitTick>
 80035ee:	4603      	mov	r3, r0
 80035f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d052      	beq.n	800369e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	e331      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d032      	beq.n	800366a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003604:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a4c      	ldr	r2, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003610:	f7fd ff46 	bl	80014a0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003618:	f7fd ff42 	bl	80014a0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e31a      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362a:	4b44      	ldr	r3, [pc, #272]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a40      	ldr	r2, [pc, #256]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b3e      	ldr	r3, [pc, #248]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	493b      	ldr	r1, [pc, #236]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003650:	4313      	orrs	r3, r2
 8003652:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003654:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	4936      	ldr	r1, [pc, #216]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	e01a      	b.n	80036a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a33      	ldr	r2, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003676:	f7fd ff13 	bl	80014a0 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367e:	f7fd ff0f 	bl	80014a0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e2e7      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x1da>
 800369c:	e000      	b.n	80036a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d074      	beq.n	8003796 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d005      	beq.n	80036be <HAL_RCC_OscConfig+0x21a>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b0c      	cmp	r3, #12
 80036b6:	d10e      	bne.n	80036d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d10b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d064      	beq.n	8003794 <HAL_RCC_OscConfig+0x2f0>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d160      	bne.n	8003794 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e2c4      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x24a>
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e01d      	b.n	800372a <HAL_RCC_OscConfig+0x286>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f6:	d10c      	bne.n	8003712 <HAL_RCC_OscConfig+0x26e>
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0f      	ldr	r2, [pc, #60]	; (800373c <HAL_RCC_OscConfig+0x298>)
 80036fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_RCC_OscConfig+0x298>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e00b      	b.n	800372a <HAL_RCC_OscConfig+0x286>
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b07      	ldr	r3, [pc, #28]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a06      	ldr	r2, [pc, #24]	; (800373c <HAL_RCC_OscConfig+0x298>)
 8003724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01c      	beq.n	800376c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7fd feb5 	bl	80014a0 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003738:	e011      	b.n	800375e <HAL_RCC_OscConfig+0x2ba>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	0800a9dc 	.word	0x0800a9dc
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd fea8 	bl	80014a0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e280      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375e:	4baf      	ldr	r3, [pc, #700]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x2a8>
 800376a:	e014      	b.n	8003796 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd fe98 	bl	80014a0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fd fe94 	bl	80014a0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e26c      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003786:	4ba5      	ldr	r3, [pc, #660]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x2d0>
 8003792:	e000      	b.n	8003796 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d060      	beq.n	8003864 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_OscConfig+0x310>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d119      	bne.n	80037e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d116      	bne.n	80037e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b4:	4b99      	ldr	r3, [pc, #612]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x328>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e249      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037cc:	4b93      	ldr	r3, [pc, #588]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	061b      	lsls	r3, r3, #24
 80037da:	4990      	ldr	r1, [pc, #576]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037e0:	e040      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d023      	beq.n	8003832 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ea:	4b8c      	ldr	r3, [pc, #560]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a8b      	ldr	r2, [pc, #556]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fd fe53 	bl	80014a0 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fd fe4f 	bl	80014a0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e227      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003810:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381c:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	061b      	lsls	r3, r3, #24
 800382a:	497c      	ldr	r1, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
 8003830:	e018      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003832:	4b7a      	ldr	r3, [pc, #488]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a79      	ldr	r2, [pc, #484]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800383c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd fe2f 	bl	80014a0 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003846:	f7fd fe2b 	bl	80014a0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e203      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003858:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f0      	bne.n	8003846 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03c      	beq.n	80038ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01c      	beq.n	80038b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003878:	4b68      	ldr	r3, [pc, #416]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387e:	4a67      	ldr	r2, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fd fe0a 	bl	80014a0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003890:	f7fd fe06 	bl	80014a0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1de      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a2:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0ef      	beq.n	8003890 <HAL_RCC_OscConfig+0x3ec>
 80038b0:	e01b      	b.n	80038ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b2:	4b5a      	ldr	r3, [pc, #360]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b8:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fded 	bl	80014a0 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ca:	f7fd fde9 	bl	80014a0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1c1      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ef      	bne.n	80038ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a6 	beq.w	8003a44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038fc:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10d      	bne.n	8003924 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003908:	4b44      	ldr	r3, [pc, #272]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390c:	4a43      	ldr	r2, [pc, #268]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6593      	str	r3, [r2, #88]	; 0x58
 8003914:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003924:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <HAL_RCC_OscConfig+0x57c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d118      	bne.n	8003962 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003930:	4b3b      	ldr	r3, [pc, #236]	; (8003a20 <HAL_RCC_OscConfig+0x57c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3a      	ldr	r2, [pc, #232]	; (8003a20 <HAL_RCC_OscConfig+0x57c>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393c:	f7fd fdb0 	bl	80014a0 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003944:	f7fd fdac 	bl	80014a0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e184      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003956:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <HAL_RCC_OscConfig+0x57c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d108      	bne.n	800397c <HAL_RCC_OscConfig+0x4d8>
 800396a:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800397a:	e024      	b.n	80039c6 <HAL_RCC_OscConfig+0x522>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d110      	bne.n	80039a6 <HAL_RCC_OscConfig+0x502>
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398a:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039a4:	e00f      	b.n	80039c6 <HAL_RCC_OscConfig+0x522>
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80039be:	f023 0304 	bic.w	r3, r3, #4
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fd fd67 	bl	80014a0 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd fd63 	bl	80014a0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e139      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x578>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ed      	beq.n	80039d6 <HAL_RCC_OscConfig+0x532>
 80039fa:	e01a      	b.n	8003a32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fd fd50 	bl	80014a0 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a02:	e00f      	b.n	8003a24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fd fd4c 	bl	80014a0 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d906      	bls.n	8003a24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e122      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a24:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e8      	bne.n	8003a04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8108 	beq.w	8003c5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	f040 80d0 	bne.w	8003bf8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a58:	4b83      	ldr	r3, [pc, #524]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f003 0203 	and.w	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d130      	bne.n	8003ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	3b01      	subs	r3, #1
 8003a78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d127      	bne.n	8003ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d11f      	bne.n	8003ace <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a98:	2a07      	cmp	r2, #7
 8003a9a:	bf14      	ite	ne
 8003a9c:	2201      	movne	r2, #1
 8003a9e:	2200      	moveq	r2, #0
 8003aa0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d113      	bne.n	8003ace <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d109      	bne.n	8003ace <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d06e      	beq.n	8003bac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d069      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ad4:	4b64      	ldr	r3, [pc, #400]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b7      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003af0:	4b5d      	ldr	r3, [pc, #372]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5c      	ldr	r2, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003afc:	f7fd fcd0 	bl	80014a0 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b04:	f7fd fccc 	bl	80014a0 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e0a4      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b22:	4b51      	ldr	r3, [pc, #324]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x7c8>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b32:	3a01      	subs	r2, #1
 8003b34:	0112      	lsls	r2, r2, #4
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b3c:	0212      	lsls	r2, r2, #8
 8003b3e:	4311      	orrs	r1, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b44:	0852      	lsrs	r2, r2, #1
 8003b46:	3a01      	subs	r2, #1
 8003b48:	0552      	lsls	r2, r2, #21
 8003b4a:	4311      	orrs	r1, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b50:	0852      	lsrs	r2, r2, #1
 8003b52:	3a01      	subs	r2, #1
 8003b54:	0652      	lsls	r2, r2, #25
 8003b56:	4311      	orrs	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b5c:	0912      	lsrs	r2, r2, #4
 8003b5e:	0452      	lsls	r2, r2, #17
 8003b60:	430a      	orrs	r2, r1
 8003b62:	4941      	ldr	r1, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b68:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b74:	4b3c      	ldr	r3, [pc, #240]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b80:	f7fd fc8e 	bl	80014a0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fd fc8a 	bl	80014a0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e062      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	4b33      	ldr	r3, [pc, #204]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba6:	e05a      	b.n	8003c5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e059      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bac:	4b2e      	ldr	r3, [pc, #184]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d152      	bne.n	8003c5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc4:	4b28      	ldr	r3, [pc, #160]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bd0:	f7fd fc66 	bl	80014a0 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fd fc62 	bl	80014a0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e03a      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bea:	4b1f      	ldr	r3, [pc, #124]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x734>
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d02d      	beq.n	8003c5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c0a:	4b17      	ldr	r3, [pc, #92]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d105      	bne.n	8003c22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c1c:	f023 0303 	bic.w	r3, r3, #3
 8003c20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fc35 	bl	80014a0 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fd fc31 	bl	80014a0 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e009      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_RCC_OscConfig+0x7c4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x796>
 8003c58:	e001      	b.n	8003c5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	f99d808c 	.word	0xf99d808c

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0c8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b66      	ldr	r3, [pc, #408]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d910      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b63      	ldr	r3, [pc, #396]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 0207 	bic.w	r2, r3, #7
 8003c9a:	4961      	ldr	r1, [pc, #388]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b5f      	ldr	r3, [pc, #380]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b0      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d04c      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc8:	4b56      	ldr	r3, [pc, #344]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d121      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e09e      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d115      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e092      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cf8:	4b4a      	ldr	r3, [pc, #296]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d109      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e086      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	4b46      	ldr	r3, [pc, #280]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e07e      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 0203 	bic.w	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	493f      	ldr	r1, [pc, #252]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2a:	f7fd fbb9 	bl	80014a0 <HAL_GetTick>
 8003d2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d32:	f7fd fbb5 	bl	80014a0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e066      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d48:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 020c 	and.w	r2, r3, #12
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d1eb      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	492c      	ldr	r1, [pc, #176]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d78:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d210      	bcs.n	8003da8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	4924      	ldr	r1, [pc, #144]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <HAL_RCC_ClockConfig+0x1b0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e036      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	4918      	ldr	r1, [pc, #96]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4910      	ldr	r1, [pc, #64]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003de6:	f000 f825 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8003dea:	4601      	mov	r1, r0
 8003dec:	4b0d      	ldr	r3, [pc, #52]	; (8003e24 <HAL_RCC_ClockConfig+0x1b4>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	091b      	lsrs	r3, r3, #4
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_RCC_ClockConfig+0x1b8>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	f003 031f 	and.w	r3, r3, #31
 8003dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd fafc 	bl	8001408 <HAL_InitTick>
 8003e10:	4603      	mov	r3, r0
 8003e12:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e14:	7afb      	ldrb	r3, [r7, #11]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40022000 	.word	0x40022000
 8003e24:	40021000 	.word	0x40021000
 8003e28:	0800a9dc 	.word	0x0800a9dc
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	20000004 	.word	0x20000004

08003e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b089      	sub	sp, #36	; 0x24
 8003e38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x34>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d121      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d11e      	bne.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e68:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d102      	bne.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eac:	4b24      	ldr	r3, [pc, #144]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e004      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d101      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003eb8:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d133      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d002      	beq.n	8003ed8 <HAL_RCC_GetSysClockFreq+0xa4>
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0xaa>
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eda:	617b      	str	r3, [r7, #20]
      break;
 8003edc:	e005      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ee0:	617b      	str	r3, [r7, #20]
      break;
 8003ee2:	e002      	b.n	8003eea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	617b      	str	r3, [r7, #20]
      break;
 8003ee8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	fb02 f203 	mul.w	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0e5b      	lsrs	r3, r3, #25
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3724      	adds	r7, #36	; 0x24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	0800a9f4 	.word	0x0800a9f4
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200

08003f48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000

08003f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f64:	f7ff fff0 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f68:	4601      	mov	r1, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0a1b      	lsrs	r3, r3, #8
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	0800a9ec 	.word	0x0800a9ec

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f90:	f7ff ffda 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f94:	4601      	mov	r1, r0
 8003f96:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0adb      	lsrs	r3, r3, #11
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fa2:	5cd3      	ldrb	r3, [r2, r3]
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800a9ec 	.word	0x0800a9ec

08003fb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd0:	f7ff f9f4 	bl	80033bc <HAL_PWREx_GetVoltageRange>
 8003fd4:	6178      	str	r0, [r7, #20]
 8003fd6:	e014      	b.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	4b25      	ldr	r3, [pc, #148]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	4a24      	ldr	r2, [pc, #144]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff0:	f7ff f9e4 	bl	80033bc <HAL_PWREx_GetVoltageRange>
 8003ff4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004008:	d10b      	bne.n	8004022 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d919      	bls.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2ba0      	cmp	r3, #160	; 0xa0
 8004014:	d902      	bls.n	800401c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004016:	2302      	movs	r3, #2
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	e013      	b.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800401c:	2301      	movs	r3, #1
 800401e:	613b      	str	r3, [r7, #16]
 8004020:	e010      	b.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d902      	bls.n	800402e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004028:	2303      	movs	r3, #3
 800402a:	613b      	str	r3, [r7, #16]
 800402c:	e00a      	b.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b80      	cmp	r3, #128	; 0x80
 8004032:	d102      	bne.n	800403a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004034:	2302      	movs	r3, #2
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	e004      	b.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d101      	bne.n	8004044 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004040:	2301      	movs	r3, #1
 8004042:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f023 0207 	bic.w	r2, r3, #7
 800404c:	4909      	ldr	r1, [pc, #36]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004054:	4b07      	ldr	r3, [pc, #28]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000
 8004074:	40022000 	.word	0x40022000

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004080:	2300      	movs	r3, #0
 8004082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004084:	2300      	movs	r3, #0
 8004086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409c:	d01c      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800409e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a2:	d802      	bhi.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80040a8:	e01f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x72>
 80040aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ae:	d003      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80040b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b4:	d01c      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040b6:	e018      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040b8:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a84      	ldr	r2, [pc, #528]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c4:	e015      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fab9 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3320      	adds	r3, #32
 80040dc:	2100      	movs	r1, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fba0 	bl	8004824 <RCCEx_PLLSAI2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	74fb      	strb	r3, [r7, #19]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040f8:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	4972      	ldr	r1, [pc, #456]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7cfb      	ldrb	r3, [r7, #19]
 8004112:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004128:	d01c      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800412a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800412e:	d802      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004134:	e01f      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004136:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413a:	d003      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800413c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004140:	d01c      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004142:	e018      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004144:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4a61      	ldr	r2, [pc, #388]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004150:	e015      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fa73 	bl	8004644 <RCCEx_PLLSAI1_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004162:	e00c      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3320      	adds	r3, #32
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb5a 	bl	8004824 <RCCEx_PLLSAI2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004174:	e003      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	74fb      	strb	r3, [r7, #19]
      break;
 800417a:	e000      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800417c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004184:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004192:	494f      	ldr	r1, [pc, #316]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a0 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b2:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	; 0x58
 80041d4:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60bb      	str	r3, [r7, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e0:	2301      	movs	r3, #1
 80041e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b3b      	ldr	r3, [pc, #236]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f0:	f7fd f956 	bl	80014a0 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041f6:	e009      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fd f952 	bl	80014a0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	74fb      	strb	r3, [r7, #19]
        break;
 800420a:	e005      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004218:	7cfb      	ldrb	r3, [r7, #19]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d15c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800421e:	4b2c      	ldr	r3, [pc, #176]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01f      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d019      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800423c:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004248:	4b21      	ldr	r3, [pc, #132]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a20      	ldr	r2, [pc, #128]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004268:	4a19      	ldr	r2, [pc, #100]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fd f911 	bl	80014a0 <HAL_GetTick>
 800427e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004280:	e00b      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd f90d 	bl	80014a0 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d902      	bls.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	74fb      	strb	r3, [r7, #19]
            break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ec      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042be:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042c6:	e009      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042c8:	7cfb      	ldrb	r3, [r7, #19]
 80042ca:	74bb      	strb	r3, [r7, #18]
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042dc:	7c7b      	ldrb	r3, [r7, #17]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4b9e      	ldr	r3, [pc, #632]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	4a9d      	ldr	r2, [pc, #628]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fa:	4b98      	ldr	r3, [pc, #608]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4994      	ldr	r1, [pc, #592]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800431c:	4b8f      	ldr	r3, [pc, #572]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 020c 	bic.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432a:	498c      	ldr	r1, [pc, #560]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800433e:	4b87      	ldr	r3, [pc, #540]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	4983      	ldr	r1, [pc, #524]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004360:	4b7e      	ldr	r3, [pc, #504]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436e:	497b      	ldr	r1, [pc, #492]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004390:	4972      	ldr	r1, [pc, #456]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a4:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	496a      	ldr	r1, [pc, #424]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	4961      	ldr	r1, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043e8:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f6:	4959      	ldr	r1, [pc, #356]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440a:	4b54      	ldr	r3, [pc, #336]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	4950      	ldr	r1, [pc, #320]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	4948      	ldr	r1, [pc, #288]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800444e:	4b43      	ldr	r3, [pc, #268]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	493f      	ldr	r1, [pc, #252]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d028      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004470:	4b3a      	ldr	r3, [pc, #232]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	4937      	ldr	r1, [pc, #220]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004490:	4b32      	ldr	r3, [pc, #200]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	4a31      	ldr	r2, [pc, #196]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449a:	60d3      	str	r3, [r2, #12]
 800449c:	e011      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2101      	movs	r1, #1
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8c8 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	491f      	ldr	r1, [pc, #124]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ec:	d106      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ee:	4b1b      	ldr	r3, [pc, #108]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	4a1a      	ldr	r2, [pc, #104]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f8:	60d3      	str	r3, [r2, #12]
 80044fa:	e011      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004504:	d10c      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	2101      	movs	r1, #1
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f899 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d02b      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	4908      	ldr	r1, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d109      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b03      	ldr	r3, [pc, #12]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a02      	ldr	r2, [pc, #8]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
 8004558:	e014      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004568:	d10c      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3304      	adds	r3, #4
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 f867 	bl	8004644 <RCCEx_PLLSAI1_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457a:	7cfb      	ldrb	r3, [r7, #19]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	4928      	ldr	r1, [pc, #160]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ae:	d10d      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3304      	adds	r3, #4
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f844 	bl	8004644 <RCCEx_PLLSAI1_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d014      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045c6:	7cfb      	ldrb	r3, [r7, #19]
 80045c8:	74bb      	strb	r3, [r7, #18]
 80045ca:	e011      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3320      	adds	r3, #32
 80045da:	2102      	movs	r1, #2
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f921 	bl	8004824 <RCCEx_PLLSAI2_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460a:	490d      	ldr	r1, [pc, #52]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800462e:	4904      	ldr	r1, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004636:	7cbb      	ldrb	r3, [r7, #18]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000

08004644 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004652:	4b73      	ldr	r3, [pc, #460]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d018      	beq.n	8004690 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800465e:	4b70      	ldr	r3, [pc, #448]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d10d      	bne.n	800468a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
       ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004676:	4b6a      	ldr	r3, [pc, #424]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
       ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d044      	beq.n	8004714 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
 800468e:	e041      	b.n	8004714 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d00c      	beq.n	80046b2 <RCCEx_PLLSAI1_Config+0x6e>
 8004698:	2b03      	cmp	r3, #3
 800469a:	d013      	beq.n	80046c4 <RCCEx_PLLSAI1_Config+0x80>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d120      	bne.n	80046e2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a0:	4b5f      	ldr	r3, [pc, #380]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11d      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b0:	e01a      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b2:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c2:	e013      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c4:	4b56      	ldr	r3, [pc, #344]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10f      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d0:	4b53      	ldr	r3, [pc, #332]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e0:	e006      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	73fb      	strb	r3, [r7, #15]
      break;
 80046e6:	e004      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046e8:	bf00      	nop
 80046ea:	e002      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046ec:	bf00      	nop
 80046ee:	e000      	b.n	80046f2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046f0:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10d      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046f8:	4b49      	ldr	r3, [pc, #292]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	3b01      	subs	r3, #1
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	430b      	orrs	r3, r1
 800470e:	4944      	ldr	r1, [pc, #272]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004710:	4313      	orrs	r3, r2
 8004712:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d17d      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800471a:	4b41      	ldr	r3, [pc, #260]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a40      	ldr	r2, [pc, #256]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004720:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004726:	f7fc febb 	bl	80014a0 <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800472c:	e009      	b.n	8004742 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800472e:	f7fc feb7 	bl	80014a0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d902      	bls.n	8004742 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	73fb      	strb	r3, [r7, #15]
        break;
 8004740:	e005      	b.n	800474e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004742:	4b37      	ldr	r3, [pc, #220]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1ef      	bne.n	800472e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d160      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d111      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6892      	ldr	r2, [r2, #8]
 800476a:	0211      	lsls	r1, r2, #8
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	68d2      	ldr	r2, [r2, #12]
 8004770:	0912      	lsrs	r2, r2, #4
 8004772:	0452      	lsls	r2, r2, #17
 8004774:	430a      	orrs	r2, r1
 8004776:	492a      	ldr	r1, [pc, #168]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]
 800477c:	e027      	b.n	80047ce <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d112      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004784:	4b26      	ldr	r3, [pc, #152]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800478c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6892      	ldr	r2, [r2, #8]
 8004794:	0211      	lsls	r1, r2, #8
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6912      	ldr	r2, [r2, #16]
 800479a:	0852      	lsrs	r2, r2, #1
 800479c:	3a01      	subs	r2, #1
 800479e:	0552      	lsls	r2, r2, #21
 80047a0:	430a      	orrs	r2, r1
 80047a2:	491f      	ldr	r1, [pc, #124]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	610b      	str	r3, [r1, #16]
 80047a8:	e011      	b.n	80047ce <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6892      	ldr	r2, [r2, #8]
 80047ba:	0211      	lsls	r1, r2, #8
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6952      	ldr	r2, [r2, #20]
 80047c0:	0852      	lsrs	r2, r2, #1
 80047c2:	3a01      	subs	r2, #1
 80047c4:	0652      	lsls	r2, r2, #25
 80047c6:	430a      	orrs	r2, r1
 80047c8:	4915      	ldr	r1, [pc, #84]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a13      	ldr	r2, [pc, #76]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fc fe61 	bl	80014a0 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e0:	e009      	b.n	80047f6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e2:	f7fc fe5d 	bl	80014a0 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d902      	bls.n	80047f6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	73fb      	strb	r3, [r7, #15]
          break;
 80047f4:	e005      	b.n	8004802 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0ef      	beq.n	80047e2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4903      	ldr	r1, [pc, #12]	; (8004820 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004816:	7bfb      	ldrb	r3, [r7, #15]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000

08004824 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004832:	4b68      	ldr	r3, [pc, #416]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800483e:	4b65      	ldr	r3, [pc, #404]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0203 	and.w	r2, r3, #3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d10d      	bne.n	800486a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
       ||
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004856:	4b5f      	ldr	r3, [pc, #380]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	091b      	lsrs	r3, r3, #4
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
       ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d044      	beq.n	80048f4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e041      	b.n	80048f4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b02      	cmp	r3, #2
 8004876:	d00c      	beq.n	8004892 <RCCEx_PLLSAI2_Config+0x6e>
 8004878:	2b03      	cmp	r3, #3
 800487a:	d013      	beq.n	80048a4 <RCCEx_PLLSAI2_Config+0x80>
 800487c:	2b01      	cmp	r3, #1
 800487e:	d120      	bne.n	80048c2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004880:	4b54      	ldr	r3, [pc, #336]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11d      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e01a      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004892:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489a:	2b00      	cmp	r3, #0
 800489c:	d116      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a2:	e013      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10f      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b0:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c0:	e006      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      break;
 80048c6:	e004      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048c8:	bf00      	nop
 80048ca:	e002      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048cc:	bf00      	nop
 80048ce:	e000      	b.n	80048d2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10d      	bne.n	80048f4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6819      	ldr	r1, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	430b      	orrs	r3, r1
 80048ee:	4939      	ldr	r1, [pc, #228]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d167      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a35      	ldr	r2, [pc, #212]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004906:	f7fc fdcb 	bl	80014a0 <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800490c:	e009      	b.n	8004922 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800490e:	f7fc fdc7 	bl	80014a0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d902      	bls.n	8004922 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	73fb      	strb	r3, [r7, #15]
        break;
 8004920:	e005      	b.n	800492e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ef      	bne.n	800490e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d14a      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d111      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493a:	4b26      	ldr	r3, [pc, #152]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	0211      	lsls	r1, r2, #8
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68d2      	ldr	r2, [r2, #12]
 8004950:	0912      	lsrs	r2, r2, #4
 8004952:	0452      	lsls	r2, r2, #17
 8004954:	430a      	orrs	r2, r1
 8004956:	491f      	ldr	r1, [pc, #124]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004958:	4313      	orrs	r3, r2
 800495a:	614b      	str	r3, [r1, #20]
 800495c:	e011      	b.n	8004982 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004966:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6892      	ldr	r2, [r2, #8]
 800496e:	0211      	lsls	r1, r2, #8
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6912      	ldr	r2, [r2, #16]
 8004974:	0852      	lsrs	r2, r2, #1
 8004976:	3a01      	subs	r2, #1
 8004978:	0652      	lsls	r2, r2, #25
 800497a:	430a      	orrs	r2, r1
 800497c:	4915      	ldr	r1, [pc, #84]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498e:	f7fc fd87 	bl	80014a0 <HAL_GetTick>
 8004992:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004994:	e009      	b.n	80049aa <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004996:	f7fc fd83 	bl	80014a0 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d902      	bls.n	80049aa <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	73fb      	strb	r3, [r7, #15]
          break;
 80049a8:	e005      	b.n	80049b6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049aa:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ef      	beq.n	8004996 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d106      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049be:	695a      	ldr	r2, [r3, #20]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e01d      	b.n	8004a26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f815 	bl	8004a2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 f986 	bl	8004d28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_TIM_Base_Start_IT+0x50>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d00b      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x42>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	00010007 	.word	0x00010007

08004a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0202 	mvn.w	r2, #2
 8004ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f905 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8f7 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f908 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0204 	mvn.w	r2, #4
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8db 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8cd 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8de 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0208 	mvn.w	r2, #8
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2204      	movs	r2, #4
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f003 0303 	and.w	r3, r3, #3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8b1 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8a3 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f8b4 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2b10      	cmp	r3, #16
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0210 	mvn.w	r2, #16
 8004bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f887 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f879 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f88a 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10e      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0201 	mvn.w	r2, #1
 8004c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f004 fb48 	bl	80092ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d10e      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c34:	2b80      	cmp	r3, #128	; 0x80
 8004c36:	d107      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f914 	bl	8004e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f907 	bl	8004e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d10e      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f838 	bl	8004d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0220 	mvn.w	r2, #32
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8c7 	bl	8004e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d00f      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3d      	ldr	r2, [pc, #244]	; (8004e40 <TIM_Base_SetConfig+0x118>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	; (8004e44 <TIM_Base_SetConfig+0x11c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3b      	ldr	r2, [pc, #236]	; (8004e48 <TIM_Base_SetConfig+0x120>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3a      	ldr	r2, [pc, #232]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d108      	bne.n	8004d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d01b      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <TIM_Base_SetConfig+0x118>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d017      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <TIM_Base_SetConfig+0x11c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2a      	ldr	r2, [pc, #168]	; (8004e48 <TIM_Base_SetConfig+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00f      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <TIM_Base_SetConfig+0x128>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d007      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d003      	beq.n	8004dc2 <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <TIM_Base_SetConfig+0x130>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d108      	bne.n	8004dd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a10      	ldr	r2, [pc, #64]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0xf8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a12      	ldr	r2, [pc, #72]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0xf8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a11      	ldr	r2, [pc, #68]	; (8004e50 <TIM_Base_SetConfig+0x128>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0xf8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <TIM_Base_SetConfig+0x130>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800

08004e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e040      	b.n	8004f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fcd2 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fc30 	bl	800573c <UART_SetConfig>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e022      	b.n	8004f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 ff96 	bl	8005e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f001 f81d 	bl	8005f64 <UART_CheckIdleState>
 8004f2a:	4603      	mov	r3, r0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e027      	b.n	8004f96 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2224      	movs	r2, #36	; 0x24
 8004f4a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fb fd21 	bl	80009bc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	f040 8081 	bne.w	80050ba <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_UART_Transmit+0x26>
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e079      	b.n	80050bc <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Transmit+0x38>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e072      	b.n	80050bc <HAL_UART_Transmit+0x11e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2221      	movs	r2, #33	; 0x21
 8004fe8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004fea:	f7fc fa59 	bl	80014a0 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d108      	bne.n	800501c <HAL_UART_Transmit+0x7e>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	e003      	b.n	8005024 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800502c:	e02d      	b.n	800508a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	; 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 ffd8 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e039      	b.n	80050bc <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	881a      	ldrh	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800505a:	b292      	uxth	r2, r2
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	3302      	adds	r3, #2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	e008      	b.n	8005078 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b292      	uxth	r2, r2
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3301      	adds	r3, #1
 8005076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1cb      	bne.n	800502e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	2140      	movs	r1, #64	; 0x40
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 ffa4 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e005      	b.n	80050bc <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	; 0x28
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	4613      	mov	r3, r2
 80050d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d8:	2b20      	cmp	r3, #32
 80050da:	f040 80bb 	bne.w	8005254 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_UART_Receive+0x26>
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e0b3      	b.n	8005256 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Receive+0x38>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0ac      	b.n	8005256 <HAL_UART_Receive+0x192>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2222      	movs	r2, #34	; 0x22
 800510e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005110:	f7fc f9c6 	bl	80014a0 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	88fa      	ldrh	r2, [r7, #6]
 800511a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d10e      	bne.n	800514e <HAL_UART_Receive+0x8a>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d105      	bne.n	8005144 <HAL_UART_Receive+0x80>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800513e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005142:	e02d      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	; 0xff
 8005148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800514c:	e028      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <HAL_UART_Receive+0xae>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d104      	bne.n	8005168 <HAL_UART_Receive+0xa4>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005166:	e01b      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	227f      	movs	r2, #127	; 0x7f
 800516c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005170:	e016      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800517a:	d10d      	bne.n	8005198 <HAL_UART_Receive+0xd4>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <HAL_UART_Receive+0xca>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	227f      	movs	r2, #127	; 0x7f
 8005188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800518c:	e008      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	223f      	movs	r2, #63	; 0x3f
 8005192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005196:	e003      	b.n	80051a0 <HAL_UART_Receive+0xdc>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b0:	d108      	bne.n	80051c4 <HAL_UART_Receive+0x100>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e003      	b.n	80051cc <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80051d4:	e033      	b.n	800523e <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	2120      	movs	r1, #32
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 ff04 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e032      	b.n	8005256 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10c      	bne.n	8005210 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	8a7b      	ldrh	r3, [r7, #18]
 8005200:	4013      	ands	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	3302      	adds	r3, #2
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	e00d      	b.n	800522c <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005216:	b29b      	uxth	r3, r3
 8005218:	b2da      	uxtb	r2, r3
 800521a:	8a7b      	ldrh	r3, [r7, #18]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	4013      	ands	r3, r2
 8005220:	b2da      	uxtb	r2, r3
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3301      	adds	r3, #1
 800522a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c5      	bne.n	80051d6 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e000      	b.n	8005256 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005254:	2302      	movs	r3, #2
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005272:	2b20      	cmp	r3, #32
 8005274:	f040 808a 	bne.w	800538c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_UART_Receive_IT+0x24>
 800527e:	88fb      	ldrh	r3, [r7, #6]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e082      	b.n	800538e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_UART_Receive_IT+0x36>
 8005292:	2302      	movs	r3, #2
 8005294:	e07b      	b.n	800538e <HAL_UART_Receive_IT+0x12e>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	d10e      	bne.n	80052e2 <HAL_UART_Receive_IT+0x82>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <HAL_UART_Receive_IT+0x78>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d6:	e02d      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	22ff      	movs	r2, #255	; 0xff
 80052dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e0:	e028      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10d      	bne.n	8005306 <HAL_UART_Receive_IT+0xa6>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Receive_IT+0x9c>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052fa:	e01b      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	227f      	movs	r2, #127	; 0x7f
 8005300:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005304:	e016      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530e:	d10d      	bne.n	800532c <HAL_UART_Receive_IT+0xcc>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_UART_Receive_IT+0xc2>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	227f      	movs	r2, #127	; 0x7f
 800531c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005320:	e008      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	223f      	movs	r2, #63	; 0x3f
 8005326:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800532a:	e003      	b.n	8005334 <HAL_UART_Receive_IT+0xd4>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2222      	movs	r2, #34	; 0x22
 800533e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d107      	bne.n	800536a <HAL_UART_Receive_IT+0x10a>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4a0d      	ldr	r2, [pc, #52]	; (800539c <HAL_UART_Receive_IT+0x13c>)
 8005366:	661a      	str	r2, [r3, #96]	; 0x60
 8005368:	e002      	b.n	8005370 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <HAL_UART_Receive_IT+0x140>)
 800536e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005386:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	e000      	b.n	800538e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800538c:	2302      	movs	r3, #2
  }
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	0800633f 	.word	0x0800633f
 80053a0:	08006295 	.word	0x08006295

080053a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d164      	bne.n	8005484 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_UART_Transmit_DMA+0x22>
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e05d      	b.n	8005486 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Transmit_DMA+0x34>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e056      	b.n	8005486 <HAL_UART_Transmit_DMA+0xe2>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2221      	movs	r2, #33	; 0x21
 8005400:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02a      	beq.n	8005460 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800540e:	4a20      	ldr	r2, [pc, #128]	; (8005490 <HAL_UART_Transmit_DMA+0xec>)
 8005410:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005416:	4a1f      	ldr	r2, [pc, #124]	; (8005494 <HAL_UART_Transmit_DMA+0xf0>)
 8005418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541e:	4a1e      	ldr	r2, [pc, #120]	; (8005498 <HAL_UART_Transmit_DMA+0xf4>)
 8005420:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005426:	2200      	movs	r2, #0
 8005428:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005432:	4619      	mov	r1, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3328      	adds	r3, #40	; 0x28
 800543a:	461a      	mov	r2, r3
 800543c:	88fb      	ldrh	r3, [r7, #6]
 800543e:	f7fc fae9 	bl	8001a14 <HAL_DMA_Start_IT>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2210      	movs	r2, #16
 800544c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e012      	b.n	8005486 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2240      	movs	r2, #64	; 0x40
 8005466:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800547e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	0800614f 	.word	0x0800614f
 8005494:	080061a3 	.word	0x080061a3
 8005498:	080061bf 	.word	0x080061bf

0800549c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	f640 030f 	movw	r3, #2063	; 0x80f
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d113      	bne.n	80054f4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8114 	beq.w	8005712 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	4798      	blx	r3
      }
      return;
 80054f2:	e10e      	b.n	8005712 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80d6 	beq.w	80056a8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 80cb 	beq.w	80056a8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00e      	beq.n	800553a <HAL_UART_IRQHandler+0x9e>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005532:	f043 0201 	orr.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <HAL_UART_IRQHandler+0xc6>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2202      	movs	r2, #2
 8005554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555a:	f043 0204 	orr.w	r2, r3, #4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <HAL_UART_IRQHandler+0xee>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2204      	movs	r2, #4
 800557c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	f043 0202 	orr.w	r2, r3, #2
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	d104      	bne.n	80055a8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2208      	movs	r2, #8
 80055ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b4:	f043 0208 	orr.w	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <HAL_UART_IRQHandler+0x14a>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8093 	beq.w	8005716 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005618:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d004      	beq.n	8005632 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800562e:	2b00      	cmp	r3, #0
 8005630:	d031      	beq.n	8005696 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fd6b 	bl	800610e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d123      	bne.n	800568e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005654:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d013      	beq.n	8005686 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005662:	4a30      	ldr	r2, [pc, #192]	; (8005724 <HAL_UART_IRQHandler+0x288>)
 8005664:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566a:	4618      	mov	r0, r3
 800566c:	f7fc fa32 	bl	8001ad4 <HAL_DMA_Abort_IT>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d016      	beq.n	80056a4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	e00e      	b.n	80056a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 ff22 	bl	80094d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800568c:	e00a      	b.n	80056a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f003 ff1e 	bl	80094d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	e006      	b.n	80056a4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f003 ff1a 	bl	80094d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80056a2:	e038      	b.n	8005716 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	bf00      	nop
    return;
 80056a6:	e036      	b.n	8005716 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00d      	beq.n	80056ce <HAL_UART_IRQHandler+0x232>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fe8e 	bl	80063e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056cc:	e026      	b.n	800571c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00d      	beq.n	80056f4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d017      	beq.n	800571a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
    }
    return;
 80056f2:	e012      	b.n	800571a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00e      	beq.n	800571c <HAL_UART_IRQHandler+0x280>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d009      	beq.n	800571c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fdaa 	bl	8006262 <UART_EndTransmit_IT>
    return;
 800570e:	bf00      	nop
 8005710:	e004      	b.n	800571c <HAL_UART_IRQHandler+0x280>
      return;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <HAL_UART_IRQHandler+0x280>
    return;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HAL_UART_IRQHandler+0x280>
    return;
 800571a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	08006237 	.word	0x08006237

08005728 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800573c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005740:	b08a      	sub	sp, #40	; 0x28
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	4313      	orrs	r3, r2
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4bb8      	ldr	r3, [pc, #736]	; (8005a54 <UART_SetConfig+0x318>)
 8005772:	4013      	ands	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800577a:	430b      	orrs	r3, r1
 800577c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4aae      	ldr	r2, [pc, #696]	; (8005a58 <UART_SetConfig+0x31c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	4313      	orrs	r3, r2
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4aa5      	ldr	r2, [pc, #660]	; (8005a5c <UART_SetConfig+0x320>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d126      	bne.n	800581a <UART_SetConfig+0xde>
 80057cc:	4ba4      	ldr	r3, [pc, #656]	; (8005a60 <UART_SetConfig+0x324>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d81a      	bhi.n	8005810 <UART_SetConfig+0xd4>
 80057da:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0xa4>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005801 	.word	0x08005801
 80057e8:	080057f9 	.word	0x080057f9
 80057ec:	08005809 	.word	0x08005809
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f6:	e105      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80057f8:	2302      	movs	r3, #2
 80057fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fe:	e101      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005800:	2304      	movs	r3, #4
 8005802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005806:	e0fd      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005808:	2308      	movs	r3, #8
 800580a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800580e:	e0f9      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005810:	2310      	movs	r3, #16
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005816:	bf00      	nop
 8005818:	e0f4      	b.n	8005a04 <UART_SetConfig+0x2c8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a91      	ldr	r2, [pc, #580]	; (8005a64 <UART_SetConfig+0x328>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d138      	bne.n	8005896 <UART_SetConfig+0x15a>
 8005824:	4b8e      	ldr	r3, [pc, #568]	; (8005a60 <UART_SetConfig+0x324>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f003 030c 	and.w	r3, r3, #12
 800582e:	2b0c      	cmp	r3, #12
 8005830:	d82c      	bhi.n	800588c <UART_SetConfig+0x150>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <UART_SetConfig+0xfc>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	0800586d 	.word	0x0800586d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800587d 	.word	0x0800587d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	08005875 	.word	0x08005875
 800585c:	0800588d 	.word	0x0800588d
 8005860:	0800588d 	.word	0x0800588d
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005885 	.word	0x08005885
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005872:	e0c7      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005874:	2302      	movs	r3, #2
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800587a:	e0c3      	b.n	8005a04 <UART_SetConfig+0x2c8>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005882:	e0bf      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800588a:	e0bb      	b.n	8005a04 <UART_SetConfig+0x2c8>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005892:	bf00      	nop
 8005894:	e0b6      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a73      	ldr	r2, [pc, #460]	; (8005a68 <UART_SetConfig+0x32c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d125      	bne.n	80058ec <UART_SetConfig+0x1b0>
 80058a0:	4b6f      	ldr	r3, [pc, #444]	; (8005a60 <UART_SetConfig+0x324>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d011      	beq.n	80058d2 <UART_SetConfig+0x196>
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d802      	bhi.n	80058b8 <UART_SetConfig+0x17c>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <UART_SetConfig+0x186>
 80058b6:	e014      	b.n	80058e2 <UART_SetConfig+0x1a6>
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d006      	beq.n	80058ca <UART_SetConfig+0x18e>
 80058bc:	2b30      	cmp	r3, #48	; 0x30
 80058be:	d00c      	beq.n	80058da <UART_SetConfig+0x19e>
 80058c0:	e00f      	b.n	80058e2 <UART_SetConfig+0x1a6>
 80058c2:	2300      	movs	r3, #0
 80058c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c8:	e09c      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80058ca:	2302      	movs	r3, #2
 80058cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d0:	e098      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80058d2:	2304      	movs	r3, #4
 80058d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058d8:	e094      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80058da:	2308      	movs	r3, #8
 80058dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e0:	e090      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80058e2:	2310      	movs	r3, #16
 80058e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e8:	bf00      	nop
 80058ea:	e08b      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a5e      	ldr	r2, [pc, #376]	; (8005a6c <UART_SetConfig+0x330>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d125      	bne.n	8005942 <UART_SetConfig+0x206>
 80058f6:	4b5a      	ldr	r3, [pc, #360]	; (8005a60 <UART_SetConfig+0x324>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d011      	beq.n	8005928 <UART_SetConfig+0x1ec>
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d802      	bhi.n	800590e <UART_SetConfig+0x1d2>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <UART_SetConfig+0x1dc>
 800590c:	e014      	b.n	8005938 <UART_SetConfig+0x1fc>
 800590e:	2b80      	cmp	r3, #128	; 0x80
 8005910:	d006      	beq.n	8005920 <UART_SetConfig+0x1e4>
 8005912:	2bc0      	cmp	r3, #192	; 0xc0
 8005914:	d00c      	beq.n	8005930 <UART_SetConfig+0x1f4>
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x1fc>
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591e:	e071      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005920:	2302      	movs	r3, #2
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005926:	e06d      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800592e:	e069      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005936:	e065      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800593e:	bf00      	nop
 8005940:	e060      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a4a      	ldr	r2, [pc, #296]	; (8005a70 <UART_SetConfig+0x334>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d129      	bne.n	80059a0 <UART_SetConfig+0x264>
 800594c:	4b44      	ldr	r3, [pc, #272]	; (8005a60 <UART_SetConfig+0x324>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d014      	beq.n	8005986 <UART_SetConfig+0x24a>
 800595c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005960:	d802      	bhi.n	8005968 <UART_SetConfig+0x22c>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <UART_SetConfig+0x23a>
 8005966:	e016      	b.n	8005996 <UART_SetConfig+0x25a>
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d007      	beq.n	800597e <UART_SetConfig+0x242>
 800596e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005972:	d00c      	beq.n	800598e <UART_SetConfig+0x252>
 8005974:	e00f      	b.n	8005996 <UART_SetConfig+0x25a>
 8005976:	2300      	movs	r3, #0
 8005978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597c:	e042      	b.n	8005a04 <UART_SetConfig+0x2c8>
 800597e:	2302      	movs	r3, #2
 8005980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005984:	e03e      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005986:	2304      	movs	r3, #4
 8005988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800598c:	e03a      	b.n	8005a04 <UART_SetConfig+0x2c8>
 800598e:	2308      	movs	r3, #8
 8005990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005994:	e036      	b.n	8005a04 <UART_SetConfig+0x2c8>
 8005996:	2310      	movs	r3, #16
 8005998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800599c:	bf00      	nop
 800599e:	e031      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a2c      	ldr	r2, [pc, #176]	; (8005a58 <UART_SetConfig+0x31c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d129      	bne.n	80059fe <UART_SetConfig+0x2c2>
 80059aa:	4b2d      	ldr	r3, [pc, #180]	; (8005a60 <UART_SetConfig+0x324>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d014      	beq.n	80059e4 <UART_SetConfig+0x2a8>
 80059ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059be:	d802      	bhi.n	80059c6 <UART_SetConfig+0x28a>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <UART_SetConfig+0x298>
 80059c4:	e016      	b.n	80059f4 <UART_SetConfig+0x2b8>
 80059c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ca:	d007      	beq.n	80059dc <UART_SetConfig+0x2a0>
 80059cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059d0:	d00c      	beq.n	80059ec <UART_SetConfig+0x2b0>
 80059d2:	e00f      	b.n	80059f4 <UART_SetConfig+0x2b8>
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059da:	e013      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e00f      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ea:	e00b      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f2:	e007      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <UART_SetConfig+0x2c8>
 80059fe:	2310      	movs	r3, #16
 8005a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <UART_SetConfig+0x31c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	f040 80fe 	bne.w	8005c0c <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d837      	bhi.n	8005a88 <UART_SetConfig+0x34c>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <UART_SetConfig+0x2e4>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a89 	.word	0x08005a89
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a89 	.word	0x08005a89
 8005a30:	08005a79 	.word	0x08005a79
 8005a34:	08005a89 	.word	0x08005a89
 8005a38:	08005a89 	.word	0x08005a89
 8005a3c:	08005a89 	.word	0x08005a89
 8005a40:	08005a81 	.word	0x08005a81
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005a44:	f7fe fa8c 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005a48:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a4a:	e020      	b.n	8005a8e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <UART_SetConfig+0x338>)
 8005a4e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a50:	e01d      	b.n	8005a8e <UART_SetConfig+0x352>
 8005a52:	bf00      	nop
 8005a54:	efff69f3 	.word	0xefff69f3
 8005a58:	40008000 	.word	0x40008000
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40004400 	.word	0x40004400
 8005a68:	40004800 	.word	0x40004800
 8005a6c:	40004c00 	.word	0x40004c00
 8005a70:	40005000 	.word	0x40005000
 8005a74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005a78:	f7fe f9dc 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8005a7c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a7e:	e006      	b.n	8005a8e <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a84:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005a86:	e002      	b.n	8005a8e <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	76fb      	strb	r3, [r7, #27]
        break;
 8005a8c:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 81b9 	beq.w	8005e08 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d305      	bcc.n	8005ab2 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d902      	bls.n	8005ab8 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	76fb      	strb	r3, [r7, #27]
 8005ab6:	e1a7      	b.n	8005e08 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	f200 8092 	bhi.w	8005be6 <UART_SetConfig+0x4aa>
 8005ac2:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0x38c>)
 8005ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac8:	08005aed 	.word	0x08005aed
 8005acc:	08005be7 	.word	0x08005be7
 8005ad0:	08005b3b 	.word	0x08005b3b
 8005ad4:	08005be7 	.word	0x08005be7
 8005ad8:	08005b6f 	.word	0x08005b6f
 8005adc:	08005be7 	.word	0x08005be7
 8005ae0:	08005be7 	.word	0x08005be7
 8005ae4:	08005be7 	.word	0x08005be7
 8005ae8:	08005bbd 	.word	0x08005bbd
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fa38 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005af0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	f04f 0300 	mov.w	r3, #0
 8005afe:	f04f 0400 	mov.w	r4, #0
 8005b02:	0214      	lsls	r4, r2, #8
 8005b04:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b08:	020b      	lsls	r3, r1, #8
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6852      	ldr	r2, [r2, #4]
 8005b0e:	0852      	lsrs	r2, r2, #1
 8005b10:	4611      	mov	r1, r2
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	eb13 0b01 	adds.w	fp, r3, r1
 8005b1a:	eb44 0c02 	adc.w	ip, r4, r2
 8005b1e:	4658      	mov	r0, fp
 8005b20:	4661      	mov	r1, ip
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	4623      	mov	r3, r4
 8005b2e:	f7fa fba7 	bl	8000280 <__aeabi_uldivmod>
 8005b32:	4603      	mov	r3, r0
 8005b34:	460c      	mov	r4, r1
 8005b36:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b38:	e058      	b.n	8005bec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	49ae      	ldr	r1, [pc, #696]	; (8005e00 <UART_SetConfig+0x6c4>)
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	eb13 0b01 	adds.w	fp, r3, r1
 8005b4e:	eb44 0c02 	adc.w	ip, r4, r2
 8005b52:	4658      	mov	r0, fp
 8005b54:	4661      	mov	r1, ip
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f04f 0400 	mov.w	r4, #0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4623      	mov	r3, r4
 8005b62:	f7fa fb8d 	bl	8000280 <__aeabi_uldivmod>
 8005b66:	4603      	mov	r3, r0
 8005b68:	460c      	mov	r4, r1
 8005b6a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005b6c:	e03e      	b.n	8005bec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005b6e:	f7fe f961 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8005b72:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	f04f 0300 	mov.w	r3, #0
 8005b80:	f04f 0400 	mov.w	r4, #0
 8005b84:	0214      	lsls	r4, r2, #8
 8005b86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b8a:	020b      	lsls	r3, r1, #8
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6852      	ldr	r2, [r2, #4]
 8005b90:	0852      	lsrs	r2, r2, #1
 8005b92:	4611      	mov	r1, r2
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	eb13 0b01 	adds.w	fp, r3, r1
 8005b9c:	eb44 0c02 	adc.w	ip, r4, r2
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	4661      	mov	r1, ip
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f04f 0400 	mov.w	r4, #0
 8005bac:	461a      	mov	r2, r3
 8005bae:	4623      	mov	r3, r4
 8005bb0:	f7fa fb66 	bl	8000280 <__aeabi_uldivmod>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005bba:	e017      	b.n	8005bec <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005bca:	f144 0100 	adc.w	r1, r4, #0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4623      	mov	r3, r4
 8005bda:	f7fa fb51 	bl	8000280 <__aeabi_uldivmod>
 8005bde:	4603      	mov	r3, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005be4:	e002      	b.n	8005bec <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	76fb      	strb	r3, [r7, #27]
            break;
 8005bea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf2:	d308      	bcc.n	8005c06 <UART_SetConfig+0x4ca>
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bfa:	d204      	bcs.n	8005c06 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	e100      	b.n	8005e08 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	76fb      	strb	r3, [r7, #27]
 8005c0a:	e0fd      	b.n	8005e08 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	f040 8084 	bne.w	8005d20 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8005c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c1c:	2b08      	cmp	r3, #8
 8005c1e:	d85f      	bhi.n	8005ce0 <UART_SetConfig+0x5a4>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0x4ec>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c4d 	.word	0x08005c4d
 8005c2c:	08005c6d 	.word	0x08005c6d
 8005c30:	08005c8d 	.word	0x08005c8d
 8005c34:	08005ce1 	.word	0x08005ce1
 8005c38:	08005ca9 	.word	0x08005ca9
 8005c3c:	08005ce1 	.word	0x08005ce1
 8005c40:	08005ce1 	.word	0x08005ce1
 8005c44:	08005ce1 	.word	0x08005ce1
 8005c48:	08005cc9 	.word	0x08005cc9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c4c:	f7fe f988 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005c50:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	005a      	lsls	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	441a      	add	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c6a:	e03c      	b.n	8005ce6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fe f98e 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8005c70:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	005a      	lsls	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005c8a:	e02c      	b.n	8005ce6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005c96:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6852      	ldr	r2, [r2, #4]
 8005c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005ca6:	e01e      	b.n	8005ce6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca8:	f7fe f8c4 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8005cac:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	005a      	lsls	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	441a      	add	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cc6:	e00e      	b.n	8005ce6 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005cde:	e002      	b.n	8005ce6 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	76fb      	strb	r3, [r7, #27]
        break;
 8005ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	2b0f      	cmp	r3, #15
 8005cea:	d916      	bls.n	8005d1a <UART_SetConfig+0x5de>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf2:	d212      	bcs.n	8005d1a <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f023 030f 	bic.w	r3, r3, #15
 8005cfc:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	89fa      	ldrh	r2, [r7, #14]
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	e076      	b.n	8005e08 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	76fb      	strb	r3, [r7, #27]
 8005d1e:	e073      	b.n	8005e08 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8005d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d85c      	bhi.n	8005de2 <UART_SetConfig+0x6a6>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x5f4>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d73 	.word	0x08005d73
 8005d38:	08005d91 	.word	0x08005d91
 8005d3c:	08005de3 	.word	0x08005de3
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005de3 	.word	0x08005de3
 8005d48:	08005de3 	.word	0x08005de3
 8005d4c:	08005de3 	.word	0x08005de3
 8005d50:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe f904 	bl	8003f60 <HAL_RCC_GetPCLK1Freq>
 8005d58:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085a      	lsrs	r2, r3, #1
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	441a      	add	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d70:	e03a      	b.n	8005de8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d72:	f7fe f90b 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8005d76:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	085a      	lsrs	r2, r3, #1
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	441a      	add	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005d8e:	e02b      	b.n	8005de8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005d9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6852      	ldr	r2, [r2, #4]
 8005da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005daa:	e01d      	b.n	8005de8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dac:	f7fe f842 	bl	8003e34 <HAL_RCC_GetSysClockFreq>
 8005db0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085a      	lsrs	r2, r3, #1
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005dc8:	e00e      	b.n	8005de8 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005de0:	e002      	b.n	8005de8 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	76fb      	strb	r3, [r7, #27]
        break;
 8005de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d90a      	bls.n	8005e04 <UART_SetConfig+0x6c8>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d206      	bcs.n	8005e04 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	e003      	b.n	8005e08 <UART_SetConfig+0x6cc>
 8005e00:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005e14:	7efb      	ldrb	r3, [r7, #27]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3728      	adds	r7, #40	; 0x28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00a      	beq.n	8005ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01a      	beq.n	8005f36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1e:	d10a      	bne.n	8005f36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	605a      	str	r2, [r3, #4]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b086      	sub	sp, #24
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005f72:	f7fb fa95 	bl	80014a0 <HAL_GetTick>
 8005f76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d10e      	bne.n	8005fa4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f82a 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e020      	b.n	8005fe6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d10e      	bne.n	8005fd0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f814 	bl	8005fee <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e00a      	b.n	8005fe6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	603b      	str	r3, [r7, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ffe:	e05d      	b.n	80060bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d059      	beq.n	80060bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006008:	f7fb fa4a 	bl	80014a0 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <UART_WaitOnFlagUntilTimeout+0x30>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d11b      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800602c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0201 	bic.w	r2, r2, #1
 800603c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e042      	b.n	80060dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02b      	beq.n	80060bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006072:	d123      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800607c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800608c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e00f      	b.n	80060dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d092      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80060fa:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2220      	movs	r2, #32
 8006100:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800610e:	b480      	push	{r7}
 8006110:	b083      	sub	sp, #12
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006124:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b00      	cmp	r3, #0
 8006168:	d114      	bne.n	8006194 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006180:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006190:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006192:	e002      	b.n	800619a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f003 f8f3 	bl	8009380 <HAL_UART_TxCpltCallback>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fab9 	bl	8005728 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b80      	cmp	r3, #128	; 0x80
 80061e4:	d109      	bne.n	80061fa <UART_DMAError+0x3c>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b21      	cmp	r3, #33	; 0x21
 80061ea:	d106      	bne.n	80061fa <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80061f4:	6978      	ldr	r0, [r7, #20]
 80061f6:	f7ff ff75 	bl	80060e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d109      	bne.n	800621c <UART_DMAError+0x5e>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b22      	cmp	r3, #34	; 0x22
 800620c:	d106      	bne.n	800621c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2200      	movs	r2, #0
 8006212:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006216:	6978      	ldr	r0, [r7, #20]
 8006218:	f7ff ff79 	bl	800610e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006220:	f043 0210 	orr.w	r2, r3, #16
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f003 f951 	bl	80094d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800622e:	bf00      	nop
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f003 f93b 	bl	80094d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006278:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f003 f87a 	bl	8009380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628c:	bf00      	nop
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062a8:	2b22      	cmp	r3, #34	; 0x22
 80062aa:	d13a      	bne.n	8006322 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062b2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062b4:	89bb      	ldrh	r3, [r7, #12]
 80062b6:	b2d9      	uxtb	r1, r3
 80062b8:	89fb      	ldrh	r3, [r7, #14]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c0:	400a      	ands	r2, r1
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	3b01      	subs	r3, #1
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d123      	bne.n	8006336 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f003 f80e 	bl	800933c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006320:	e009      	b.n	8006336 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	8b1b      	ldrh	r3, [r3, #24]
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0208 	orr.w	r2, r2, #8
 8006332:	b292      	uxth	r2, r2
 8006334:	831a      	strh	r2, [r3, #24]
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800634c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006352:	2b22      	cmp	r3, #34	; 0x22
 8006354:	d13a      	bne.n	80063cc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800635c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006364:	89ba      	ldrh	r2, [r7, #12]
 8006366:	89fb      	ldrh	r3, [r7, #14]
 8006368:	4013      	ands	r3, r2
 800636a:	b29a      	uxth	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d123      	bne.n	80063e0 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063a6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 ffb9 	bl	800933c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063ca:	e009      	b.n	80063e0 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	8b1b      	ldrh	r3, [r3, #24]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0208 	orr.w	r2, r2, #8
 80063dc:	b292      	uxth	r2, r2
 80063de:	831a      	strh	r2, [r3, #24]
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063fc:	b084      	sub	sp, #16
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	f107 001c 	add.w	r0, r7, #28
 800640a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	2b01      	cmp	r3, #1
 8006412:	d122      	bne.n	800645a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 f9c8 	bl	80077e4 <USB_CoreReset>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e01a      	b.n	8006490 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 f9bc 	bl	80077e4 <USB_CoreReset>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
 8006482:	e005      	b.n	8006490 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800649c:	b004      	add	sp, #16
 800649e:	4770      	bx	lr

080064a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d165      	bne.n	8006580 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <USB_SetTurnaroundTime+0x110>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d906      	bls.n	80064ca <USB_SetTurnaroundTime+0x2a>
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a3d      	ldr	r2, [pc, #244]	; (80065b4 <USB_SetTurnaroundTime+0x114>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d802      	bhi.n	80064ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064c4:	230f      	movs	r3, #15
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e05c      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a39      	ldr	r2, [pc, #228]	; (80065b4 <USB_SetTurnaroundTime+0x114>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d906      	bls.n	80064e0 <USB_SetTurnaroundTime+0x40>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a38      	ldr	r2, [pc, #224]	; (80065b8 <USB_SetTurnaroundTime+0x118>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d802      	bhi.n	80064e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064da:	230e      	movs	r3, #14
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e051      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a35      	ldr	r2, [pc, #212]	; (80065b8 <USB_SetTurnaroundTime+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d906      	bls.n	80064f6 <USB_SetTurnaroundTime+0x56>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a34      	ldr	r2, [pc, #208]	; (80065bc <USB_SetTurnaroundTime+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d802      	bhi.n	80064f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064f0:	230d      	movs	r3, #13
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	e046      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	4a30      	ldr	r2, [pc, #192]	; (80065bc <USB_SetTurnaroundTime+0x11c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d906      	bls.n	800650c <USB_SetTurnaroundTime+0x6c>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a2f      	ldr	r2, [pc, #188]	; (80065c0 <USB_SetTurnaroundTime+0x120>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d802      	bhi.n	800650c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006506:	230c      	movs	r3, #12
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	e03b      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <USB_SetTurnaroundTime+0x120>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d906      	bls.n	8006522 <USB_SetTurnaroundTime+0x82>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <USB_SetTurnaroundTime+0x124>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d802      	bhi.n	8006522 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800651c:	230b      	movs	r3, #11
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e030      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a27      	ldr	r2, [pc, #156]	; (80065c4 <USB_SetTurnaroundTime+0x124>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d906      	bls.n	8006538 <USB_SetTurnaroundTime+0x98>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a26      	ldr	r2, [pc, #152]	; (80065c8 <USB_SetTurnaroundTime+0x128>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d802      	bhi.n	8006538 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006532:	230a      	movs	r3, #10
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	e025      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <USB_SetTurnaroundTime+0x128>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d906      	bls.n	800654e <USB_SetTurnaroundTime+0xae>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a22      	ldr	r2, [pc, #136]	; (80065cc <USB_SetTurnaroundTime+0x12c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d802      	bhi.n	800654e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006548:	2309      	movs	r3, #9
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e01a      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4a1e      	ldr	r2, [pc, #120]	; (80065cc <USB_SetTurnaroundTime+0x12c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d906      	bls.n	8006564 <USB_SetTurnaroundTime+0xc4>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <USB_SetTurnaroundTime+0x130>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d802      	bhi.n	8006564 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800655e:	2308      	movs	r3, #8
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e00f      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	4a1a      	ldr	r2, [pc, #104]	; (80065d0 <USB_SetTurnaroundTime+0x130>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d906      	bls.n	800657a <USB_SetTurnaroundTime+0xda>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4a19      	ldr	r2, [pc, #100]	; (80065d4 <USB_SetTurnaroundTime+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d802      	bhi.n	800657a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006574:	2307      	movs	r3, #7
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e004      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800657a:	2306      	movs	r3, #6
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e001      	b.n	8006584 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006580:	2309      	movs	r3, #9
 8006582:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	029b      	lsls	r3, r3, #10
 8006598:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	00d8acbf 	.word	0x00d8acbf
 80065b4:	00e4e1bf 	.word	0x00e4e1bf
 80065b8:	00f423ff 	.word	0x00f423ff
 80065bc:	0106737f 	.word	0x0106737f
 80065c0:	011a499f 	.word	0x011a499f
 80065c4:	01312cff 	.word	0x01312cff
 80065c8:	014ca43f 	.word	0x014ca43f
 80065cc:	016e35ff 	.word	0x016e35ff
 80065d0:	01a6ab1f 	.word	0x01a6ab1f
 80065d4:	01e847ff 	.word	0x01e847ff

080065d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f043 0201 	orr.w	r2, r3, #1
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 0201 	bic.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d106      	bne.n	8006648 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]
 8006646:	e00b      	b.n	8006660 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	e001      	b.n	8006660 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e003      	b.n	8006668 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006660:	2032      	movs	r0, #50	; 0x32
 8006662:	f7fa ff29 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006670:	b084      	sub	sp, #16
 8006672:	b580      	push	{r7, lr}
 8006674:	b086      	sub	sp, #24
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800667e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e009      	b.n	80066a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3340      	adds	r3, #64	; 0x40
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3301      	adds	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b0e      	cmp	r3, #14
 80066a8:	d9f2      	bls.n	8006690 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11c      	bne.n	80066ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066be:	f043 0302 	orr.w	r3, r3, #2
 80066c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e005      	b.n	80066f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066fc:	461a      	mov	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006708:	4619      	mov	r1, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	461a      	mov	r2, r3
 8006712:	680b      	ldr	r3, [r1, #0]
 8006714:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006716:	2103      	movs	r1, #3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f93d 	bl	8006998 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800671e:	2110      	movs	r1, #16
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f8f1 	bl	8006908 <USB_FlushTxFifo>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f90f 	bl	8006954 <USB_FlushRxFifo>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	461a      	mov	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006752:	461a      	mov	r2, r3
 8006754:	2300      	movs	r3, #0
 8006756:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	461a      	mov	r2, r3
 8006760:	2300      	movs	r3, #0
 8006762:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	e043      	b.n	80067f2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006780:	d118      	bne.n	80067b4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	461a      	mov	r2, r3
 8006796:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e013      	b.n	80067c6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e008      	b.n	80067c6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	461a      	mov	r2, r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	461a      	mov	r2, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e4:	461a      	mov	r2, r3
 80067e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3301      	adds	r3, #1
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d3b7      	bcc.n	800676a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	e043      	b.n	8006888 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006816:	d118      	bne.n	800684a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	461a      	mov	r2, r3
 800682c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e013      	b.n	800685c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006840:	461a      	mov	r2, r3
 8006842:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	e008      	b.n	800685c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	461a      	mov	r2, r3
 8006858:	2300      	movs	r3, #0
 800685a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006880:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3301      	adds	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d3b7      	bcc.n	8006800 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800689e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f043 0210 	orr.w	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <USB_DevInit+0x294>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f043 0208 	orr.w	r2, r3, #8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068fe:	b004      	add	sp, #16
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	803c3800 	.word	0x803c3800

08006908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	019b      	lsls	r3, r3, #6
 800691a:	f043 0220 	orr.w	r2, r3, #32
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a09      	ldr	r2, [pc, #36]	; (8006950 <USB_FlushTxFifo+0x48>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e006      	b.n	8006942 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d0f0      	beq.n	8006922 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	00030d40 	.word	0x00030d40

08006954 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2210      	movs	r2, #16
 8006964:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a09      	ldr	r2, [pc, #36]	; (8006994 <USB_FlushRxFifo+0x40>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e006      	b.n	8006986 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b10      	cmp	r3, #16
 8006982:	d0f0      	beq.n	8006966 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	00030d40 	.word	0x00030d40

08006998 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069b8:	4313      	orrs	r3, r2
 80069ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b087      	sub	sp, #28
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d002      	beq.n	80069f0 <USB_GetDevSpeed+0x26>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b06      	cmp	r3, #6
 80069ee:	d102      	bne.n	80069f6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069f0:	2302      	movs	r3, #2
 80069f2:	75fb      	strb	r3, [r7, #23]
 80069f4:	e001      	b.n	80069fa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80069f6:	230f      	movs	r3, #15
 80069f8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d13a      	bne.n	8006a9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	2101      	movs	r1, #1
 8006a36:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a42:	4313      	orrs	r3, r2
 8006a44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d155      	bne.n	8006b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a80:	4313      	orrs	r3, r2
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e036      	b.n	8006b08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	2101      	movs	r1, #1
 8006aac:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d11a      	bne.n	8006b08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	78db      	ldrb	r3, [r3, #3]
 8006aec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aee:	430b      	orrs	r3, r1
 8006af0:	4313      	orrs	r3, r2
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d161      	bne.n	8006bf8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b4a:	d11f      	bne.n	8006b8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bac:	4013      	ands	r3, r2
 8006bae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	69da      	ldr	r2, [r3, #28]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	43db      	mvns	r3, r3
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	0159      	lsls	r1, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	440b      	add	r3, r1
 8006bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4b35      	ldr	r3, [pc, #212]	; (8006cc8 <USB_DeactivateEndpoint+0x1b0>)
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]
 8006bf6:	e060      	b.n	8006cba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c0e:	d11f      	bne.n	8006c50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	2101      	movs	r1, #1
 8006c62:	fa01 f303 	lsl.w	r3, r1, r3
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c70:	4013      	ands	r3, r2
 8006c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7a:	69da      	ldr	r2, [r3, #28]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	2101      	movs	r1, #1
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	43db      	mvns	r3, r3
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c94:	4013      	ands	r3, r2
 8006c96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	0159      	lsls	r1, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	440b      	add	r3, r1
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <USB_DeactivateEndpoint+0x1b4>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	ec337800 	.word	0xec337800
 8006ccc:	eff37800 	.word	0xeff37800

08006cd0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	f040 810a 	bne.w	8006f02 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d132      	bne.n	8006d5c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	0cdb      	lsrs	r3, r3, #19
 8006d56:	04db      	lsls	r3, r3, #19
 8006d58:	6113      	str	r3, [r2, #16]
 8006d5a:	e074      	b.n	8006e46 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d76:	0cdb      	lsrs	r3, r3, #19
 8006d78:	04db      	lsls	r3, r3, #19
 8006d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	0151      	lsls	r1, r2, #5
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	440a      	add	r2, r1
 8006d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6959      	ldr	r1, [r3, #20]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	440b      	add	r3, r1
 8006db8:	1e59      	subs	r1, r3, #1
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006dc2:	04d9      	lsls	r1, r3, #19
 8006dc4:	4baf      	ldr	r3, [pc, #700]	; (8007084 <USB_EPStartXfer+0x3b4>)
 8006dc6:	400b      	ands	r3, r1
 8006dc8:	6939      	ldr	r1, [r7, #16]
 8006dca:	0148      	lsls	r0, r1, #5
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	4401      	add	r1, r0
 8006dd0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dee:	6939      	ldr	r1, [r7, #16]
 8006df0:	0148      	lsls	r0, r1, #5
 8006df2:	6979      	ldr	r1, [r7, #20]
 8006df4:	4401      	add	r1, r0
 8006df6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	78db      	ldrb	r3, [r3, #3]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d11f      	bne.n	8006e46 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006e24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	0151      	lsls	r1, r2, #5
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	440a      	add	r2, r1
 8006e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e44:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e64:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	78db      	ldrb	r3, [r3, #3]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d015      	beq.n	8006e9a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8100 	beq.w	8007078 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	2101      	movs	r1, #1
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	6979      	ldr	r1, [r7, #20]
 8006e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e94:	4313      	orrs	r3, r2
 8006e96:	634b      	str	r3, [r1, #52]	; 0x34
 8006e98:	e0ee      	b.n	8007078 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d110      	bne.n	8006ecc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e00f      	b.n	8006eec <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eea:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	68d9      	ldr	r1, [r3, #12]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9e2 	bl	80072c4 <USB_WritePacket>
 8006f00:	e0ba      	b.n	8007078 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	0151      	lsls	r1, r2, #5
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	440a      	add	r2, r1
 8006f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1c:	0cdb      	lsrs	r3, r3, #19
 8006f1e:	04db      	lsls	r3, r3, #19
 8006f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f64:	6939      	ldr	r1, [r7, #16]
 8006f66:	0148      	lsls	r0, r1, #5
 8006f68:	6979      	ldr	r1, [r7, #20]
 8006f6a:	4401      	add	r1, r0
 8006f6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f70:	4313      	orrs	r3, r2
 8006f72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f92:	6113      	str	r3, [r2, #16]
 8006f94:	e033      	b.n	8006ffe <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	1e5a      	subs	r2, r3, #1
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006faa:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	89fb      	ldrh	r3, [r7, #14]
 8006fbc:	04d9      	lsls	r1, r3, #19
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <USB_EPStartXfer+0x3b4>)
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	6939      	ldr	r1, [r7, #16]
 8006fc4:	0148      	lsls	r0, r1, #5
 8006fc6:	6979      	ldr	r1, [r7, #20]
 8006fc8:	4401      	add	r1, r0
 8006fca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	89f9      	ldrh	r1, [r7, #14]
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fee:	6939      	ldr	r1, [r7, #16]
 8006ff0:	0148      	lsls	r0, r1, #5
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	4401      	add	r1, r0
 8006ff6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	78db      	ldrb	r3, [r3, #3]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d128      	bne.n	8007058 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	2b00      	cmp	r3, #0
 8007014:	d110      	bne.n	8007038 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	0151      	lsls	r1, r2, #5
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	440a      	add	r2, r1
 800702c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	e00f      	b.n	8007058 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	1ff80000 	.word	0x1ff80000

08007088 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 80ab 	bne.w	80071fc <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d132      	bne.n	8007114 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	440a      	add	r2, r1
 8007108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710c:	0cdb      	lsrs	r3, r3, #19
 800710e:	04db      	lsls	r3, r3, #19
 8007110:	6113      	str	r3, [r2, #16]
 8007112:	e04e      	b.n	80071b2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712e:	0cdb      	lsrs	r3, r3, #19
 8007130:	04db      	lsls	r3, r3, #19
 8007132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007156:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695a      	ldr	r2, [r3, #20]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d903      	bls.n	800716c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	0151      	lsls	r1, r2, #5
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	440a      	add	r2, r1
 8007182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007186:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800718a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	0148      	lsls	r0, r1, #5
 80071a6:	68f9      	ldr	r1, [r7, #12]
 80071a8:	4401      	add	r1, r0
 80071aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071ae:	4313      	orrs	r3, r2
 80071b0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d06d      	beq.n	80072b6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	2101      	movs	r1, #1
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f6:	4313      	orrs	r3, r2
 80071f8:	634b      	str	r3, [r1, #52]	; 0x34
 80071fa:	e05c      	b.n	80072b6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007216:	0cdb      	lsrs	r3, r3, #19
 8007218:	04db      	lsls	r3, r3, #19
 800721a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	0151      	lsls	r1, r2, #5
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	440a      	add	r2, r1
 8007232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007236:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800723a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800723e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800726a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800726e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	0148      	lsls	r0, r1, #5
 800728a:	68f9      	ldr	r1, [r7, #12]
 800728c:	4401      	add	r1, r0
 800728e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007292:	4313      	orrs	r3, r2
 8007294:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3714      	adds	r7, #20
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b089      	sub	sp, #36	; 0x24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	4611      	mov	r1, r2
 80072d0:	461a      	mov	r2, r3
 80072d2:	460b      	mov	r3, r1
 80072d4:	71fb      	strb	r3, [r7, #7]
 80072d6:	4613      	mov	r3, r2
 80072d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80072e2:	88bb      	ldrh	r3, [r7, #4]
 80072e4:	3303      	adds	r3, #3
 80072e6:	089b      	lsrs	r3, r3, #2
 80072e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80072ea:	2300      	movs	r3, #0
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	e00f      	b.n	8007310 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	031a      	lsls	r2, r3, #12
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fc:	461a      	mov	r2, r3
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	3304      	adds	r3, #4
 8007308:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	3301      	adds	r3, #1
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	429a      	cmp	r2, r3
 8007316:	d3eb      	bcc.n	80072f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3724      	adds	r7, #36	; 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007326:	b480      	push	{r7}
 8007328:	b089      	sub	sp, #36	; 0x24
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	4613      	mov	r3, r2
 8007332:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800733c:	88fb      	ldrh	r3, [r7, #6]
 800733e:	3303      	adds	r3, #3
 8007340:	089b      	lsrs	r3, r3, #2
 8007342:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007344:	2300      	movs	r3, #0
 8007346:	61bb      	str	r3, [r7, #24]
 8007348:	e00b      	b.n	8007362 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	601a      	str	r2, [r3, #0]
    pDest++;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	3304      	adds	r3, #4
 800735a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	3301      	adds	r3, #1
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	429a      	cmp	r2, r3
 8007368:	d3ef      	bcc.n	800734a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800736a:	69fb      	ldr	r3, [r7, #28]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3724      	adds	r7, #36	; 0x24
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d12c      	bne.n	80073ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	db12      	blt.n	80073cc <USB_EPSetStall+0x54>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00f      	beq.n	80073cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e02b      	b.n	8007446 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	db12      	blt.n	8007426 <USB_EPSetStall+0xae>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00f      	beq.n	8007426 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007420:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007424:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007440:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007444:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d128      	bne.n	80074c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	0151      	lsls	r1, r2, #5
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	440a      	add	r2, r1
 8007486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800748e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	78db      	ldrb	r3, [r3, #3]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d003      	beq.n	80074a0 <USB_EPClearStall+0x4c>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	78db      	ldrb	r3, [r3, #3]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d138      	bne.n	8007512 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	e027      	b.n	8007512 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	78db      	ldrb	r3, [r3, #3]
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d003      	beq.n	80074f2 <USB_EPClearStall+0x9e>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	78db      	ldrb	r3, [r3, #3]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d10f      	bne.n	8007512 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007510:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800753e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007542:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007554:	68f9      	ldr	r1, [r7, #12]
 8007556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800755a:	4313      	orrs	r3, r2
 800755c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007586:	f023 0302 	bic.w	r3, r3, #2
 800758a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800758c:	2003      	movs	r0, #3
 800758e:	f7f9 ff93 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075b6:	f043 0302 	orr.w	r3, r3, #2
 80075ba:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80075bc:	2003      	movs	r0, #3
 80075be:	f7f9 ff7b 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4013      	ands	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075e4:	68fb      	ldr	r3, [r7, #12]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	4013      	ands	r3, r2
 8007614:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	0c1b      	lsrs	r3, r3, #16
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	b29b      	uxth	r3, r3
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	460b      	mov	r3, r1
 8007664:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4013      	ands	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007688:	68bb      	ldr	r3, [r7, #8]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007696:	b480      	push	{r7}
 8007698:	b087      	sub	sp, #28
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	fa22 f303 	lsr.w	r3, r2, r3
 80076c6:	01db      	lsls	r3, r3, #7
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4013      	ands	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076e4:	68bb      	ldr	r3, [r7, #8]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b083      	sub	sp, #12
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f003 0301 	and.w	r3, r3, #1
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007728:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007744:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	333c      	adds	r3, #60	; 0x3c
 8007766:	3304      	adds	r3, #4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4a1c      	ldr	r2, [pc, #112]	; (80077e0 <USB_EP0_OutStart+0x8c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d90a      	bls.n	800778a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007784:	d101      	bne.n	800778a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e024      	b.n	80077d4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007790:	461a      	mov	r2, r3
 8007792:	2300      	movs	r3, #0
 8007794:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	f043 0318 	orr.w	r3, r3, #24
 80077bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077d0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	4f54300a 	.word	0x4f54300a

080077e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	3301      	adds	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4a13      	ldr	r2, [pc, #76]	; (8007848 <USB_CoreReset+0x64>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d901      	bls.n	8007802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e01b      	b.n	800783a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	daf2      	bge.n	80077f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f043 0201 	orr.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3301      	adds	r3, #1
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a09      	ldr	r2, [pc, #36]	; (8007848 <USB_CoreReset+0x64>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d901      	bls.n	800782c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e006      	b.n	800783a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d0f0      	beq.n	800781a <USB_CoreReset+0x36>

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	00030d40 	.word	0x00030d40

0800784c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7c1b      	ldrb	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d115      	bne.n	8007890 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007868:	2202      	movs	r2, #2
 800786a:	2181      	movs	r1, #129	; 0x81
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f002 f93f 	bl	8009af0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787c:	2202      	movs	r2, #2
 800787e:	2101      	movs	r1, #1
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f002 f935 	bl	8009af0 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800788e:	e012      	b.n	80078b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	2202      	movs	r2, #2
 8007894:	2181      	movs	r1, #129	; 0x81
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f002 f92a 	bl	8009af0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078a2:	2340      	movs	r3, #64	; 0x40
 80078a4:	2202      	movs	r2, #2
 80078a6:	2101      	movs	r1, #1
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f002 f921 	bl	8009af0 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078b6:	2308      	movs	r3, #8
 80078b8:	2203      	movs	r2, #3
 80078ba:	2182      	movs	r1, #130	; 0x82
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f002 f917 	bl	8009af0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80078c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80078cc:	f002 fb28 	bl	8009f20 <USBD_static_malloc>
 80078d0:	4602      	mov	r2, r0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80078e2:	2301      	movs	r3, #1
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	e026      	b.n	8007936 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791c:	2101      	movs	r1, #1
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f002 fa62 	bl	8009de8 <USBD_LL_PrepareReceive>
 8007924:	e007      	b.n	8007936 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792c:	2340      	movs	r3, #64	; 0x40
 800792e:	2101      	movs	r1, #1
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f002 fa59 	bl	8009de8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007936:	7bfb      	ldrb	r3, [r7, #15]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007950:	2181      	movs	r1, #129	; 0x81
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f002 f90a 	bl	8009b6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800795e:	2101      	movs	r1, #1
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f002 f903 	bl	8009b6c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800796e:	2182      	movs	r1, #130	; 0x82
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f002 f8fb 	bl	8009b6c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	4618      	mov	r0, r3
 8007998:	f002 fad0 	bl	8009f3c <USBD_static_free>
    pdev->pClassData = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80079c4:	2300      	movs	r3, #0
 80079c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d039      	beq.n	8007a4c <USBD_CDC_Setup+0x9e>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d17c      	bne.n	8007ad6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	88db      	ldrh	r3, [r3, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d029      	beq.n	8007a38 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	b25b      	sxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da11      	bge.n	8007a12 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80079fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079fc:	683a      	ldr	r2, [r7, #0]
 80079fe:	88d2      	ldrh	r2, [r2, #6]
 8007a00:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a02:	6939      	ldr	r1, [r7, #16]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	88db      	ldrh	r3, [r3, #6]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fa6a 	bl	8008ee4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007a10:	e068      	b.n	8007ae4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	785a      	ldrb	r2, [r3, #1]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	88db      	ldrh	r3, [r3, #6]
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a28:	6939      	ldr	r1, [r7, #16]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fa85 	bl	8008f40 <USBD_CtlPrepareRx>
      break;
 8007a36:	e055      	b.n	8007ae4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	7850      	ldrb	r0, [r2, #1]
 8007a44:	2200      	movs	r2, #0
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	4798      	blx	r3
      break;
 8007a4a:	e04b      	b.n	8007ae4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b0a      	cmp	r3, #10
 8007a52:	d017      	beq.n	8007a84 <USBD_CDC_Setup+0xd6>
 8007a54:	2b0b      	cmp	r3, #11
 8007a56:	d029      	beq.n	8007aac <USBD_CDC_Setup+0xfe>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d133      	bne.n	8007ac4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d107      	bne.n	8007a76 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a66:	f107 030c 	add.w	r3, r7, #12
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 fa38 	bl	8008ee4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a74:	e02e      	b.n	8007ad4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 f9c8 	bl	8008e0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	75fb      	strb	r3, [r7, #23]
          break;
 8007a82:	e027      	b.n	8007ad4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d107      	bne.n	8007a9e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a8e:	f107 030f 	add.w	r3, r7, #15
 8007a92:	2201      	movs	r2, #1
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fa24 	bl	8008ee4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a9c:	e01a      	b.n	8007ad4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 f9b4 	bl	8008e0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8007aaa:	e013      	b.n	8007ad4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d00d      	beq.n	8007ad2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f9a8 	bl	8008e0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ac2:	e006      	b.n	8007ad2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f9a1 	bl	8008e0e <USBD_CtlError>
          ret = USBD_FAIL;
 8007acc:	2302      	movs	r3, #2
 8007ace:	75fb      	strb	r3, [r7, #23]
          break;
 8007ad0:	e000      	b.n	8007ad4 <USBD_CDC_Setup+0x126>
          break;
 8007ad2:	bf00      	nop
      }
      break;
 8007ad4:	e006      	b.n	8007ae4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f998 	bl	8008e0e <USBD_CtlError>
      ret = USBD_FAIL;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae2:	bf00      	nop
  }

  return ret;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3718      	adds	r7, #24
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b00:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b08:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d03a      	beq.n	8007b8a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	331c      	adds	r3, #28
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d029      	beq.n	8007b7e <USBD_CDC_DataIn+0x90>
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	331c      	adds	r3, #28
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	78f9      	ldrb	r1, [r7, #3]
 8007b3e:	68b8      	ldr	r0, [r7, #8]
 8007b40:	460b      	mov	r3, r1
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	1a5b      	subs	r3, r3, r1
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4403      	add	r3, r0
 8007b4a:	3344      	adds	r3, #68	; 0x44
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b52:	fb03 f301 	mul.w	r3, r3, r1
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d110      	bne.n	8007b7e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	6879      	ldr	r1, [r7, #4]
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	440b      	add	r3, r1
 8007b6a:	331c      	adds	r3, #28
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b70:	78f9      	ldrb	r1, [r7, #3]
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f002 f8fc 	bl	8009d74 <USBD_LL_Transmit>
 8007b7c:	e003      	b.n	8007b86 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	e000      	b.n	8007b8c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b8a:	2302      	movs	r3, #2
  }
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f002 f955 	bl	8009e5c <USBD_LL_GetRxDataSize>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00d      	beq.n	8007be0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007bd8:	4611      	mov	r1, r2
 8007bda:	4798      	blx	r3

    return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007be0:	2302      	movs	r3, #2
  }
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d015      	beq.n	8007c30 <USBD_CDC_EP0_RxReady+0x46>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c0a:	2bff      	cmp	r3, #255	; 0xff
 8007c0c:	d010      	beq.n	8007c30 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c1c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c24:	b292      	uxth	r2, r2
 8007c26:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	22ff      	movs	r2, #255	; 0xff
 8007c2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2243      	movs	r2, #67	; 0x43
 8007c48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007c4a:	4b03      	ldr	r3, [pc, #12]	; (8007c58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr
 8007c58:	20000094 	.word	0x20000094

08007c5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2243      	movs	r2, #67	; 0x43
 8007c68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007c6a:	4b03      	ldr	r3, [pc, #12]	; (8007c78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20000050 	.word	0x20000050

08007c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2243      	movs	r2, #67	; 0x43
 8007c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c8a:	4b03      	ldr	r3, [pc, #12]	; (8007c98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	200000d8 	.word	0x200000d8

08007c9c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	220a      	movs	r2, #10
 8007ca8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007caa:	4b03      	ldr	r3, [pc, #12]	; (8007cb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	2000000c 	.word	0x2000000c

08007cbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfe:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01c      	beq.n	8007d9a <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d115      	bne.n	8007d96 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2181      	movs	r1, #129	; 0x81
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 fff1 	bl	8009d74 <USBD_LL_Transmit>

      return USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e002      	b.n	8007d9c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d9a:	2302      	movs	r3, #2
  }
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d017      	beq.n	8007dee <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7c1b      	ldrb	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f002 f808 	bl	8009de8 <USBD_LL_PrepareReceive>
 8007dd8:	e007      	b.n	8007dea <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2101      	movs	r1, #1
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 ffff 	bl	8009de8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e000      	b.n	8007df0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007dee:	2302      	movs	r3, #2
  }
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e01a      	b.n	8007e46 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	79fa      	ldrb	r2, [r7, #7]
 8007e3c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f001 fdd8 	bl	80099f4 <USBD_LL_Init>

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d006      	beq.n	8007e70 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
 8007e6e:	e001      	b.n	8007e74 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007e70:	2302      	movs	r3, #2
 8007e72:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fdfe 	bl	8009a8c <USBD_LL_Start>

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00c      	beq.n	8007ee4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 ff34 	bl	8008d94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f48:	f003 031f 	and.w	r3, r3, #31
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d00c      	beq.n	8007f6a <USBD_LL_SetupStage+0x56>
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d302      	bcc.n	8007f5a <USBD_LL_SetupStage+0x46>
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d010      	beq.n	8007f7a <USBD_LL_SetupStage+0x66>
 8007f58:	e017      	b.n	8007f8a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa0a 	bl	800837c <USBD_StdDevReq>
      break;
 8007f68:	e01a      	b.n	8007fa0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fa6c 	bl	8008450 <USBD_StdItfReq>
      break;
 8007f78:	e012      	b.n	8007fa0 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 faaa 	bl	80084dc <USBD_StdEPReq>
      break;
 8007f88:	e00a      	b.n	8007fa0 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fe1d 	bl	8009bd8 <USBD_LL_StallEP>
      break;
 8007f9e:	bf00      	nop
  }

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b086      	sub	sp, #24
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	60f8      	str	r0, [r7, #12]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	607a      	str	r2, [r7, #4]
 8007fb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d14b      	bne.n	8008056 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fcc:	2b03      	cmp	r3, #3
 8007fce:	d134      	bne.n	800803a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d919      	bls.n	8008010 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	68da      	ldr	r2, [r3, #12]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d203      	bcs.n	8007ffe <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	e002      	b.n	8008004 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008002:	b29b      	uxth	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 ffb7 	bl	8008f7c <USBD_CtlContinueRx>
 800800e:	e038      	b.n	8008082 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008022:	2b03      	cmp	r3, #3
 8008024:	d105      	bne.n	8008032 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 ffb4 	bl	8008fa0 <USBD_CtlSendStatus>
 8008038:	e023      	b.n	8008082 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008040:	2b05      	cmp	r3, #5
 8008042:	d11e      	bne.n	8008082 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800804c:	2100      	movs	r1, #0
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 fdc2 	bl	8009bd8 <USBD_LL_StallEP>
 8008054:	e015      	b.n	8008082 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008068:	2b03      	cmp	r3, #3
 800806a:	d108      	bne.n	800807e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	7afa      	ldrb	r2, [r7, #11]
 8008076:	4611      	mov	r1, r2
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	4798      	blx	r3
 800807c:	e001      	b.n	8008082 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800807e:	2302      	movs	r3, #2
 8008080:	e000      	b.n	8008084 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	460b      	mov	r3, r1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800809a:	7afb      	ldrb	r3, [r7, #11]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d17f      	bne.n	80081a0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3314      	adds	r3, #20
 80080a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d15c      	bne.n	800816a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d915      	bls.n	80080e8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	1ad2      	subs	r2, r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	461a      	mov	r2, r3
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 ff21 	bl	8008f1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080da:	2300      	movs	r3, #0
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f001 fe81 	bl	8009de8 <USBD_LL_PrepareReceive>
 80080e6:	e04e      	b.n	8008186 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	6912      	ldr	r2, [r2, #16]
 80080f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80080f4:	fb02 f201 	mul.w	r2, r2, r1
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11c      	bne.n	8008138 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008106:	429a      	cmp	r2, r3
 8008108:	d316      	bcc.n	8008138 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	689a      	ldr	r2, [r3, #8]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008114:	429a      	cmp	r2, r3
 8008116:	d20f      	bcs.n	8008138 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008118:	2200      	movs	r2, #0
 800811a:	2100      	movs	r1, #0
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fefd 	bl	8008f1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f001 fe59 	bl	8009de8 <USBD_LL_PrepareReceive>
 8008136:	e026      	b.n	8008186 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800814a:	2b03      	cmp	r3, #3
 800814c:	d105      	bne.n	800815a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800815a:	2180      	movs	r1, #128	; 0x80
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 fd3b 	bl	8009bd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 ff2f 	bl	8008fc6 <USBD_CtlReceiveStatus>
 8008168:	e00d      	b.n	8008186 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008170:	2b04      	cmp	r3, #4
 8008172:	d004      	beq.n	800817e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800817a:	2b00      	cmp	r3, #0
 800817c:	d103      	bne.n	8008186 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800817e:	2180      	movs	r1, #128	; 0x80
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f001 fd29 	bl	8009bd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d11d      	bne.n	80081cc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f7ff fe82 	bl	8007e9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800819e:	e015      	b.n	80081cc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d108      	bne.n	80081c8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	7afa      	ldrb	r2, [r7, #11]
 80081c0:	4611      	mov	r1, r2
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4798      	blx	r3
 80081c6:	e001      	b.n	80081cc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
 80081ca:	e000      	b.n	80081ce <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081de:	2340      	movs	r3, #64	; 0x40
 80081e0:	2200      	movs	r2, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fc83 	bl	8009af0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2240      	movs	r2, #64	; 0x40
 80081f6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081fa:	2340      	movs	r3, #64	; 0x40
 80081fc:	2200      	movs	r2, #0
 80081fe:	2180      	movs	r1, #128	; 0x80
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 fc75 	bl	8009af0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2240      	movs	r2, #64	; 0x40
 8008210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	6852      	ldr	r2, [r2, #4]
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	4611      	mov	r1, r2
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
  }

  return USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2204      	movs	r2, #4
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d105      	bne.n	80082c0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d10b      	bne.n	80082f8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6852      	ldr	r2, [r2, #4]
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	4611      	mov	r1, r2
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008392:	2b20      	cmp	r3, #32
 8008394:	d004      	beq.n	80083a0 <USBD_StdDevReq+0x24>
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d002      	beq.n	80083a0 <USBD_StdDevReq+0x24>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d008      	beq.n	80083b0 <USBD_StdDevReq+0x34>
 800839e:	e04c      	b.n	800843a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
      break;
 80083ae:	e049      	b.n	8008444 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	785b      	ldrb	r3, [r3, #1]
 80083b4:	2b09      	cmp	r3, #9
 80083b6:	d83a      	bhi.n	800842e <USBD_StdDevReq+0xb2>
 80083b8:	a201      	add	r2, pc, #4	; (adr r2, 80083c0 <USBD_StdDevReq+0x44>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	08008411 	.word	0x08008411
 80083c4:	08008425 	.word	0x08008425
 80083c8:	0800842f 	.word	0x0800842f
 80083cc:	0800841b 	.word	0x0800841b
 80083d0:	0800842f 	.word	0x0800842f
 80083d4:	080083f3 	.word	0x080083f3
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	0800842f 	.word	0x0800842f
 80083e0:	08008407 	.word	0x08008407
 80083e4:	080083fd 	.word	0x080083fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f9d4 	bl	8008798 <USBD_GetDescriptor>
          break;
 80083f0:	e022      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb61 	bl	8008abc <USBD_SetAddress>
          break;
 80083fa:	e01d      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fb9e 	bl	8008b40 <USBD_SetConfig>
          break;
 8008404:	e018      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fc27 	bl	8008c5c <USBD_GetConfig>
          break;
 800840e:	e013      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fc56 	bl	8008cc4 <USBD_GetStatus>
          break;
 8008418:	e00e      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fc84 	bl	8008d2a <USBD_SetFeature>
          break;
 8008422:	e009      	b.n	8008438 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc93 	bl	8008d52 <USBD_ClrFeature>
          break;
 800842c:	e004      	b.n	8008438 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fcec 	bl	8008e0e <USBD_CtlError>
          break;
 8008436:	bf00      	nop
      }
      break;
 8008438:	e004      	b.n	8008444 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fce6 	bl	8008e0e <USBD_CtlError>
      break;
 8008442:	bf00      	nop
  }

  return ret;
 8008444:	7bfb      	ldrb	r3, [r7, #15]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop

08008450 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008466:	2b20      	cmp	r3, #32
 8008468:	d003      	beq.n	8008472 <USBD_StdItfReq+0x22>
 800846a:	2b40      	cmp	r3, #64	; 0x40
 800846c:	d001      	beq.n	8008472 <USBD_StdItfReq+0x22>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d12a      	bne.n	80084c8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008478:	3b01      	subs	r3, #1
 800847a:	2b02      	cmp	r3, #2
 800847c:	d81d      	bhi.n	80084ba <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	889b      	ldrh	r3, [r3, #4]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d813      	bhi.n	80084b0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	88db      	ldrh	r3, [r3, #6]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d110      	bne.n	80084c4 <USBD_StdItfReq+0x74>
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10d      	bne.n	80084c4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fd79 	bl	8008fa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ae:	e009      	b.n	80084c4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fcab 	bl	8008e0e <USBD_CtlError>
          break;
 80084b8:	e004      	b.n	80084c4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fca6 	bl	8008e0e <USBD_CtlError>
          break;
 80084c2:	e000      	b.n	80084c6 <USBD_StdItfReq+0x76>
          break;
 80084c4:	bf00      	nop
      }
      break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc9f 	bl	8008e0e <USBD_CtlError>
      break;
 80084d0:	bf00      	nop
  }

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	889b      	ldrh	r3, [r3, #4]
 80084ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d004      	beq.n	8008506 <USBD_StdEPReq+0x2a>
 80084fc:	2b40      	cmp	r3, #64	; 0x40
 80084fe:	d002      	beq.n	8008506 <USBD_StdEPReq+0x2a>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <USBD_StdEPReq+0x3a>
 8008504:	e13d      	b.n	8008782 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
      break;
 8008514:	e13a      	b.n	800878c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800851e:	2b20      	cmp	r3, #32
 8008520:	d10a      	bne.n	8008538 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	e12a      	b.n	800878e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d03e      	beq.n	80085be <USBD_StdEPReq+0xe2>
 8008540:	2b03      	cmp	r3, #3
 8008542:	d002      	beq.n	800854a <USBD_StdEPReq+0x6e>
 8008544:	2b00      	cmp	r3, #0
 8008546:	d070      	beq.n	800862a <USBD_StdEPReq+0x14e>
 8008548:	e115      	b.n	8008776 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b02      	cmp	r3, #2
 8008552:	d002      	beq.n	800855a <USBD_StdEPReq+0x7e>
 8008554:	2b03      	cmp	r3, #3
 8008556:	d015      	beq.n	8008584 <USBD_StdEPReq+0xa8>
 8008558:	e02b      	b.n	80085b2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <USBD_StdEPReq+0x9e>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d009      	beq.n	800857a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 fb34 	bl	8009bd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008570:	2180      	movs	r1, #128	; 0x80
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fb30 	bl	8009bd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008578:	e020      	b.n	80085bc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc46 	bl	8008e0e <USBD_CtlError>
              break;
 8008582:	e01b      	b.n	80085bc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10e      	bne.n	80085aa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800858c:	7bbb      	ldrb	r3, [r7, #14]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00b      	beq.n	80085aa <USBD_StdEPReq+0xce>
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d008      	beq.n	80085aa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	88db      	ldrh	r3, [r3, #6]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f001 fb17 	bl	8009bd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fcf8 	bl	8008fa0 <USBD_CtlSendStatus>

              break;
 80085b0:	e004      	b.n	80085bc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fc2a 	bl	8008e0e <USBD_CtlError>
              break;
 80085ba:	bf00      	nop
          }
          break;
 80085bc:	e0e0      	b.n	8008780 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d002      	beq.n	80085ce <USBD_StdEPReq+0xf2>
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d015      	beq.n	80085f8 <USBD_StdEPReq+0x11c>
 80085cc:	e026      	b.n	800861c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ce:	7bbb      	ldrb	r3, [r7, #14]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <USBD_StdEPReq+0x112>
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b80      	cmp	r3, #128	; 0x80
 80085d8:	d009      	beq.n	80085ee <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fafa 	bl	8009bd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085e4:	2180      	movs	r1, #128	; 0x80
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 faf6 	bl	8009bd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e01c      	b.n	8008628 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc0c 	bl	8008e0e <USBD_CtlError>
              break;
 80085f6:	e017      	b.n	8008628 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d112      	bne.n	8008626 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 fb18 	bl	8009c44 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fcc3 	bl	8008fa0 <USBD_CtlSendStatus>
              }
              break;
 800861a:	e004      	b.n	8008626 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fbf5 	bl	8008e0e <USBD_CtlError>
              break;
 8008624:	e000      	b.n	8008628 <USBD_StdEPReq+0x14c>
              break;
 8008626:	bf00      	nop
          }
          break;
 8008628:	e0aa      	b.n	8008780 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008630:	2b02      	cmp	r3, #2
 8008632:	d002      	beq.n	800863a <USBD_StdEPReq+0x15e>
 8008634:	2b03      	cmp	r3, #3
 8008636:	d032      	beq.n	800869e <USBD_StdEPReq+0x1c2>
 8008638:	e097      	b.n	800876a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d007      	beq.n	8008650 <USBD_StdEPReq+0x174>
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d004      	beq.n	8008650 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fbe0 	bl	8008e0e <USBD_CtlError>
                break;
 800864e:	e091      	b.n	8008774 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da0b      	bge.n	8008670 <USBD_StdEPReq+0x194>
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	3310      	adds	r3, #16
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	e00b      	b.n	8008688 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	3304      	adds	r3, #4
 8008688:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2202      	movs	r2, #2
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc24 	bl	8008ee4 <USBD_CtlSendData>
              break;
 800869c:	e06a      	b.n	8008774 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800869e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da11      	bge.n	80086ca <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	f003 020f 	and.w	r2, r3, #15
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	3318      	adds	r3, #24
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d117      	bne.n	80086f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fba3 	bl	8008e0e <USBD_CtlError>
                  break;
 80086c8:	e054      	b.n	8008774 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	f003 020f 	and.w	r2, r3, #15
 80086d0:	6879      	ldr	r1, [r7, #4]
 80086d2:	4613      	mov	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	440b      	add	r3, r1
 80086dc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d104      	bne.n	80086f0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fb90 	bl	8008e0e <USBD_CtlError>
                  break;
 80086ee:	e041      	b.n	8008774 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	da0b      	bge.n	8008710 <USBD_StdEPReq+0x234>
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	3310      	adds	r3, #16
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	3304      	adds	r3, #4
 800870e:	e00b      	b.n	8008728 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008710:	7bbb      	ldrb	r3, [r7, #14]
 8008712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008716:	4613      	mov	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	4413      	add	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4413      	add	r3, r2
 8008726:	3304      	adds	r3, #4
 8008728:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <USBD_StdEPReq+0x25a>
 8008730:	7bbb      	ldrb	r3, [r7, #14]
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d103      	bne.n	800873e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e00e      	b.n	800875c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 fab4 	bl	8009cb0 <USBD_LL_IsStallEP>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2201      	movs	r2, #1
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	e002      	b.n	800875c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2202      	movs	r2, #2
 8008760:	4619      	mov	r1, r3
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fbbe 	bl	8008ee4 <USBD_CtlSendData>
              break;
 8008768:	e004      	b.n	8008774 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fb4e 	bl	8008e0e <USBD_CtlError>
              break;
 8008772:	bf00      	nop
          }
          break;
 8008774:	e004      	b.n	8008780 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fb48 	bl	8008e0e <USBD_CtlError>
          break;
 800877e:	bf00      	nop
      }
      break;
 8008780:	e004      	b.n	800878c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb42 	bl	8008e0e <USBD_CtlError>
      break;
 800878a:	bf00      	nop
  }

  return ret;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
	...

08008798 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	2b0e      	cmp	r3, #14
 80087ba:	f200 8152 	bhi.w	8008a62 <USBD_GetDescriptor+0x2ca>
 80087be:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <USBD_GetDescriptor+0x2c>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	08008835 	.word	0x08008835
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	0800888d 	.word	0x0800888d
 80087d0:	08008a63 	.word	0x08008a63
 80087d4:	08008a63 	.word	0x08008a63
 80087d8:	08008a03 	.word	0x08008a03
 80087dc:	08008a2f 	.word	0x08008a2f
 80087e0:	08008a63 	.word	0x08008a63
 80087e4:	08008a63 	.word	0x08008a63
 80087e8:	08008a63 	.word	0x08008a63
 80087ec:	08008a63 	.word	0x08008a63
 80087f0:	08008a63 	.word	0x08008a63
 80087f4:	08008a63 	.word	0x08008a63
 80087f8:	08008a63 	.word	0x08008a63
 80087fc:	08008801 	.word	0x08008801
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	7c12      	ldrb	r2, [r2, #16]
 8008818:	f107 0108 	add.w	r1, r7, #8
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008822:	e126      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 faf1 	bl	8008e0e <USBD_CtlError>
        err++;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	3301      	adds	r3, #1
 8008830:	72fb      	strb	r3, [r7, #11]
      break;
 8008832:	e11e      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	7c12      	ldrb	r2, [r2, #16]
 8008840:	f107 0108 	add.w	r1, r7, #8
 8008844:	4610      	mov	r0, r2
 8008846:	4798      	blx	r3
 8008848:	60f8      	str	r0, [r7, #12]
      break;
 800884a:	e112      	b.n	8008a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7c1b      	ldrb	r3, [r3, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10d      	bne.n	8008870 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f107 0208 	add.w	r2, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800886e:	e100      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	f107 0208 	add.w	r2, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3301      	adds	r3, #1
 8008886:	2202      	movs	r2, #2
 8008888:	701a      	strb	r2, [r3, #0]
      break;
 800888a:	e0f2      	b.n	8008a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b05      	cmp	r3, #5
 8008894:	f200 80ac 	bhi.w	80089f0 <USBD_GetDescriptor+0x258>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <USBD_GetDescriptor+0x108>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088b9 	.word	0x080088b9
 80088a4:	080088ed 	.word	0x080088ed
 80088a8:	08008921 	.word	0x08008921
 80088ac:	08008955 	.word	0x08008955
 80088b0:	08008989 	.word	0x08008989
 80088b4:	080089bd 	.word	0x080089bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	7c12      	ldrb	r2, [r2, #16]
 80088d0:	f107 0108 	add.w	r1, r7, #8
 80088d4:	4610      	mov	r0, r2
 80088d6:	4798      	blx	r3
 80088d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088da:	e091      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fa95 	bl	8008e0e <USBD_CtlError>
            err++;
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	3301      	adds	r3, #1
 80088e8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ea:	e089      	b.n	8008a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	7c12      	ldrb	r2, [r2, #16]
 8008904:	f107 0108 	add.w	r1, r7, #8
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
 800890c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890e:	e077      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008910:	6839      	ldr	r1, [r7, #0]
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa7b 	bl	8008e0e <USBD_CtlError>
            err++;
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	3301      	adds	r3, #1
 800891c:	72fb      	strb	r3, [r7, #11]
          break;
 800891e:	e06f      	b.n	8008a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00b      	beq.n	8008944 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	7c12      	ldrb	r2, [r2, #16]
 8008938:	f107 0108 	add.w	r1, r7, #8
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008942:	e05d      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008944:	6839      	ldr	r1, [r7, #0]
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa61 	bl	8008e0e <USBD_CtlError>
            err++;
 800894c:	7afb      	ldrb	r3, [r7, #11]
 800894e:	3301      	adds	r3, #1
 8008950:	72fb      	strb	r3, [r7, #11]
          break;
 8008952:	e055      	b.n	8008a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7c12      	ldrb	r2, [r2, #16]
 800896c:	f107 0108 	add.w	r1, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008976:	e043      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fa47 	bl	8008e0e <USBD_CtlError>
            err++;
 8008980:	7afb      	ldrb	r3, [r7, #11]
 8008982:	3301      	adds	r3, #1
 8008984:	72fb      	strb	r3, [r7, #11]
          break;
 8008986:	e03b      	b.n	8008a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800898e:	695b      	ldr	r3, [r3, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00b      	beq.n	80089ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800899a:	695b      	ldr	r3, [r3, #20]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	7c12      	ldrb	r2, [r2, #16]
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	4610      	mov	r0, r2
 80089a6:	4798      	blx	r3
 80089a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089aa:	e029      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 fa2d 	bl	8008e0e <USBD_CtlError>
            err++;
 80089b4:	7afb      	ldrb	r3, [r7, #11]
 80089b6:	3301      	adds	r3, #1
 80089b8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ba:	e021      	b.n	8008a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	7c12      	ldrb	r2, [r2, #16]
 80089d4:	f107 0108 	add.w	r1, r7, #8
 80089d8:	4610      	mov	r0, r2
 80089da:	4798      	blx	r3
 80089dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089de:	e00f      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fa13 	bl	8008e0e <USBD_CtlError>
            err++;
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	3301      	adds	r3, #1
 80089ec:	72fb      	strb	r3, [r7, #11]
          break;
 80089ee:	e007      	b.n	8008a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fa0b 	bl	8008e0e <USBD_CtlError>
          err++;
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	3301      	adds	r3, #1
 80089fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089fe:	e038      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
 8008a00:	e037      	b.n	8008a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	7c1b      	ldrb	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	f107 0208 	add.w	r2, r7, #8
 8008a16:	4610      	mov	r0, r2
 8008a18:	4798      	blx	r3
 8008a1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a1c:	e029      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f9f4 	bl	8008e0e <USBD_CtlError>
        err++;
 8008a26:	7afb      	ldrb	r3, [r7, #11]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a2c:	e021      	b.n	8008a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7c1b      	ldrb	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10d      	bne.n	8008a52 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3e:	f107 0208 	add.w	r2, r7, #8
 8008a42:	4610      	mov	r0, r2
 8008a44:	4798      	blx	r3
 8008a46:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a50:	e00f      	b.n	8008a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9da 	bl	8008e0e <USBD_CtlError>
        err++;
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a60:	e007      	b.n	8008a72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9d2 	bl	8008e0e <USBD_CtlError>
      err++;
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a70:	bf00      	nop
  }

  if (err != 0U)
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d11c      	bne.n	8008ab2 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d011      	beq.n	8008aa2 <USBD_GetDescriptor+0x30a>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88db      	ldrh	r3, [r3, #6]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00d      	beq.n	8008aa2 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88da      	ldrh	r2, [r3, #6]
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bf28      	it	cs
 8008a90:	4613      	movcs	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a96:	893b      	ldrh	r3, [r7, #8]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	68f9      	ldr	r1, [r7, #12]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fa21 	bl	8008ee4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	88db      	ldrh	r3, [r3, #6]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d104      	bne.n	8008ab4 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fa78 	bl	8008fa0 <USBD_CtlSendStatus>
 8008ab0:	e000      	b.n	8008ab4 <USBD_GetDescriptor+0x31c>
    return;
 8008ab2:	bf00      	nop
    }
  }
}
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop

08008abc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	889b      	ldrh	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d130      	bne.n	8008b30 <USBD_SetAddress+0x74>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88db      	ldrh	r3, [r3, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d12c      	bne.n	8008b30 <USBD_SetAddress+0x74>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	885b      	ldrh	r3, [r3, #2]
 8008ada:	2b7f      	cmp	r3, #127	; 0x7f
 8008adc:	d828      	bhi.n	8008b30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d104      	bne.n	8008afe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f989 	bl	8008e0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afc:	e01c      	b.n	8008b38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	7bfa      	ldrb	r2, [r7, #15]
 8008b02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f8fc 	bl	8009d08 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fa45 	bl	8008fa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	e008      	b.n	8008b38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2e:	e003      	b.n	8008b38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f96b 	bl	8008e0e <USBD_CtlError>
  }
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	4b41      	ldr	r3, [pc, #260]	; (8008c58 <USBD_SetConfig+0x118>)
 8008b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b54:	4b40      	ldr	r3, [pc, #256]	; (8008c58 <USBD_SetConfig+0x118>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d904      	bls.n	8008b66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f955 	bl	8008e0e <USBD_CtlError>
 8008b64:	e075      	b.n	8008c52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d002      	beq.n	8008b76 <USBD_SetConfig+0x36>
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d023      	beq.n	8008bbc <USBD_SetConfig+0x7c>
 8008b74:	e062      	b.n	8008c3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b76:	4b38      	ldr	r3, [pc, #224]	; (8008c58 <USBD_SetConfig+0x118>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01a      	beq.n	8008bb4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b7e:	4b36      	ldr	r3, [pc, #216]	; (8008c58 <USBD_SetConfig+0x118>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2203      	movs	r2, #3
 8008b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b90:	4b31      	ldr	r3, [pc, #196]	; (8008c58 <USBD_SetConfig+0x118>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff f98a 	bl	8007eb0 <USBD_SetClassConfig>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d104      	bne.n	8008bac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f932 	bl	8008e0e <USBD_CtlError>
            return;
 8008baa:	e052      	b.n	8008c52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f9f7 	bl	8008fa0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bb2:	e04e      	b.n	8008c52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f9f3 	bl	8008fa0 <USBD_CtlSendStatus>
        break;
 8008bba:	e04a      	b.n	8008c52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008bbc:	4b26      	ldr	r3, [pc, #152]	; (8008c58 <USBD_SetConfig+0x118>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d112      	bne.n	8008bea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008bcc:	4b22      	ldr	r3, [pc, #136]	; (8008c58 <USBD_SetConfig+0x118>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008bd6:	4b20      	ldr	r3, [pc, #128]	; (8008c58 <USBD_SetConfig+0x118>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff f986 	bl	8007eee <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f9dc 	bl	8008fa0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008be8:	e033      	b.n	8008c52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008bea:	4b1b      	ldr	r3, [pc, #108]	; (8008c58 <USBD_SetConfig+0x118>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d01d      	beq.n	8008c34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff f974 	bl	8007eee <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <USBD_SetConfig+0x118>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c10:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <USBD_SetConfig+0x118>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff f94a 	bl	8007eb0 <USBD_SetClassConfig>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d104      	bne.n	8008c2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f8f2 	bl	8008e0e <USBD_CtlError>
            return;
 8008c2a:	e012      	b.n	8008c52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f9b7 	bl	8008fa0 <USBD_CtlSendStatus>
        break;
 8008c32:	e00e      	b.n	8008c52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f9b3 	bl	8008fa0 <USBD_CtlSendStatus>
        break;
 8008c3a:	e00a      	b.n	8008c52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f8e5 	bl	8008e0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c44:	4b04      	ldr	r3, [pc, #16]	; (8008c58 <USBD_SetConfig+0x118>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff f94f 	bl	8007eee <USBD_ClrClassConfig>
        break;
 8008c50:	bf00      	nop
    }
  }
}
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20004e2c 	.word	0x20004e2c

08008c5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d004      	beq.n	8008c78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8cc 	bl	8008e0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c76:	e021      	b.n	8008cbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	db17      	blt.n	8008cb2 <USBD_GetConfig+0x56>
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	dd02      	ble.n	8008c8c <USBD_GetConfig+0x30>
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d00b      	beq.n	8008ca2 <USBD_GetConfig+0x46>
 8008c8a:	e012      	b.n	8008cb2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3308      	adds	r3, #8
 8008c96:	2201      	movs	r2, #1
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f922 	bl	8008ee4 <USBD_CtlSendData>
        break;
 8008ca0:	e00c      	b.n	8008cbc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f91a 	bl	8008ee4 <USBD_CtlSendData>
        break;
 8008cb0:	e004      	b.n	8008cbc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8aa 	bl	8008e0e <USBD_CtlError>
        break;
 8008cba:	bf00      	nop
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d81e      	bhi.n	8008d18 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	88db      	ldrh	r3, [r3, #6]
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d004      	beq.n	8008cec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f892 	bl	8008e0e <USBD_CtlError>
        break;
 8008cea:	e01a      	b.n	8008d22 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d005      	beq.n	8008d08 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	f043 0202 	orr.w	r2, r3, #2
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8e7 	bl	8008ee4 <USBD_CtlSendData>
      break;
 8008d16:	e004      	b.n	8008d22 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f877 	bl	8008e0e <USBD_CtlError>
      break;
 8008d20:	bf00      	nop
  }
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	885b      	ldrh	r3, [r3, #2]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f92b 	bl	8008fa0 <USBD_CtlSendStatus>
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d80b      	bhi.n	8008d80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	885b      	ldrh	r3, [r3, #2]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10c      	bne.n	8008d8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f911 	bl	8008fa0 <USBD_CtlSendStatus>
      }
      break;
 8008d7e:	e004      	b.n	8008d8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f843 	bl	8008e0e <USBD_CtlError>
      break;
 8008d88:	e000      	b.n	8008d8c <USBD_ClrFeature+0x3a>
      break;
 8008d8a:	bf00      	nop
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	785a      	ldrb	r2, [r3, #1]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	3302      	adds	r3, #2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	3303      	adds	r3, #3
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	3305      	adds	r3, #5
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4413      	add	r3, r2
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	3306      	adds	r3, #6
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	3307      	adds	r3, #7
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	80da      	strh	r2, [r3, #6]

}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b082      	sub	sp, #8
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e18:	2180      	movs	r1, #128	; 0x80
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fedc 	bl	8009bd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e20:	2100      	movs	r1, #0
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fed8 	bl	8009bd8 <USBD_LL_StallEP>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d032      	beq.n	8008eac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f834 	bl	8008eb4 <USBD_GetLen>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	75fa      	strb	r2, [r7, #23]
 8008e60:	461a      	mov	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	7812      	ldrb	r2, [r2, #0]
 8008e6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	75fa      	strb	r2, [r7, #23]
 8008e72:	461a      	mov	r2, r3
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	4413      	add	r3, r2
 8008e78:	2203      	movs	r2, #3
 8008e7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e7c:	e012      	b.n	8008ea4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	60fa      	str	r2, [r7, #12]
 8008e84:	7dfa      	ldrb	r2, [r7, #23]
 8008e86:	1c51      	adds	r1, r2, #1
 8008e88:	75f9      	strb	r1, [r7, #23]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	440a      	add	r2, r1
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	75fa      	strb	r2, [r7, #23]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e8      	bne.n	8008e7e <USBD_GetString+0x4e>
    }
  }
}
 8008eac:	bf00      	nop
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008ec0:	e005      	b.n	8008ece <USBD_GetLen+0x1a>
  {
    len++;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f5      	bne.n	8008ec2 <USBD_GetLen+0xe>
  }

  return len;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008efa:	88fa      	ldrh	r2, [r7, #6]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f06:	88fb      	ldrh	r3, [r7, #6]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 ff31 	bl	8009d74 <USBD_LL_Transmit>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 ff1f 	bl	8009d74 <USBD_LL_Transmit>

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2203      	movs	r2, #3
 8008f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f000 ff3b 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	2100      	movs	r1, #0
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 ff29 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2204      	movs	r2, #4
 8008fac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fedc 	bl	8009d74 <USBD_LL_Transmit>

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2100      	movs	r1, #0
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 ff03 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4912      	ldr	r1, [pc, #72]	; (800903c <MX_USB_DEVICE_Init+0x50>)
 8008ff4:	4812      	ldr	r0, [pc, #72]	; (8009040 <MX_USB_DEVICE_Init+0x54>)
 8008ff6:	f7fe feff 	bl	8007df8 <USBD_Init>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009000:	f7f7 fc04 	bl	800080c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009004:	490f      	ldr	r1, [pc, #60]	; (8009044 <MX_USB_DEVICE_Init+0x58>)
 8009006:	480e      	ldr	r0, [pc, #56]	; (8009040 <MX_USB_DEVICE_Init+0x54>)
 8009008:	f7fe ff21 	bl	8007e4e <USBD_RegisterClass>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009012:	f7f7 fbfb 	bl	800080c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009016:	490c      	ldr	r1, [pc, #48]	; (8009048 <MX_USB_DEVICE_Init+0x5c>)
 8009018:	4809      	ldr	r0, [pc, #36]	; (8009040 <MX_USB_DEVICE_Init+0x54>)
 800901a:	f7fe fe4f 	bl	8007cbc <USBD_CDC_RegisterInterface>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009024:	f7f7 fbf2 	bl	800080c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009028:	4805      	ldr	r0, [pc, #20]	; (8009040 <MX_USB_DEVICE_Init+0x54>)
 800902a:	f7fe ff2a 	bl	8007e82 <USBD_Start>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009034:	f7f7 fbea 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009038:	bf00      	nop
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000134 	.word	0x20000134
 8009040:	2000512c 	.word	0x2000512c
 8009044:	20000018 	.word	0x20000018
 8009048:	20000124 	.word	0x20000124

0800904c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /*##-1- Configure the UART peripheral ######################################*/
  	  /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	  huart2.Instance = USART2;
 8009050:	4b26      	ldr	r3, [pc, #152]	; (80090ec <CDC_Init_FS+0xa0>)
 8009052:	4a27      	ldr	r2, [pc, #156]	; (80090f0 <CDC_Init_FS+0xa4>)
 8009054:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8009056:	4b25      	ldr	r3, [pc, #148]	; (80090ec <CDC_Init_FS+0xa0>)
 8009058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800905c:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800905e:	4b23      	ldr	r3, [pc, #140]	; (80090ec <CDC_Init_FS+0xa0>)
 8009060:	2200      	movs	r2, #0
 8009062:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8009064:	4b21      	ldr	r3, [pc, #132]	; (80090ec <CDC_Init_FS+0xa0>)
 8009066:	2200      	movs	r2, #0
 8009068:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 800906a:	4b20      	ldr	r3, [pc, #128]	; (80090ec <CDC_Init_FS+0xa0>)
 800906c:	2200      	movs	r2, #0
 800906e:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8009070:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <CDC_Init_FS+0xa0>)
 8009072:	220c      	movs	r2, #12
 8009074:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009076:	4b1d      	ldr	r3, [pc, #116]	; (80090ec <CDC_Init_FS+0xa0>)
 8009078:	2200      	movs	r2, #0
 800907a:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800907c:	4b1b      	ldr	r3, [pc, #108]	; (80090ec <CDC_Init_FS+0xa0>)
 800907e:	2200      	movs	r2, #0
 8009080:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009082:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <CDC_Init_FS+0xa0>)
 8009084:	2200      	movs	r2, #0
 8009086:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009088:	4b18      	ldr	r3, [pc, #96]	; (80090ec <CDC_Init_FS+0xa0>)
 800908a:	2200      	movs	r2, #0
 800908c:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800908e:	4817      	ldr	r0, [pc, #92]	; (80090ec <CDC_Init_FS+0xa0>)
 8009090:	f7fb ff02 	bl	8004e98 <HAL_UART_Init>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <CDC_Init_FS+0x52>
	  {
	    Error_Handler();
 800909a:	f7f7 fbb7 	bl	800080c <Error_Handler>
	  }

  	  /*##-2- Put UART peripheral in IT reception process ########################*/
  	  /* Any data received will be stored in "UserTxBuffer" buffer  */
  	  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 800909e:	2201      	movs	r2, #1
 80090a0:	4914      	ldr	r1, [pc, #80]	; (80090f4 <CDC_Init_FS+0xa8>)
 80090a2:	4812      	ldr	r0, [pc, #72]	; (80090ec <CDC_Init_FS+0xa0>)
 80090a4:	f7fc f8dc 	bl	8005260 <HAL_UART_Receive_IT>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <CDC_Init_FS+0x66>
  	  {
  	    /* Transfer error in reception process */
  	    Error_Handler();
 80090ae:	f7f7 fbad 	bl	800080c <Error_Handler>
  	  }

  	  /*##-3- Configure the TIM Base generation  #################################*/
  	  TIM_Config();
 80090b2:	f000 f9ed 	bl	8009490 <TIM_Config>

  	  /*##-4- Start the TIM Base generation in interrupt mode ####################*/
  	  /* Start Channel1 */
  	  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 80090b6:	4810      	ldr	r0, [pc, #64]	; (80090f8 <CDC_Init_FS+0xac>)
 80090b8:	f7fb fcc4 	bl	8004a44 <HAL_TIM_Base_Start_IT>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <CDC_Init_FS+0x7a>
  	  {
  	    /* Starting Error */
  	    Error_Handler();
 80090c2:	f7f7 fba3 	bl	800080c <Error_Handler>
  	  }

  	  __HAL_DBGMCU_FREEZE_TIM3();
 80090c6:	4b0d      	ldr	r3, [pc, #52]	; (80090fc <CDC_Init_FS+0xb0>)
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	4a0c      	ldr	r2, [pc, #48]	; (80090fc <CDC_Init_FS+0xb0>)
 80090cc:	f043 0302 	orr.w	r3, r3, #2
 80090d0:	6093      	str	r3, [r2, #8]

  	  /*##-5- Set Application Buffers ############################################*/
  	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090d2:	2200      	movs	r2, #0
 80090d4:	4907      	ldr	r1, [pc, #28]	; (80090f4 <CDC_Init_FS+0xa8>)
 80090d6:	480a      	ldr	r0, [pc, #40]	; (8009100 <CDC_Init_FS+0xb4>)
 80090d8:	f7fe fe07 	bl	8007cea <USBD_CDC_SetTxBuffer>
  	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090dc:	4909      	ldr	r1, [pc, #36]	; (8009104 <CDC_Init_FS+0xb8>)
 80090de:	4808      	ldr	r0, [pc, #32]	; (8009100 <CDC_Init_FS+0xb4>)
 80090e0:	f7fe fe1d 	bl	8007d1e <USBD_CDC_SetRxBuffer>

  	  return (USBD_OK);
 80090e4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200050a8 	.word	0x200050a8
 80090f0:	40004400 	.word	0x40004400
 80090f4:	20005bf4 	.word	0x20005bf4
 80090f8:	200063f4 	.word	0x200063f4
 80090fc:	e0042000 	.word	0xe0042000
 8009100:	2000512c 	.word	0x2000512c
 8009104:	200053f4 	.word	0x200053f4

08009108 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

	    /* DeInitialize the UART peripheral */
	    if(HAL_UART_DeInit(&huart2) != HAL_OK)
 800910c:	4805      	ldr	r0, [pc, #20]	; (8009124 <CDC_DeInit_FS+0x1c>)
 800910e:	f7fb ff11 	bl	8004f34 <HAL_UART_DeInit>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <CDC_DeInit_FS+0x14>
	    {
	      /* Initialization Error */
	      Error_Handler();
 8009118:	f7f7 fb78 	bl	800080c <Error_Handler>
	    }
	    return (USBD_OK);
 800911c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800911e:	4618      	mov	r0, r3
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	200050a8 	.word	0x200050a8

08009128 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
 8009134:	4613      	mov	r3, r2
 8009136:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2b23      	cmp	r3, #35	; 0x23
 800913c:	f200 809a 	bhi.w	8009274 <CDC_Control_FS+0x14c>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <CDC_Control_FS+0x20>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	08009275 	.word	0x08009275
 800914c:	08009275 	.word	0x08009275
 8009150:	08009275 	.word	0x08009275
 8009154:	08009275 	.word	0x08009275
 8009158:	08009275 	.word	0x08009275
 800915c:	08009275 	.word	0x08009275
 8009160:	08009275 	.word	0x08009275
 8009164:	08009275 	.word	0x08009275
 8009168:	08009275 	.word	0x08009275
 800916c:	08009275 	.word	0x08009275
 8009170:	08009275 	.word	0x08009275
 8009174:	08009275 	.word	0x08009275
 8009178:	08009275 	.word	0x08009275
 800917c:	08009275 	.word	0x08009275
 8009180:	08009275 	.word	0x08009275
 8009184:	08009275 	.word	0x08009275
 8009188:	08009275 	.word	0x08009275
 800918c:	08009275 	.word	0x08009275
 8009190:	08009275 	.word	0x08009275
 8009194:	08009275 	.word	0x08009275
 8009198:	08009275 	.word	0x08009275
 800919c:	08009275 	.word	0x08009275
 80091a0:	08009275 	.word	0x08009275
 80091a4:	08009275 	.word	0x08009275
 80091a8:	08009275 	.word	0x08009275
 80091ac:	08009275 	.word	0x08009275
 80091b0:	08009275 	.word	0x08009275
 80091b4:	08009275 	.word	0x08009275
 80091b8:	08009275 	.word	0x08009275
 80091bc:	08009275 	.word	0x08009275
 80091c0:	08009275 	.word	0x08009275
 80091c4:	08009275 	.word	0x08009275
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	08009221 	.word	0x08009221
 80091d0:	08009275 	.word	0x08009275
 80091d4:	08009275 	.word	0x08009275
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	3302      	adds	r3, #2
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	041b      	lsls	r3, r3, #16
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80091f0:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	3303      	adds	r3, #3
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	4313      	orrs	r3, r2
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80091fc:	461a      	mov	r2, r3
 80091fe:	4b20      	ldr	r3, [pc, #128]	; (8009280 <CDC_Control_FS+0x158>)
 8009200:	601a      	str	r2, [r3, #0]
      LineCoding.format     = pbuf[4];
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	791a      	ldrb	r2, [r3, #4]
 8009206:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <CDC_Control_FS+0x158>)
 8009208:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	795a      	ldrb	r2, [r3, #5]
 800920e:	4b1c      	ldr	r3, [pc, #112]	; (8009280 <CDC_Control_FS+0x158>)
 8009210:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	799a      	ldrb	r2, [r3, #6]
 8009216:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <CDC_Control_FS+0x158>)
 8009218:	719a      	strb	r2, [r3, #6]

      /* Set the new configuration */
      ComPort_Config();
 800921a:	f000 f8bf 	bl	800939c <ComPort_Config>
      break;
 800921e:	e02a      	b.n	8009276 <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8009220:	4b17      	ldr	r3, [pc, #92]	; (8009280 <CDC_Control_FS+0x158>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	b2da      	uxtb	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800922a:	4b15      	ldr	r3, [pc, #84]	; (8009280 <CDC_Control_FS+0x158>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	0a1a      	lsrs	r2, r3, #8
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	3301      	adds	r3, #1
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8009238:	4b11      	ldr	r3, [pc, #68]	; (8009280 <CDC_Control_FS+0x158>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	0c1a      	lsrs	r2, r3, #16
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	3302      	adds	r3, #2
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8009246:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <CDC_Control_FS+0x158>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	0e1a      	lsrs	r2, r3, #24
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	3303      	adds	r3, #3
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	3304      	adds	r3, #4
 8009258:	4a09      	ldr	r2, [pc, #36]	; (8009280 <CDC_Control_FS+0x158>)
 800925a:	7912      	ldrb	r2, [r2, #4]
 800925c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	3305      	adds	r3, #5
 8009262:	4a07      	ldr	r2, [pc, #28]	; (8009280 <CDC_Control_FS+0x158>)
 8009264:	7952      	ldrb	r2, [r2, #5]
 8009266:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	3306      	adds	r3, #6
 800926c:	4a04      	ldr	r2, [pc, #16]	; (8009280 <CDC_Control_FS+0x158>)
 800926e:	7992      	ldrb	r2, [r2, #6]
 8009270:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8009272:	e000      	b.n	8009276 <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009274:	bf00      	nop
  }

  return (USBD_OK);
 8009276:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	2000011c 	.word	0x2000011c

08009284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 HAL_UART_Transmit_DMA(&huart2, Buf, *Len);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	461a      	mov	r2, r3
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4803      	ldr	r0, [pc, #12]	; (80092a8 <CDC_Receive_FS+0x24>)
 800929a:	f7fc f883 	bl	80053a4 <HAL_UART_Transmit_DMA>
	  return (USBD_OK);
 800929e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	200050a8 	.word	0x200050a8

080092ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 80092b4:	4b1d      	ldr	r3, [pc, #116]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b1d      	ldr	r3, [pc, #116]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d031      	beq.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* rollback */
 80092c0:	4b1a      	ldr	r3, [pc, #104]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d905      	bls.n	80092d8 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 80092cc:	4b17      	ldr	r3, [pc, #92]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e005      	b.n	80092e4 <HAL_TIM_PeriodElapsedCallback+0x38>
    }
    else
    {
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	4b13      	ldr	r3, [pc, #76]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 80092e4:	4b11      	ldr	r3, [pc, #68]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	4a11      	ldr	r2, [pc, #68]	; (8009334 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80092ee:	4413      	add	r3, r2
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	b292      	uxth	r2, r2
 80092f4:	4619      	mov	r1, r3
 80092f6:	4810      	ldr	r0, [pc, #64]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80092f8:	f7fe fcf7 	bl	8007cea <USBD_CDC_SetTxBuffer>

    if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 80092fc:	480e      	ldr	r0, [pc, #56]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80092fe:	f7fe fd22 	bl	8007d46 <USBD_CDC_TransmitPacket>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10d      	bne.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
      UserTxBufPtrOut += buffsize;
 8009308:	4b08      	ldr	r3, [pc, #32]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4413      	add	r3, r2
 8009310:	4a06      	ldr	r2, [pc, #24]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009312:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800931c:	d102      	bne.n	8009324 <HAL_TIM_PeriodElapsedCallback+0x78>
      {
        UserTxBufPtrOut = 0;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8009324:	bf00      	nop
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20004e34 	.word	0x20004e34
 8009330:	20004e30 	.word	0x20004e30
 8009334:	20005bf4 	.word	0x20005bf4
 8009338:	2000512c 	.word	0x2000512c

0800933c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <HAL_UART_RxCpltCallback+0x3c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <HAL_UART_RxCpltCallback+0x3c>)
 800934c:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 800934e:	4b0a      	ldr	r3, [pc, #40]	; (8009378 <HAL_UART_RxCpltCallback+0x3c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009356:	d102      	bne.n	800935e <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8009358:	4b07      	ldr	r3, [pc, #28]	; (8009378 <HAL_UART_RxCpltCallback+0x3c>)
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 800935e:	4b06      	ldr	r3, [pc, #24]	; (8009378 <HAL_UART_RxCpltCallback+0x3c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a06      	ldr	r2, [pc, #24]	; (800937c <HAL_UART_RxCpltCallback+0x40>)
 8009364:	4413      	add	r3, r2
 8009366:	2201      	movs	r2, #1
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7fb ff78 	bl	8005260 <HAL_UART_Receive_IT>
  //Toggle_Leds();
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20004e30 	.word	0x20004e30
 800937c:	20005bf4 	.word	0x20005bf4

08009380 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009388:	4803      	ldr	r0, [pc, #12]	; (8009398 <HAL_UART_TxCpltCallback+0x18>)
 800938a:	f7fe fd0b 	bl	8007da4 <USBD_CDC_ReceivePacket>
  //Toggle_Leds();
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000512c 	.word	0x2000512c

0800939c <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart2) != HAL_OK)
 80093a0:	4837      	ldr	r0, [pc, #220]	; (8009480 <ComPort_Config+0xe4>)
 80093a2:	f7fb fdc7 	bl	8004f34 <HAL_UART_DeInit>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d001      	beq.n	80093b0 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 80093ac:	f7f7 fa2e 	bl	800080c <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 80093b0:	4b34      	ldr	r3, [pc, #208]	; (8009484 <ComPort_Config+0xe8>)
 80093b2:	791b      	ldrb	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <ComPort_Config+0x22>
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d004      	beq.n	80093c6 <ComPort_Config+0x2a>
 80093bc:	e008      	b.n	80093d0 <ComPort_Config+0x34>
  {
  case 0:
    huart2.Init.StopBits = UART_STOPBITS_1;
 80093be:	4b30      	ldr	r3, [pc, #192]	; (8009480 <ComPort_Config+0xe4>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	60da      	str	r2, [r3, #12]
    break;
 80093c4:	e008      	b.n	80093d8 <ComPort_Config+0x3c>
  case 2:
    huart2.Init.StopBits = UART_STOPBITS_2;
 80093c6:	4b2e      	ldr	r3, [pc, #184]	; (8009480 <ComPort_Config+0xe4>)
 80093c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80093cc:	60da      	str	r2, [r3, #12]
    break;
 80093ce:	e003      	b.n	80093d8 <ComPort_Config+0x3c>
  default :
    huart2.Init.StopBits = UART_STOPBITS_1;
 80093d0:	4b2b      	ldr	r3, [pc, #172]	; (8009480 <ComPort_Config+0xe4>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	60da      	str	r2, [r3, #12]
    break;
 80093d6:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 80093d8:	4b2a      	ldr	r3, [pc, #168]	; (8009484 <ComPort_Config+0xe8>)
 80093da:	795b      	ldrb	r3, [r3, #5]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d007      	beq.n	80093f0 <ComPort_Config+0x54>
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d00a      	beq.n	80093fa <ComPort_Config+0x5e>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10d      	bne.n	8009404 <ComPort_Config+0x68>
  {
  case 0:
    huart2.Init.Parity = UART_PARITY_NONE;
 80093e8:	4b25      	ldr	r3, [pc, #148]	; (8009480 <ComPort_Config+0xe4>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	611a      	str	r2, [r3, #16]
    break;
 80093ee:	e00d      	b.n	800940c <ComPort_Config+0x70>
  case 1:
    huart2.Init.Parity = UART_PARITY_ODD;
 80093f0:	4b23      	ldr	r3, [pc, #140]	; (8009480 <ComPort_Config+0xe4>)
 80093f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80093f6:	611a      	str	r2, [r3, #16]
    break;
 80093f8:	e008      	b.n	800940c <ComPort_Config+0x70>
  case 2:
    huart2.Init.Parity = UART_PARITY_EVEN;
 80093fa:	4b21      	ldr	r3, [pc, #132]	; (8009480 <ComPort_Config+0xe4>)
 80093fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009400:	611a      	str	r2, [r3, #16]
    break;
 8009402:	e003      	b.n	800940c <ComPort_Config+0x70>
  default :
    huart2.Init.Parity = UART_PARITY_NONE;
 8009404:	4b1e      	ldr	r3, [pc, #120]	; (8009480 <ComPort_Config+0xe4>)
 8009406:	2200      	movs	r2, #0
 8009408:	611a      	str	r2, [r3, #16]
    break;
 800940a:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 800940c:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <ComPort_Config+0xe8>)
 800940e:	799b      	ldrb	r3, [r3, #6]
 8009410:	2b07      	cmp	r3, #7
 8009412:	d002      	beq.n	800941a <ComPort_Config+0x7e>
 8009414:	2b08      	cmp	r3, #8
 8009416:	d004      	beq.n	8009422 <ComPort_Config+0x86>
 8009418:	e010      	b.n	800943c <ComPort_Config+0xa0>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800941a:	4b19      	ldr	r3, [pc, #100]	; (8009480 <ComPort_Config+0xe4>)
 800941c:	2200      	movs	r2, #0
 800941e:	609a      	str	r2, [r3, #8]
    break;
 8009420:	e010      	b.n	8009444 <ComPort_Config+0xa8>
  case 0x08:
    if(huart2.Init.Parity == UART_PARITY_NONE)
 8009422:	4b17      	ldr	r3, [pc, #92]	; (8009480 <ComPort_Config+0xe4>)
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <ComPort_Config+0x96>
    {
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800942a:	4b15      	ldr	r3, [pc, #84]	; (8009480 <ComPort_Config+0xe4>)
 800942c:	2200      	movs	r2, #0
 800942e:	609a      	str	r2, [r3, #8]
    else
    {
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8009430:	e008      	b.n	8009444 <ComPort_Config+0xa8>
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <ComPort_Config+0xe4>)
 8009434:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009438:	609a      	str	r2, [r3, #8]
    break;
 800943a:	e003      	b.n	8009444 <ComPort_Config+0xa8>
  default :
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <ComPort_Config+0xe4>)
 800943e:	2200      	movs	r2, #0
 8009440:	609a      	str	r2, [r3, #8]
    break;
 8009442:	bf00      	nop
  }

  huart2.Init.BaudRate = LineCoding.bitrate;
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <ComPort_Config+0xe8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a0d      	ldr	r2, [pc, #52]	; (8009480 <ComPort_Config+0xe4>)
 800944a:	6053      	str	r3, [r2, #4]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800944c:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <ComPort_Config+0xe4>)
 800944e:	2200      	movs	r2, #0
 8009450:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode       = UART_MODE_TX_RX;
 8009452:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <ComPort_Config+0xe4>)
 8009454:	220c      	movs	r2, #12
 8009456:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart2) != HAL_OK)
 8009458:	4809      	ldr	r0, [pc, #36]	; (8009480 <ComPort_Config+0xe4>)
 800945a:	f7fb fd1d 	bl	8004e98 <HAL_UART_Init>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <ComPort_Config+0xcc>
  {
    /* Initialization Error */
    Error_Handler();
 8009464:	f7f7 f9d2 	bl	800080c <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8009468:	4b07      	ldr	r3, [pc, #28]	; (8009488 <ComPort_Config+0xec>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a07      	ldr	r2, [pc, #28]	; (800948c <ComPort_Config+0xf0>)
 800946e:	4413      	add	r3, r2
 8009470:	2201      	movs	r2, #1
 8009472:	4619      	mov	r1, r3
 8009474:	4802      	ldr	r0, [pc, #8]	; (8009480 <ComPort_Config+0xe4>)
 8009476:	f7fb fef3 	bl	8005260 <HAL_UART_Receive_IT>
}
 800947a:	bf00      	nop
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200050a8 	.word	0x200050a8
 8009484:	2000011c 	.word	0x2000011c
 8009488:	20004e30 	.word	0x20004e30
 800948c:	20005bf4 	.word	0x20005bf4

08009490 <TIM_Config>:
  * @brief  TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void TIM_Config(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8009494:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <TIM_Config+0x38>)
 8009496:	4a0d      	ldr	r2, [pc, #52]	; (80094cc <TIM_Config+0x3c>)
 8009498:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 800949a:	4b0b      	ldr	r3, [pc, #44]	; (80094c8 <TIM_Config+0x38>)
 800949c:	f241 3287 	movw	r2, #4999	; 0x1387
 80094a0:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 84-1;
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <TIM_Config+0x38>)
 80094a4:	2253      	movs	r2, #83	; 0x53
 80094a6:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <TIM_Config+0x38>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <TIM_Config+0x38>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 80094b4:	4804      	ldr	r0, [pc, #16]	; (80094c8 <TIM_Config+0x38>)
 80094b6:	f7fb fa8f 	bl	80049d8 <HAL_TIM_Base_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <TIM_Config+0x34>
  {
    /* Initialization Error */
    Error_Handler();
 80094c0:	f7f7 f9a4 	bl	800080c <Error_Handler>
  }
}
 80094c4:	bf00      	nop
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200063f4 	.word	0x200063f4
 80094cc:	40000400 	.word	0x40000400

080094d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  huart2: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Transfer error occured in reception and/or transmission process */
  Error_Handler();
 80094d8:	f7f7 f998 	bl	800080c <Error_Handler>
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2212      	movs	r2, #18
 80094f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094f6:	4b03      	ldr	r3, [pc, #12]	; (8009504 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20000154 	.word	0x20000154

08009508 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	6039      	str	r1, [r7, #0]
 8009512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2204      	movs	r2, #4
 8009518:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800951a:	4b03      	ldr	r3, [pc, #12]	; (8009528 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	20000174 	.word	0x20000174

0800952c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	6039      	str	r1, [r7, #0]
 8009536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	4907      	ldr	r1, [pc, #28]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 8009542:	4808      	ldr	r0, [pc, #32]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009544:	f7ff fc74 	bl	8008e30 <USBD_GetString>
 8009548:	e004      	b.n	8009554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4904      	ldr	r1, [pc, #16]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
 800954e:	4805      	ldr	r0, [pc, #20]	; (8009564 <USBD_FS_ProductStrDescriptor+0x38>)
 8009550:	f7ff fc6e 	bl	8008e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20006434 	.word	0x20006434
 8009564:	0800a994 	.word	0x0800a994

08009568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	4904      	ldr	r1, [pc, #16]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800957a:	f7ff fc59 	bl	8008e30 <USBD_GetString>
  return USBD_StrDesc;
 800957e:	4b02      	ldr	r3, [pc, #8]	; (8009588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20006434 	.word	0x20006434
 800958c:	0800a9ac 	.word	0x0800a9ac

08009590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	221a      	movs	r2, #26
 80095a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80095a2:	f000 f855 	bl	8009650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80095a6:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000178 	.word	0x20000178

080095b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4907      	ldr	r1, [pc, #28]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095cc:	f7ff fc30 	bl	8008e30 <USBD_GetString>
 80095d0:	e004      	b.n	80095dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80095d8:	f7ff fc2a 	bl	8008e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20006434 	.word	0x20006434
 80095ec:	0800a9c0 	.word	0x0800a9c0

080095f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d105      	bne.n	800960e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4907      	ldr	r1, [pc, #28]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009606:	4808      	ldr	r0, [pc, #32]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009608:	f7ff fc12 	bl	8008e30 <USBD_GetString>
 800960c:	e004      	b.n	8009618 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009612:	4805      	ldr	r0, [pc, #20]	; (8009628 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009614:	f7ff fc0c 	bl	8008e30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20006434 	.word	0x20006434
 8009628:	0800a9cc 	.word	0x0800a9cc

0800962c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	6039      	str	r1, [r7, #0]
 8009636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	220c      	movs	r2, #12
 800963c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800963e:	4b03      	ldr	r3, [pc, #12]	; (800964c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	20000168 	.word	0x20000168

08009650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009656:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <Get_SerialNum+0x44>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800965c:	4b0e      	ldr	r3, [pc, #56]	; (8009698 <Get_SerialNum+0x48>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009662:	4b0e      	ldr	r3, [pc, #56]	; (800969c <Get_SerialNum+0x4c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4413      	add	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009676:	2208      	movs	r2, #8
 8009678:	4909      	ldr	r1, [pc, #36]	; (80096a0 <Get_SerialNum+0x50>)
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 f814 	bl	80096a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009680:	2204      	movs	r2, #4
 8009682:	4908      	ldr	r1, [pc, #32]	; (80096a4 <Get_SerialNum+0x54>)
 8009684:	68b8      	ldr	r0, [r7, #8]
 8009686:	f000 f80f 	bl	80096a8 <IntToUnicode>
  }
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	1fff7590 	.word	0x1fff7590
 8009698:	1fff7594 	.word	0x1fff7594
 800969c:	1fff7598 	.word	0x1fff7598
 80096a0:	2000017a 	.word	0x2000017a
 80096a4:	2000018a 	.word	0x2000018a

080096a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	4613      	mov	r3, r2
 80096b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80096ba:	2300      	movs	r3, #0
 80096bc:	75fb      	strb	r3, [r7, #23]
 80096be:	e027      	b.n	8009710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	0f1b      	lsrs	r3, r3, #28
 80096c4:	2b09      	cmp	r3, #9
 80096c6:	d80b      	bhi.n	80096e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	0f1b      	lsrs	r3, r3, #28
 80096cc:	b2da      	uxtb	r2, r3
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	005b      	lsls	r3, r3, #1
 80096d2:	4619      	mov	r1, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	440b      	add	r3, r1
 80096d8:	3230      	adds	r2, #48	; 0x30
 80096da:	b2d2      	uxtb	r2, r2
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e00a      	b.n	80096f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	0f1b      	lsrs	r3, r3, #28
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	7dfb      	ldrb	r3, [r7, #23]
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	4619      	mov	r1, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	440b      	add	r3, r1
 80096f0:	3237      	adds	r2, #55	; 0x37
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	3301      	adds	r3, #1
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	4413      	add	r3, r2
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	3301      	adds	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
 8009710:	7dfa      	ldrb	r2, [r7, #23]
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	429a      	cmp	r2, r3
 8009716:	d3d3      	bcc.n	80096c0 <IntToUnicode+0x18>
  }
}
 8009718:	bf00      	nop
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08a      	sub	sp, #40	; 0x28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800972c:	f107 0314 	add.w	r3, r7, #20
 8009730:	2200      	movs	r2, #0
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	605a      	str	r2, [r3, #4]
 8009736:	609a      	str	r2, [r3, #8]
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009744:	d14e      	bne.n	80097e4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009746:	4b29      	ldr	r3, [pc, #164]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	4a28      	ldr	r2, [pc, #160]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009752:	4b26      	ldr	r3, [pc, #152]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 8009754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800975e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009764:	2302      	movs	r3, #2
 8009766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800976c:	2303      	movs	r3, #3
 800976e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009770:	230a      	movs	r3, #10
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009774:	f107 0314 	add.w	r3, r7, #20
 8009778:	4619      	mov	r1, r3
 800977a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800977e:	f7f8 fac9 	bl	8001d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 8009784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009786:	4a19      	ldr	r2, [pc, #100]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 8009788:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800978c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800978e:	4b17      	ldr	r3, [pc, #92]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800979a:	4b14      	ldr	r3, [pc, #80]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 800979c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800979e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d114      	bne.n	80097d0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097a6:	4b11      	ldr	r3, [pc, #68]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 80097a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097aa:	4a10      	ldr	r2, [pc, #64]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 80097ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097b0:	6593      	str	r3, [r2, #88]	; 0x58
 80097b2:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 80097b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097ba:	60bb      	str	r3, [r7, #8]
 80097bc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80097be:	f7f9 fe61 	bl	8003484 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 80097c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c6:	4a09      	ldr	r2, [pc, #36]	; (80097ec <HAL_PCD_MspInit+0xc8>)
 80097c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097cc:	6593      	str	r3, [r2, #88]	; 0x58
 80097ce:	e001      	b.n	80097d4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80097d0:	f7f9 fe58 	bl	8003484 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80097d4:	2200      	movs	r2, #0
 80097d6:	2100      	movs	r1, #0
 80097d8:	2043      	movs	r0, #67	; 0x43
 80097da:	f7f7 ff8c 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80097de:	2043      	movs	r0, #67	; 0x43
 80097e0:	f7f7 ffa5 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80097e4:	bf00      	nop
 80097e6:	3728      	adds	r7, #40	; 0x28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	40021000 	.word	0x40021000

080097f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009804:	4619      	mov	r1, r3
 8009806:	4610      	mov	r0, r2
 8009808:	f7fe fb84 	bl	8007f14 <USBD_LL_SetupStage>
}
 800980c:	bf00      	nop
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009826:	78fa      	ldrb	r2, [r7, #3]
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	4613      	mov	r3, r2
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	1a9b      	subs	r3, r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	440b      	add	r3, r1
 8009834:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	4619      	mov	r1, r3
 800983e:	f7fe fbb4 	bl	8007faa <USBD_LL_DataOutStage>
}
 8009842:	bf00      	nop
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	460b      	mov	r3, r1
 8009854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800985c:	78fa      	ldrb	r2, [r7, #3]
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4613      	mov	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	1a9b      	subs	r3, r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	3348      	adds	r3, #72	; 0x48
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	4619      	mov	r1, r3
 8009872:	f7fe fc0b 	bl	800808c <USBD_LL_DataInStage>
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fd1e 	bl	80082ce <USBD_LL_SOF>
}
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098a2:	2301      	movs	r3, #1
 80098a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d001      	beq.n	80098b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098ae:	f7f6 ffad 	bl	800080c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098b8:	7bfa      	ldrb	r2, [r7, #15]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fccb 	bl	8008258 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fc84 	bl	80081d6 <USBD_LL_Reset>
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098f2:	f043 0301 	orr.w	r3, r3, #1
 80098f6:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fcba 	bl	8008278 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d005      	beq.n	8009918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800990c:	4b04      	ldr	r3, [pc, #16]	; (8009920 <HAL_PCD_SuspendCallback+0x48>)
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	4a03      	ldr	r2, [pc, #12]	; (8009920 <HAL_PCD_SuspendCallback+0x48>)
 8009912:	f043 0306 	orr.w	r3, r3, #6
 8009916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009918:	bf00      	nop
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	e000ed00 	.word	0xe000ed00

08009924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6812      	ldr	r2, [r2, #0]
 800993a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800993e:	f023 0301 	bic.w	r3, r3, #1
 8009942:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d007      	beq.n	800995c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800994c:	4b08      	ldr	r3, [pc, #32]	; (8009970 <HAL_PCD_ResumeCallback+0x4c>)
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	4a07      	ldr	r2, [pc, #28]	; (8009970 <HAL_PCD_ResumeCallback+0x4c>)
 8009952:	f023 0306 	bic.w	r3, r3, #6
 8009956:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009958:	f000 fafa 	bl	8009f50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fc9d 	bl	80082a2 <USBD_LL_Resume>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	e000ed00 	.word	0xe000ed00

08009974 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fcc6 	bl	800831c <USBD_LL_IsoOUTIncomplete>
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7fe fca7 	bl	8008302 <USBD_LL_IsoINIncomplete>
}
 80099b4:	bf00      	nop
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fcb3 	bl	8008336 <USBD_LL_DevConnected>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fcb0 	bl	800834c <USBD_LL_DevDisconnected>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d13c      	bne.n	8009a7e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009a04:	4a20      	ldr	r2, [pc, #128]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a14:	4b1c      	ldr	r3, [pc, #112]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009a1c:	4b1a      	ldr	r3, [pc, #104]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a1e:	2206      	movs	r2, #6
 8009a20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009a22:	4b19      	ldr	r3, [pc, #100]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a24:	2202      	movs	r2, #2
 8009a26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009a28:	4b17      	ldr	r3, [pc, #92]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a2e:	4b16      	ldr	r3, [pc, #88]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009a34:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009a40:	4b11      	ldr	r3, [pc, #68]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009a46:	4b10      	ldr	r3, [pc, #64]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009a4c:	4b0e      	ldr	r3, [pc, #56]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a54:	f7f8 fc12 	bl	800227c <HAL_PCD_Init>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009a5e:	f7f6 fed5 	bl	800080c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	4808      	ldr	r0, [pc, #32]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a66:	f7f9 fc74 	bl	8003352 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009a6a:	2240      	movs	r2, #64	; 0x40
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	4806      	ldr	r0, [pc, #24]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a70:	f7f9 fc28 	bl	80032c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009a74:	2280      	movs	r2, #128	; 0x80
 8009a76:	2101      	movs	r1, #1
 8009a78:	4803      	ldr	r0, [pc, #12]	; (8009a88 <USBD_LL_Init+0x94>)
 8009a7a:	f7f9 fc23 	bl	80032c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	20006634 	.word	0x20006634

08009a8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7f8 fd0e 	bl	80024c4 <HAL_PCD_Start>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d816      	bhi.n	8009ae0 <USBD_LL_Start+0x54>
 8009ab2:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <USBD_LL_Start+0x2c>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009ac9 	.word	0x08009ac9
 8009abc:	08009acf 	.word	0x08009acf
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009adb 	.word	0x08009adb
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]
    break;
 8009acc:	e00b      	b.n	8009ae6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad2:	e008      	b.n	8009ae6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e005      	b.n	8009ae6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ada:	2302      	movs	r3, #2
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e002      	b.n	8009ae6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	bf00      	nop
  }
  return usb_status;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	4608      	mov	r0, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	461a      	mov	r2, r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	70fb      	strb	r3, [r7, #3]
 8009b02:	460b      	mov	r3, r1
 8009b04:	70bb      	strb	r3, [r7, #2]
 8009b06:	4613      	mov	r3, r2
 8009b08:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b18:	78bb      	ldrb	r3, [r7, #2]
 8009b1a:	883a      	ldrh	r2, [r7, #0]
 8009b1c:	78f9      	ldrb	r1, [r7, #3]
 8009b1e:	f7f9 f8c9 	bl	8002cb4 <HAL_PCD_EP_Open>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d817      	bhi.n	8009b5c <USBD_LL_OpenEP+0x6c>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBD_LL_OpenEP+0x44>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b4b 	.word	0x08009b4b
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b57 	.word	0x08009b57
    case HAL_OK :
      usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	e00b      	b.n	8009b62 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4e:	e008      	b.n	8009b62 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b50:	2301      	movs	r3, #1
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	e005      	b.n	8009b62 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b56:	2302      	movs	r3, #2
 8009b58:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5a:	e002      	b.n	8009b62 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b60:	bf00      	nop
  }
  return usb_status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f9 f8fa 	bl	8002d84 <HAL_PCD_EP_Close>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d816      	bhi.n	8009bc8 <USBD_LL_CloseEP+0x5c>
 8009b9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ba0 <USBD_LL_CloseEP+0x34>)
 8009b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba0:	08009bb1 	.word	0x08009bb1
 8009ba4:	08009bb7 	.word	0x08009bb7
 8009ba8:	08009bbd 	.word	0x08009bbd
 8009bac:	08009bc3 	.word	0x08009bc3
    case HAL_OK :
      usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009bb4:	e00b      	b.n	8009bce <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009bba:	e008      	b.n	8009bce <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc0:	e005      	b.n	8009bce <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	73fb      	strb	r3, [r7, #15]
    break;
 8009bc6:	e002      	b.n	8009bce <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	bf00      	nop
  }
  return usb_status;  
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bf2:	78fa      	ldrb	r2, [r7, #3]
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7f9 f9a1 	bl	8002f3e <HAL_PCD_EP_SetStall>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d816      	bhi.n	8009c34 <USBD_LL_StallEP+0x5c>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <USBD_LL_StallEP+0x34>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009c23 	.word	0x08009c23
 8009c14:	08009c29 	.word	0x08009c29
 8009c18:	08009c2f 	.word	0x08009c2f
    case HAL_OK :
      usb_status = USBD_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c20:	e00b      	b.n	8009c3a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c22:	2302      	movs	r3, #2
 8009c24:	73fb      	strb	r3, [r7, #15]
    break;
 8009c26:	e008      	b.n	8009c3a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2c:	e005      	b.n	8009c3a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c2e:	2302      	movs	r3, #2
 8009c30:	73fb      	strb	r3, [r7, #15]
    break;
 8009c32:	e002      	b.n	8009c3a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009c34:	2302      	movs	r3, #2
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	bf00      	nop
  }
  return usb_status;  
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c5e:	78fa      	ldrb	r2, [r7, #3]
 8009c60:	4611      	mov	r1, r2
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7f9 f9cd 	bl	8003002 <HAL_PCD_EP_ClrStall>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d816      	bhi.n	8009ca0 <USBD_LL_ClearStallEP+0x5c>
 8009c72:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_LL_ClearStallEP+0x34>)
 8009c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c78:	08009c89 	.word	0x08009c89
 8009c7c:	08009c8f 	.word	0x08009c8f
 8009c80:	08009c95 	.word	0x08009c95
 8009c84:	08009c9b 	.word	0x08009c9b
    case HAL_OK :
      usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	e00b      	b.n	8009ca6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	73fb      	strb	r3, [r7, #15]
    break;
 8009c92:	e008      	b.n	8009ca6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c94:	2301      	movs	r3, #1
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	e005      	b.n	8009ca6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9e:	e002      	b.n	8009ca6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca4:	bf00      	nop
  }
  return usb_status; 
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da0b      	bge.n	8009ce4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009ccc:	78fb      	ldrb	r3, [r7, #3]
 8009cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	440b      	add	r3, r1
 8009cde:	333e      	adds	r3, #62	; 0x3e
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	e00b      	b.n	8009cfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	4613      	mov	r3, r2
 8009cee:	00db      	lsls	r3, r3, #3
 8009cf0:	1a9b      	subs	r3, r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009cfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3714      	adds	r7, #20
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7f8 ff9f 	bl	8002c6a <HAL_PCD_SetAddress>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d816      	bhi.n	8009d64 <USBD_LL_SetUSBAddress+0x5c>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USBD_LL_SetUSBAddress+0x34>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d4d 	.word	0x08009d4d
 8009d40:	08009d53 	.word	0x08009d53
 8009d44:	08009d59 	.word	0x08009d59
 8009d48:	08009d5f 	.word	0x08009d5f
    case HAL_OK :
      usb_status = USBD_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d50:	e00b      	b.n	8009d6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	73fb      	strb	r3, [r7, #15]
    break;
 8009d56:	e008      	b.n	8009d6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5c:	e005      	b.n	8009d6a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	73fb      	strb	r3, [r7, #15]
    break;
 8009d62:	e002      	b.n	8009d6a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009d64:	2302      	movs	r3, #2
 8009d66:	73fb      	strb	r3, [r7, #15]
    break;
 8009d68:	bf00      	nop
  }
  return usb_status;  
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	460b      	mov	r3, r1
 8009d82:	72fb      	strb	r3, [r7, #11]
 8009d84:	4613      	mov	r3, r2
 8009d86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009d96:	893b      	ldrh	r3, [r7, #8]
 8009d98:	7af9      	ldrb	r1, [r7, #11]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	f7f9 f892 	bl	8002ec4 <HAL_PCD_EP_Transmit>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009da4:	7dbb      	ldrb	r3, [r7, #22]
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d816      	bhi.n	8009dd8 <USBD_LL_Transmit+0x64>
 8009daa:	a201      	add	r2, pc, #4	; (adr r2, 8009db0 <USBD_LL_Transmit+0x3c>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dc1 	.word	0x08009dc1
 8009db4:	08009dc7 	.word	0x08009dc7
 8009db8:	08009dcd 	.word	0x08009dcd
 8009dbc:	08009dd3 	.word	0x08009dd3
    case HAL_OK :
      usb_status = USBD_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	75fb      	strb	r3, [r7, #23]
    break;
 8009dc4:	e00b      	b.n	8009dde <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	75fb      	strb	r3, [r7, #23]
    break;
 8009dca:	e008      	b.n	8009dde <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	75fb      	strb	r3, [r7, #23]
    break;
 8009dd0:	e005      	b.n	8009dde <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8009dd6:	e002      	b.n	8009dde <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	75fb      	strb	r3, [r7, #23]
    break;
 8009ddc:	bf00      	nop
  }
  return usb_status;    
 8009dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	607a      	str	r2, [r7, #4]
 8009df2:	461a      	mov	r2, r3
 8009df4:	460b      	mov	r3, r1
 8009df6:	72fb      	strb	r3, [r7, #11]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	7af9      	ldrb	r1, [r7, #11]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	f7f9 f802 	bl	8002e18 <HAL_PCD_EP_Receive>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009e18:	7dbb      	ldrb	r3, [r7, #22]
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d816      	bhi.n	8009e4c <USBD_LL_PrepareReceive+0x64>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <USBD_LL_PrepareReceive+0x3c>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009e35 	.word	0x08009e35
 8009e28:	08009e3b 	.word	0x08009e3b
 8009e2c:	08009e41 	.word	0x08009e41
 8009e30:	08009e47 	.word	0x08009e47
    case HAL_OK :
      usb_status = USBD_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
    break;
 8009e38:	e00b      	b.n	8009e52 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	75fb      	strb	r3, [r7, #23]
    break;
 8009e3e:	e008      	b.n	8009e52 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
    break;
 8009e44:	e005      	b.n	8009e52 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e46:	2302      	movs	r3, #2
 8009e48:	75fb      	strb	r3, [r7, #23]
    break;
 8009e4a:	e002      	b.n	8009e52 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	75fb      	strb	r3, [r7, #23]
    break;
 8009e50:	bf00      	nop
  }
  return usb_status; 
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e6e:	78fa      	ldrb	r2, [r7, #3]
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7f9 f80e 	bl	8002e94 <HAL_PCD_EP_GetRxCount>
 8009e78:	4603      	mov	r3, r0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3708      	adds	r7, #8
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
	...

08009e84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009e90:	78fb      	ldrb	r3, [r7, #3]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_PCDEx_LPM_Callback+0x18>
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d01f      	beq.n	8009eda <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009e9a:	e03b      	b.n	8009f14 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009ea4:	f000 f854 	bl	8009f50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	4a1b      	ldr	r2, [pc, #108]	; (8009f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009eae:	f023 0306 	bic.w	r3, r3, #6
 8009eb2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ec6:	f023 0301 	bic.w	r3, r3, #1
 8009eca:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fe f9e5 	bl	80082a2 <USBD_LL_Resume>
    break;
 8009ed8:	e01c      	b.n	8009f14 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6812      	ldr	r2, [r2, #0]
 8009ee8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe f9bd 	bl	8008278 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a1b      	ldr	r3, [r3, #32]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d005      	beq.n	8009f12 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	4a04      	ldr	r2, [pc, #16]	; (8009f1c <HAL_PCDEx_LPM_Callback+0x98>)
 8009f0c:	f043 0306 	orr.w	r3, r3, #6
 8009f10:	6113      	str	r3, [r2, #16]
    break;   
 8009f12:	bf00      	nop
}
 8009f14:	bf00      	nop
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	e000ed00 	.word	0xe000ed00

08009f20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f28:	4b03      	ldr	r3, [pc, #12]	; (8009f38 <USBD_static_malloc+0x18>)
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	20004e38 	.word	0x20004e38

08009f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009f54:	f7f6 fbac 	bl	80006b0 <SystemClock_Config>
}
 8009f58:	bf00      	nop
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <__errno>:
 8009f5c:	4b01      	ldr	r3, [pc, #4]	; (8009f64 <__errno+0x8>)
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20000194 	.word	0x20000194

08009f68 <__libc_init_array>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4e0d      	ldr	r6, [pc, #52]	; (8009fa0 <__libc_init_array+0x38>)
 8009f6c:	4c0d      	ldr	r4, [pc, #52]	; (8009fa4 <__libc_init_array+0x3c>)
 8009f6e:	1ba4      	subs	r4, r4, r6
 8009f70:	10a4      	asrs	r4, r4, #2
 8009f72:	2500      	movs	r5, #0
 8009f74:	42a5      	cmp	r5, r4
 8009f76:	d109      	bne.n	8009f8c <__libc_init_array+0x24>
 8009f78:	4e0b      	ldr	r6, [pc, #44]	; (8009fa8 <__libc_init_array+0x40>)
 8009f7a:	4c0c      	ldr	r4, [pc, #48]	; (8009fac <__libc_init_array+0x44>)
 8009f7c:	f000 fc4a 	bl	800a814 <_init>
 8009f80:	1ba4      	subs	r4, r4, r6
 8009f82:	10a4      	asrs	r4, r4, #2
 8009f84:	2500      	movs	r5, #0
 8009f86:	42a5      	cmp	r5, r4
 8009f88:	d105      	bne.n	8009f96 <__libc_init_array+0x2e>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f90:	4798      	blx	r3
 8009f92:	3501      	adds	r5, #1
 8009f94:	e7ee      	b.n	8009f74 <__libc_init_array+0xc>
 8009f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f9a:	4798      	blx	r3
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	e7f2      	b.n	8009f86 <__libc_init_array+0x1e>
 8009fa0:	0800aa60 	.word	0x0800aa60
 8009fa4:	0800aa60 	.word	0x0800aa60
 8009fa8:	0800aa60 	.word	0x0800aa60
 8009fac:	0800aa64 	.word	0x0800aa64

08009fb0 <memcpy>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	1e43      	subs	r3, r0, #1
 8009fb4:	440a      	add	r2, r1
 8009fb6:	4291      	cmp	r1, r2
 8009fb8:	d100      	bne.n	8009fbc <memcpy+0xc>
 8009fba:	bd10      	pop	{r4, pc}
 8009fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc4:	e7f7      	b.n	8009fb6 <memcpy+0x6>

08009fc6 <memset>:
 8009fc6:	4402      	add	r2, r0
 8009fc8:	4603      	mov	r3, r0
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d100      	bne.n	8009fd0 <memset+0xa>
 8009fce:	4770      	bx	lr
 8009fd0:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd4:	e7f9      	b.n	8009fca <memset+0x4>
	...

08009fd8 <siprintf>:
 8009fd8:	b40e      	push	{r1, r2, r3}
 8009fda:	b500      	push	{lr}
 8009fdc:	b09c      	sub	sp, #112	; 0x70
 8009fde:	ab1d      	add	r3, sp, #116	; 0x74
 8009fe0:	9002      	str	r0, [sp, #8]
 8009fe2:	9006      	str	r0, [sp, #24]
 8009fe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fe8:	4809      	ldr	r0, [pc, #36]	; (800a010 <siprintf+0x38>)
 8009fea:	9107      	str	r1, [sp, #28]
 8009fec:	9104      	str	r1, [sp, #16]
 8009fee:	4909      	ldr	r1, [pc, #36]	; (800a014 <siprintf+0x3c>)
 8009ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff4:	9105      	str	r1, [sp, #20]
 8009ff6:	6800      	ldr	r0, [r0, #0]
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	a902      	add	r1, sp, #8
 8009ffc:	f000 f888 	bl	800a110 <_svfiprintf_r>
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
 800a006:	b01c      	add	sp, #112	; 0x70
 800a008:	f85d eb04 	ldr.w	lr, [sp], #4
 800a00c:	b003      	add	sp, #12
 800a00e:	4770      	bx	lr
 800a010:	20000194 	.word	0x20000194
 800a014:	ffff0208 	.word	0xffff0208

0800a018 <strcat>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	4603      	mov	r3, r0
 800a01c:	781a      	ldrb	r2, [r3, #0]
 800a01e:	1c5c      	adds	r4, r3, #1
 800a020:	b93a      	cbnz	r2, 800a032 <strcat+0x1a>
 800a022:	3b01      	subs	r3, #1
 800a024:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a028:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	d1f9      	bne.n	800a024 <strcat+0xc>
 800a030:	bd10      	pop	{r4, pc}
 800a032:	4623      	mov	r3, r4
 800a034:	e7f2      	b.n	800a01c <strcat+0x4>

0800a036 <strncmp>:
 800a036:	b510      	push	{r4, lr}
 800a038:	b16a      	cbz	r2, 800a056 <strncmp+0x20>
 800a03a:	3901      	subs	r1, #1
 800a03c:	1884      	adds	r4, r0, r2
 800a03e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a042:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a046:	4293      	cmp	r3, r2
 800a048:	d103      	bne.n	800a052 <strncmp+0x1c>
 800a04a:	42a0      	cmp	r0, r4
 800a04c:	d001      	beq.n	800a052 <strncmp+0x1c>
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f5      	bne.n	800a03e <strncmp+0x8>
 800a052:	1a98      	subs	r0, r3, r2
 800a054:	bd10      	pop	{r4, pc}
 800a056:	4610      	mov	r0, r2
 800a058:	e7fc      	b.n	800a054 <strncmp+0x1e>

0800a05a <__ssputs_r>:
 800a05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a05e:	688e      	ldr	r6, [r1, #8]
 800a060:	429e      	cmp	r6, r3
 800a062:	4682      	mov	sl, r0
 800a064:	460c      	mov	r4, r1
 800a066:	4690      	mov	r8, r2
 800a068:	4699      	mov	r9, r3
 800a06a:	d837      	bhi.n	800a0dc <__ssputs_r+0x82>
 800a06c:	898a      	ldrh	r2, [r1, #12]
 800a06e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a072:	d031      	beq.n	800a0d8 <__ssputs_r+0x7e>
 800a074:	6825      	ldr	r5, [r4, #0]
 800a076:	6909      	ldr	r1, [r1, #16]
 800a078:	1a6f      	subs	r7, r5, r1
 800a07a:	6965      	ldr	r5, [r4, #20]
 800a07c:	2302      	movs	r3, #2
 800a07e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a082:	fb95 f5f3 	sdiv	r5, r5, r3
 800a086:	f109 0301 	add.w	r3, r9, #1
 800a08a:	443b      	add	r3, r7
 800a08c:	429d      	cmp	r5, r3
 800a08e:	bf38      	it	cc
 800a090:	461d      	movcc	r5, r3
 800a092:	0553      	lsls	r3, r2, #21
 800a094:	d530      	bpl.n	800a0f8 <__ssputs_r+0x9e>
 800a096:	4629      	mov	r1, r5
 800a098:	f000 fb22 	bl	800a6e0 <_malloc_r>
 800a09c:	4606      	mov	r6, r0
 800a09e:	b950      	cbnz	r0, 800a0b6 <__ssputs_r+0x5c>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	f8ca 3000 	str.w	r3, [sl]
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b6:	463a      	mov	r2, r7
 800a0b8:	6921      	ldr	r1, [r4, #16]
 800a0ba:	f7ff ff79 	bl	8009fb0 <memcpy>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	6126      	str	r6, [r4, #16]
 800a0cc:	6165      	str	r5, [r4, #20]
 800a0ce:	443e      	add	r6, r7
 800a0d0:	1bed      	subs	r5, r5, r7
 800a0d2:	6026      	str	r6, [r4, #0]
 800a0d4:	60a5      	str	r5, [r4, #8]
 800a0d6:	464e      	mov	r6, r9
 800a0d8:	454e      	cmp	r6, r9
 800a0da:	d900      	bls.n	800a0de <__ssputs_r+0x84>
 800a0dc:	464e      	mov	r6, r9
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	6820      	ldr	r0, [r4, #0]
 800a0e4:	f000 fa94 	bl	800a610 <memmove>
 800a0e8:	68a3      	ldr	r3, [r4, #8]
 800a0ea:	1b9b      	subs	r3, r3, r6
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	441e      	add	r6, r3
 800a0f2:	6026      	str	r6, [r4, #0]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e7dc      	b.n	800a0b2 <__ssputs_r+0x58>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	f000 fb4b 	bl	800a794 <_realloc_r>
 800a0fe:	4606      	mov	r6, r0
 800a100:	2800      	cmp	r0, #0
 800a102:	d1e2      	bne.n	800a0ca <__ssputs_r+0x70>
 800a104:	6921      	ldr	r1, [r4, #16]
 800a106:	4650      	mov	r0, sl
 800a108:	f000 fa9c 	bl	800a644 <_free_r>
 800a10c:	e7c8      	b.n	800a0a0 <__ssputs_r+0x46>
	...

0800a110 <_svfiprintf_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	461d      	mov	r5, r3
 800a116:	898b      	ldrh	r3, [r1, #12]
 800a118:	061f      	lsls	r7, r3, #24
 800a11a:	b09d      	sub	sp, #116	; 0x74
 800a11c:	4680      	mov	r8, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	4616      	mov	r6, r2
 800a122:	d50f      	bpl.n	800a144 <_svfiprintf_r+0x34>
 800a124:	690b      	ldr	r3, [r1, #16]
 800a126:	b96b      	cbnz	r3, 800a144 <_svfiprintf_r+0x34>
 800a128:	2140      	movs	r1, #64	; 0x40
 800a12a:	f000 fad9 	bl	800a6e0 <_malloc_r>
 800a12e:	6020      	str	r0, [r4, #0]
 800a130:	6120      	str	r0, [r4, #16]
 800a132:	b928      	cbnz	r0, 800a140 <_svfiprintf_r+0x30>
 800a134:	230c      	movs	r3, #12
 800a136:	f8c8 3000 	str.w	r3, [r8]
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	e0c8      	b.n	800a2d2 <_svfiprintf_r+0x1c2>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	6163      	str	r3, [r4, #20]
 800a144:	2300      	movs	r3, #0
 800a146:	9309      	str	r3, [sp, #36]	; 0x24
 800a148:	2320      	movs	r3, #32
 800a14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a14e:	2330      	movs	r3, #48	; 0x30
 800a150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a154:	9503      	str	r5, [sp, #12]
 800a156:	f04f 0b01 	mov.w	fp, #1
 800a15a:	4637      	mov	r7, r6
 800a15c:	463d      	mov	r5, r7
 800a15e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a162:	b10b      	cbz	r3, 800a168 <_svfiprintf_r+0x58>
 800a164:	2b25      	cmp	r3, #37	; 0x25
 800a166:	d13e      	bne.n	800a1e6 <_svfiprintf_r+0xd6>
 800a168:	ebb7 0a06 	subs.w	sl, r7, r6
 800a16c:	d00b      	beq.n	800a186 <_svfiprintf_r+0x76>
 800a16e:	4653      	mov	r3, sl
 800a170:	4632      	mov	r2, r6
 800a172:	4621      	mov	r1, r4
 800a174:	4640      	mov	r0, r8
 800a176:	f7ff ff70 	bl	800a05a <__ssputs_r>
 800a17a:	3001      	adds	r0, #1
 800a17c:	f000 80a4 	beq.w	800a2c8 <_svfiprintf_r+0x1b8>
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	4453      	add	r3, sl
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	783b      	ldrb	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 809d 	beq.w	800a2c8 <_svfiprintf_r+0x1b8>
 800a18e:	2300      	movs	r3, #0
 800a190:	f04f 32ff 	mov.w	r2, #4294967295
 800a194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a2:	462f      	mov	r7, r5
 800a1a4:	2205      	movs	r2, #5
 800a1a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1aa:	4850      	ldr	r0, [pc, #320]	; (800a2ec <_svfiprintf_r+0x1dc>)
 800a1ac:	f7f6 f818 	bl	80001e0 <memchr>
 800a1b0:	9b04      	ldr	r3, [sp, #16]
 800a1b2:	b9d0      	cbnz	r0, 800a1ea <_svfiprintf_r+0xda>
 800a1b4:	06d9      	lsls	r1, r3, #27
 800a1b6:	bf44      	itt	mi
 800a1b8:	2220      	movmi	r2, #32
 800a1ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1be:	071a      	lsls	r2, r3, #28
 800a1c0:	bf44      	itt	mi
 800a1c2:	222b      	movmi	r2, #43	; 0x2b
 800a1c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1c8:	782a      	ldrb	r2, [r5, #0]
 800a1ca:	2a2a      	cmp	r2, #42	; 0x2a
 800a1cc:	d015      	beq.n	800a1fa <_svfiprintf_r+0xea>
 800a1ce:	9a07      	ldr	r2, [sp, #28]
 800a1d0:	462f      	mov	r7, r5
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	250a      	movs	r5, #10
 800a1d6:	4639      	mov	r1, r7
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94d      	bls.n	800a27e <_svfiprintf_r+0x16e>
 800a1e2:	b1b8      	cbz	r0, 800a214 <_svfiprintf_r+0x104>
 800a1e4:	e00f      	b.n	800a206 <_svfiprintf_r+0xf6>
 800a1e6:	462f      	mov	r7, r5
 800a1e8:	e7b8      	b.n	800a15c <_svfiprintf_r+0x4c>
 800a1ea:	4a40      	ldr	r2, [pc, #256]	; (800a2ec <_svfiprintf_r+0x1dc>)
 800a1ec:	1a80      	subs	r0, r0, r2
 800a1ee:	fa0b f000 	lsl.w	r0, fp, r0
 800a1f2:	4318      	orrs	r0, r3
 800a1f4:	9004      	str	r0, [sp, #16]
 800a1f6:	463d      	mov	r5, r7
 800a1f8:	e7d3      	b.n	800a1a2 <_svfiprintf_r+0x92>
 800a1fa:	9a03      	ldr	r2, [sp, #12]
 800a1fc:	1d11      	adds	r1, r2, #4
 800a1fe:	6812      	ldr	r2, [r2, #0]
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	2a00      	cmp	r2, #0
 800a204:	db01      	blt.n	800a20a <_svfiprintf_r+0xfa>
 800a206:	9207      	str	r2, [sp, #28]
 800a208:	e004      	b.n	800a214 <_svfiprintf_r+0x104>
 800a20a:	4252      	negs	r2, r2
 800a20c:	f043 0302 	orr.w	r3, r3, #2
 800a210:	9207      	str	r2, [sp, #28]
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	783b      	ldrb	r3, [r7, #0]
 800a216:	2b2e      	cmp	r3, #46	; 0x2e
 800a218:	d10c      	bne.n	800a234 <_svfiprintf_r+0x124>
 800a21a:	787b      	ldrb	r3, [r7, #1]
 800a21c:	2b2a      	cmp	r3, #42	; 0x2a
 800a21e:	d133      	bne.n	800a288 <_svfiprintf_r+0x178>
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	9203      	str	r2, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfb8      	it	lt
 800a22c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a230:	3702      	adds	r7, #2
 800a232:	9305      	str	r3, [sp, #20]
 800a234:	4d2e      	ldr	r5, [pc, #184]	; (800a2f0 <_svfiprintf_r+0x1e0>)
 800a236:	7839      	ldrb	r1, [r7, #0]
 800a238:	2203      	movs	r2, #3
 800a23a:	4628      	mov	r0, r5
 800a23c:	f7f5 ffd0 	bl	80001e0 <memchr>
 800a240:	b138      	cbz	r0, 800a252 <_svfiprintf_r+0x142>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	1b40      	subs	r0, r0, r5
 800a246:	fa03 f000 	lsl.w	r0, r3, r0
 800a24a:	9b04      	ldr	r3, [sp, #16]
 800a24c:	4303      	orrs	r3, r0
 800a24e:	3701      	adds	r7, #1
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	7839      	ldrb	r1, [r7, #0]
 800a254:	4827      	ldr	r0, [pc, #156]	; (800a2f4 <_svfiprintf_r+0x1e4>)
 800a256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a25a:	2206      	movs	r2, #6
 800a25c:	1c7e      	adds	r6, r7, #1
 800a25e:	f7f5 ffbf 	bl	80001e0 <memchr>
 800a262:	2800      	cmp	r0, #0
 800a264:	d038      	beq.n	800a2d8 <_svfiprintf_r+0x1c8>
 800a266:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <_svfiprintf_r+0x1e8>)
 800a268:	bb13      	cbnz	r3, 800a2b0 <_svfiprintf_r+0x1a0>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	3307      	adds	r3, #7
 800a26e:	f023 0307 	bic.w	r3, r3, #7
 800a272:	3308      	adds	r3, #8
 800a274:	9303      	str	r3, [sp, #12]
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	444b      	add	r3, r9
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	e76d      	b.n	800a15a <_svfiprintf_r+0x4a>
 800a27e:	fb05 3202 	mla	r2, r5, r2, r3
 800a282:	2001      	movs	r0, #1
 800a284:	460f      	mov	r7, r1
 800a286:	e7a6      	b.n	800a1d6 <_svfiprintf_r+0xc6>
 800a288:	2300      	movs	r3, #0
 800a28a:	3701      	adds	r7, #1
 800a28c:	9305      	str	r3, [sp, #20]
 800a28e:	4619      	mov	r1, r3
 800a290:	250a      	movs	r5, #10
 800a292:	4638      	mov	r0, r7
 800a294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a298:	3a30      	subs	r2, #48	; 0x30
 800a29a:	2a09      	cmp	r2, #9
 800a29c:	d903      	bls.n	800a2a6 <_svfiprintf_r+0x196>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0c8      	beq.n	800a234 <_svfiprintf_r+0x124>
 800a2a2:	9105      	str	r1, [sp, #20]
 800a2a4:	e7c6      	b.n	800a234 <_svfiprintf_r+0x124>
 800a2a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4607      	mov	r7, r0
 800a2ae:	e7f0      	b.n	800a292 <_svfiprintf_r+0x182>
 800a2b0:	ab03      	add	r3, sp, #12
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f3af 8000 	nop.w
 800a2c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2c4:	4681      	mov	r9, r0
 800a2c6:	d1d6      	bne.n	800a276 <_svfiprintf_r+0x166>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	065b      	lsls	r3, r3, #25
 800a2cc:	f53f af35 	bmi.w	800a13a <_svfiprintf_r+0x2a>
 800a2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d2:	b01d      	add	sp, #116	; 0x74
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	ab03      	add	r3, sp, #12
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <_svfiprintf_r+0x1ec>)
 800a2e0:	a904      	add	r1, sp, #16
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f000 f882 	bl	800a3ec <_printf_i>
 800a2e8:	e7ea      	b.n	800a2c0 <_svfiprintf_r+0x1b0>
 800a2ea:	bf00      	nop
 800a2ec:	0800aa24 	.word	0x0800aa24
 800a2f0:	0800aa2a 	.word	0x0800aa2a
 800a2f4:	0800aa2e 	.word	0x0800aa2e
 800a2f8:	00000000 	.word	0x00000000
 800a2fc:	0800a05b 	.word	0x0800a05b

0800a300 <_printf_common>:
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	4691      	mov	r9, r2
 800a306:	461f      	mov	r7, r3
 800a308:	688a      	ldr	r2, [r1, #8]
 800a30a:	690b      	ldr	r3, [r1, #16]
 800a30c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a310:	4293      	cmp	r3, r2
 800a312:	bfb8      	it	lt
 800a314:	4613      	movlt	r3, r2
 800a316:	f8c9 3000 	str.w	r3, [r9]
 800a31a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a31e:	4606      	mov	r6, r0
 800a320:	460c      	mov	r4, r1
 800a322:	b112      	cbz	r2, 800a32a <_printf_common+0x2a>
 800a324:	3301      	adds	r3, #1
 800a326:	f8c9 3000 	str.w	r3, [r9]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a334:	3302      	addmi	r3, #2
 800a336:	f8c9 3000 	strmi.w	r3, [r9]
 800a33a:	6825      	ldr	r5, [r4, #0]
 800a33c:	f015 0506 	ands.w	r5, r5, #6
 800a340:	d107      	bne.n	800a352 <_printf_common+0x52>
 800a342:	f104 0a19 	add.w	sl, r4, #25
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	f8d9 2000 	ldr.w	r2, [r9]
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	42ab      	cmp	r3, r5
 800a350:	dc28      	bgt.n	800a3a4 <_printf_common+0xa4>
 800a352:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a356:	6822      	ldr	r2, [r4, #0]
 800a358:	3300      	adds	r3, #0
 800a35a:	bf18      	it	ne
 800a35c:	2301      	movne	r3, #1
 800a35e:	0692      	lsls	r2, r2, #26
 800a360:	d42d      	bmi.n	800a3be <_printf_common+0xbe>
 800a362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a366:	4639      	mov	r1, r7
 800a368:	4630      	mov	r0, r6
 800a36a:	47c0      	blx	r8
 800a36c:	3001      	adds	r0, #1
 800a36e:	d020      	beq.n	800a3b2 <_printf_common+0xb2>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	68e5      	ldr	r5, [r4, #12]
 800a374:	f8d9 2000 	ldr.w	r2, [r9]
 800a378:	f003 0306 	and.w	r3, r3, #6
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	bf08      	it	eq
 800a380:	1aad      	subeq	r5, r5, r2
 800a382:	68a3      	ldr	r3, [r4, #8]
 800a384:	6922      	ldr	r2, [r4, #16]
 800a386:	bf0c      	ite	eq
 800a388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a38c:	2500      	movne	r5, #0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfc4      	itt	gt
 800a392:	1a9b      	subgt	r3, r3, r2
 800a394:	18ed      	addgt	r5, r5, r3
 800a396:	f04f 0900 	mov.w	r9, #0
 800a39a:	341a      	adds	r4, #26
 800a39c:	454d      	cmp	r5, r9
 800a39e:	d11a      	bne.n	800a3d6 <_printf_common+0xd6>
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	e008      	b.n	800a3b6 <_printf_common+0xb6>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4652      	mov	r2, sl
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	47c0      	blx	r8
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d103      	bne.n	800a3ba <_printf_common+0xba>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	3501      	adds	r5, #1
 800a3bc:	e7c3      	b.n	800a346 <_printf_common+0x46>
 800a3be:	18e1      	adds	r1, r4, r3
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	2030      	movs	r0, #48	; 0x30
 800a3c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3c8:	4422      	add	r2, r4
 800a3ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3d2:	3302      	adds	r3, #2
 800a3d4:	e7c5      	b.n	800a362 <_printf_common+0x62>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4622      	mov	r2, r4
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4630      	mov	r0, r6
 800a3de:	47c0      	blx	r8
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0e6      	beq.n	800a3b2 <_printf_common+0xb2>
 800a3e4:	f109 0901 	add.w	r9, r9, #1
 800a3e8:	e7d8      	b.n	800a39c <_printf_common+0x9c>
	...

0800a3ec <_printf_i>:
 800a3ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3f4:	460c      	mov	r4, r1
 800a3f6:	7e09      	ldrb	r1, [r1, #24]
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	296e      	cmp	r1, #110	; 0x6e
 800a3fc:	4617      	mov	r7, r2
 800a3fe:	4606      	mov	r6, r0
 800a400:	4698      	mov	r8, r3
 800a402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a404:	f000 80b3 	beq.w	800a56e <_printf_i+0x182>
 800a408:	d822      	bhi.n	800a450 <_printf_i+0x64>
 800a40a:	2963      	cmp	r1, #99	; 0x63
 800a40c:	d036      	beq.n	800a47c <_printf_i+0x90>
 800a40e:	d80a      	bhi.n	800a426 <_printf_i+0x3a>
 800a410:	2900      	cmp	r1, #0
 800a412:	f000 80b9 	beq.w	800a588 <_printf_i+0x19c>
 800a416:	2958      	cmp	r1, #88	; 0x58
 800a418:	f000 8083 	beq.w	800a522 <_printf_i+0x136>
 800a41c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a420:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a424:	e032      	b.n	800a48c <_printf_i+0xa0>
 800a426:	2964      	cmp	r1, #100	; 0x64
 800a428:	d001      	beq.n	800a42e <_printf_i+0x42>
 800a42a:	2969      	cmp	r1, #105	; 0x69
 800a42c:	d1f6      	bne.n	800a41c <_printf_i+0x30>
 800a42e:	6820      	ldr	r0, [r4, #0]
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	0605      	lsls	r5, r0, #24
 800a434:	f103 0104 	add.w	r1, r3, #4
 800a438:	d52a      	bpl.n	800a490 <_printf_i+0xa4>
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6011      	str	r1, [r2, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	da03      	bge.n	800a44a <_printf_i+0x5e>
 800a442:	222d      	movs	r2, #45	; 0x2d
 800a444:	425b      	negs	r3, r3
 800a446:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a44a:	486f      	ldr	r0, [pc, #444]	; (800a608 <_printf_i+0x21c>)
 800a44c:	220a      	movs	r2, #10
 800a44e:	e039      	b.n	800a4c4 <_printf_i+0xd8>
 800a450:	2973      	cmp	r1, #115	; 0x73
 800a452:	f000 809d 	beq.w	800a590 <_printf_i+0x1a4>
 800a456:	d808      	bhi.n	800a46a <_printf_i+0x7e>
 800a458:	296f      	cmp	r1, #111	; 0x6f
 800a45a:	d020      	beq.n	800a49e <_printf_i+0xb2>
 800a45c:	2970      	cmp	r1, #112	; 0x70
 800a45e:	d1dd      	bne.n	800a41c <_printf_i+0x30>
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	f043 0320 	orr.w	r3, r3, #32
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	e003      	b.n	800a472 <_printf_i+0x86>
 800a46a:	2975      	cmp	r1, #117	; 0x75
 800a46c:	d017      	beq.n	800a49e <_printf_i+0xb2>
 800a46e:	2978      	cmp	r1, #120	; 0x78
 800a470:	d1d4      	bne.n	800a41c <_printf_i+0x30>
 800a472:	2378      	movs	r3, #120	; 0x78
 800a474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a478:	4864      	ldr	r0, [pc, #400]	; (800a60c <_printf_i+0x220>)
 800a47a:	e055      	b.n	800a528 <_printf_i+0x13c>
 800a47c:	6813      	ldr	r3, [r2, #0]
 800a47e:	1d19      	adds	r1, r3, #4
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6011      	str	r1, [r2, #0]
 800a484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a48c:	2301      	movs	r3, #1
 800a48e:	e08c      	b.n	800a5aa <_printf_i+0x1be>
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6011      	str	r1, [r2, #0]
 800a494:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a498:	bf18      	it	ne
 800a49a:	b21b      	sxthne	r3, r3
 800a49c:	e7cf      	b.n	800a43e <_printf_i+0x52>
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	6825      	ldr	r5, [r4, #0]
 800a4a2:	1d18      	adds	r0, r3, #4
 800a4a4:	6010      	str	r0, [r2, #0]
 800a4a6:	0628      	lsls	r0, r5, #24
 800a4a8:	d501      	bpl.n	800a4ae <_printf_i+0xc2>
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	e002      	b.n	800a4b4 <_printf_i+0xc8>
 800a4ae:	0668      	lsls	r0, r5, #25
 800a4b0:	d5fb      	bpl.n	800a4aa <_printf_i+0xbe>
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	4854      	ldr	r0, [pc, #336]	; (800a608 <_printf_i+0x21c>)
 800a4b6:	296f      	cmp	r1, #111	; 0x6f
 800a4b8:	bf14      	ite	ne
 800a4ba:	220a      	movne	r2, #10
 800a4bc:	2208      	moveq	r2, #8
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4c4:	6865      	ldr	r5, [r4, #4]
 800a4c6:	60a5      	str	r5, [r4, #8]
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	f2c0 8095 	blt.w	800a5f8 <_printf_i+0x20c>
 800a4ce:	6821      	ldr	r1, [r4, #0]
 800a4d0:	f021 0104 	bic.w	r1, r1, #4
 800a4d4:	6021      	str	r1, [r4, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d13d      	bne.n	800a556 <_printf_i+0x16a>
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	f040 808e 	bne.w	800a5fc <_printf_i+0x210>
 800a4e0:	4665      	mov	r5, ip
 800a4e2:	2a08      	cmp	r2, #8
 800a4e4:	d10b      	bne.n	800a4fe <_printf_i+0x112>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	07db      	lsls	r3, r3, #31
 800a4ea:	d508      	bpl.n	800a4fe <_printf_i+0x112>
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	6862      	ldr	r2, [r4, #4]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bfde      	ittt	le
 800a4f4:	2330      	movle	r3, #48	; 0x30
 800a4f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4fe:	ebac 0305 	sub.w	r3, ip, r5
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	f8cd 8000 	str.w	r8, [sp]
 800a508:	463b      	mov	r3, r7
 800a50a:	aa03      	add	r2, sp, #12
 800a50c:	4621      	mov	r1, r4
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff fef6 	bl	800a300 <_printf_common>
 800a514:	3001      	adds	r0, #1
 800a516:	d14d      	bne.n	800a5b4 <_printf_i+0x1c8>
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	b005      	add	sp, #20
 800a51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a522:	4839      	ldr	r0, [pc, #228]	; (800a608 <_printf_i+0x21c>)
 800a524:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a528:	6813      	ldr	r3, [r2, #0]
 800a52a:	6821      	ldr	r1, [r4, #0]
 800a52c:	1d1d      	adds	r5, r3, #4
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6015      	str	r5, [r2, #0]
 800a532:	060a      	lsls	r2, r1, #24
 800a534:	d50b      	bpl.n	800a54e <_printf_i+0x162>
 800a536:	07ca      	lsls	r2, r1, #31
 800a538:	bf44      	itt	mi
 800a53a:	f041 0120 	orrmi.w	r1, r1, #32
 800a53e:	6021      	strmi	r1, [r4, #0]
 800a540:	b91b      	cbnz	r3, 800a54a <_printf_i+0x15e>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	f022 0220 	bic.w	r2, r2, #32
 800a548:	6022      	str	r2, [r4, #0]
 800a54a:	2210      	movs	r2, #16
 800a54c:	e7b7      	b.n	800a4be <_printf_i+0xd2>
 800a54e:	064d      	lsls	r5, r1, #25
 800a550:	bf48      	it	mi
 800a552:	b29b      	uxthmi	r3, r3
 800a554:	e7ef      	b.n	800a536 <_printf_i+0x14a>
 800a556:	4665      	mov	r5, ip
 800a558:	fbb3 f1f2 	udiv	r1, r3, r2
 800a55c:	fb02 3311 	mls	r3, r2, r1, r3
 800a560:	5cc3      	ldrb	r3, [r0, r3]
 800a562:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a566:	460b      	mov	r3, r1
 800a568:	2900      	cmp	r1, #0
 800a56a:	d1f5      	bne.n	800a558 <_printf_i+0x16c>
 800a56c:	e7b9      	b.n	800a4e2 <_printf_i+0xf6>
 800a56e:	6813      	ldr	r3, [r2, #0]
 800a570:	6825      	ldr	r5, [r4, #0]
 800a572:	6961      	ldr	r1, [r4, #20]
 800a574:	1d18      	adds	r0, r3, #4
 800a576:	6010      	str	r0, [r2, #0]
 800a578:	0628      	lsls	r0, r5, #24
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	d501      	bpl.n	800a582 <_printf_i+0x196>
 800a57e:	6019      	str	r1, [r3, #0]
 800a580:	e002      	b.n	800a588 <_printf_i+0x19c>
 800a582:	066a      	lsls	r2, r5, #25
 800a584:	d5fb      	bpl.n	800a57e <_printf_i+0x192>
 800a586:	8019      	strh	r1, [r3, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	6123      	str	r3, [r4, #16]
 800a58c:	4665      	mov	r5, ip
 800a58e:	e7b9      	b.n	800a504 <_printf_i+0x118>
 800a590:	6813      	ldr	r3, [r2, #0]
 800a592:	1d19      	adds	r1, r3, #4
 800a594:	6011      	str	r1, [r2, #0]
 800a596:	681d      	ldr	r5, [r3, #0]
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	2100      	movs	r1, #0
 800a59c:	4628      	mov	r0, r5
 800a59e:	f7f5 fe1f 	bl	80001e0 <memchr>
 800a5a2:	b108      	cbz	r0, 800a5a8 <_printf_i+0x1bc>
 800a5a4:	1b40      	subs	r0, r0, r5
 800a5a6:	6060      	str	r0, [r4, #4]
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	6123      	str	r3, [r4, #16]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5b2:	e7a7      	b.n	800a504 <_printf_i+0x118>
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	47c0      	blx	r8
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d0aa      	beq.n	800a518 <_printf_i+0x12c>
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	079b      	lsls	r3, r3, #30
 800a5c6:	d413      	bmi.n	800a5f0 <_printf_i+0x204>
 800a5c8:	68e0      	ldr	r0, [r4, #12]
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	4298      	cmp	r0, r3
 800a5ce:	bfb8      	it	lt
 800a5d0:	4618      	movlt	r0, r3
 800a5d2:	e7a3      	b.n	800a51c <_printf_i+0x130>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	464a      	mov	r2, r9
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d09a      	beq.n	800a518 <_printf_i+0x12c>
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	68e3      	ldr	r3, [r4, #12]
 800a5e6:	9a03      	ldr	r2, [sp, #12]
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	42ab      	cmp	r3, r5
 800a5ec:	dcf2      	bgt.n	800a5d4 <_printf_i+0x1e8>
 800a5ee:	e7eb      	b.n	800a5c8 <_printf_i+0x1dc>
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	f104 0919 	add.w	r9, r4, #25
 800a5f6:	e7f5      	b.n	800a5e4 <_printf_i+0x1f8>
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1ac      	bne.n	800a556 <_printf_i+0x16a>
 800a5fc:	7803      	ldrb	r3, [r0, #0]
 800a5fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a606:	e76c      	b.n	800a4e2 <_printf_i+0xf6>
 800a608:	0800aa35 	.word	0x0800aa35
 800a60c:	0800aa46 	.word	0x0800aa46

0800a610 <memmove>:
 800a610:	4288      	cmp	r0, r1
 800a612:	b510      	push	{r4, lr}
 800a614:	eb01 0302 	add.w	r3, r1, r2
 800a618:	d807      	bhi.n	800a62a <memmove+0x1a>
 800a61a:	1e42      	subs	r2, r0, #1
 800a61c:	4299      	cmp	r1, r3
 800a61e:	d00a      	beq.n	800a636 <memmove+0x26>
 800a620:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a624:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a628:	e7f8      	b.n	800a61c <memmove+0xc>
 800a62a:	4283      	cmp	r3, r0
 800a62c:	d9f5      	bls.n	800a61a <memmove+0xa>
 800a62e:	1881      	adds	r1, r0, r2
 800a630:	1ad2      	subs	r2, r2, r3
 800a632:	42d3      	cmn	r3, r2
 800a634:	d100      	bne.n	800a638 <memmove+0x28>
 800a636:	bd10      	pop	{r4, pc}
 800a638:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a63c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a640:	e7f7      	b.n	800a632 <memmove+0x22>
	...

0800a644 <_free_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4605      	mov	r5, r0
 800a648:	2900      	cmp	r1, #0
 800a64a:	d045      	beq.n	800a6d8 <_free_r+0x94>
 800a64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a650:	1f0c      	subs	r4, r1, #4
 800a652:	2b00      	cmp	r3, #0
 800a654:	bfb8      	it	lt
 800a656:	18e4      	addlt	r4, r4, r3
 800a658:	f000 f8d2 	bl	800a800 <__malloc_lock>
 800a65c:	4a1f      	ldr	r2, [pc, #124]	; (800a6dc <_free_r+0x98>)
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	4610      	mov	r0, r2
 800a662:	b933      	cbnz	r3, 800a672 <_free_r+0x2e>
 800a664:	6063      	str	r3, [r4, #4]
 800a666:	6014      	str	r4, [r2, #0]
 800a668:	4628      	mov	r0, r5
 800a66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a66e:	f000 b8c8 	b.w	800a802 <__malloc_unlock>
 800a672:	42a3      	cmp	r3, r4
 800a674:	d90c      	bls.n	800a690 <_free_r+0x4c>
 800a676:	6821      	ldr	r1, [r4, #0]
 800a678:	1862      	adds	r2, r4, r1
 800a67a:	4293      	cmp	r3, r2
 800a67c:	bf04      	itt	eq
 800a67e:	681a      	ldreq	r2, [r3, #0]
 800a680:	685b      	ldreq	r3, [r3, #4]
 800a682:	6063      	str	r3, [r4, #4]
 800a684:	bf04      	itt	eq
 800a686:	1852      	addeq	r2, r2, r1
 800a688:	6022      	streq	r2, [r4, #0]
 800a68a:	6004      	str	r4, [r0, #0]
 800a68c:	e7ec      	b.n	800a668 <_free_r+0x24>
 800a68e:	4613      	mov	r3, r2
 800a690:	685a      	ldr	r2, [r3, #4]
 800a692:	b10a      	cbz	r2, 800a698 <_free_r+0x54>
 800a694:	42a2      	cmp	r2, r4
 800a696:	d9fa      	bls.n	800a68e <_free_r+0x4a>
 800a698:	6819      	ldr	r1, [r3, #0]
 800a69a:	1858      	adds	r0, r3, r1
 800a69c:	42a0      	cmp	r0, r4
 800a69e:	d10b      	bne.n	800a6b8 <_free_r+0x74>
 800a6a0:	6820      	ldr	r0, [r4, #0]
 800a6a2:	4401      	add	r1, r0
 800a6a4:	1858      	adds	r0, r3, r1
 800a6a6:	4282      	cmp	r2, r0
 800a6a8:	6019      	str	r1, [r3, #0]
 800a6aa:	d1dd      	bne.n	800a668 <_free_r+0x24>
 800a6ac:	6810      	ldr	r0, [r2, #0]
 800a6ae:	6852      	ldr	r2, [r2, #4]
 800a6b0:	605a      	str	r2, [r3, #4]
 800a6b2:	4401      	add	r1, r0
 800a6b4:	6019      	str	r1, [r3, #0]
 800a6b6:	e7d7      	b.n	800a668 <_free_r+0x24>
 800a6b8:	d902      	bls.n	800a6c0 <_free_r+0x7c>
 800a6ba:	230c      	movs	r3, #12
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	e7d3      	b.n	800a668 <_free_r+0x24>
 800a6c0:	6820      	ldr	r0, [r4, #0]
 800a6c2:	1821      	adds	r1, r4, r0
 800a6c4:	428a      	cmp	r2, r1
 800a6c6:	bf04      	itt	eq
 800a6c8:	6811      	ldreq	r1, [r2, #0]
 800a6ca:	6852      	ldreq	r2, [r2, #4]
 800a6cc:	6062      	str	r2, [r4, #4]
 800a6ce:	bf04      	itt	eq
 800a6d0:	1809      	addeq	r1, r1, r0
 800a6d2:	6021      	streq	r1, [r4, #0]
 800a6d4:	605c      	str	r4, [r3, #4]
 800a6d6:	e7c7      	b.n	800a668 <_free_r+0x24>
 800a6d8:	bd38      	pop	{r3, r4, r5, pc}
 800a6da:	bf00      	nop
 800a6dc:	20005058 	.word	0x20005058

0800a6e0 <_malloc_r>:
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	1ccd      	adds	r5, r1, #3
 800a6e4:	f025 0503 	bic.w	r5, r5, #3
 800a6e8:	3508      	adds	r5, #8
 800a6ea:	2d0c      	cmp	r5, #12
 800a6ec:	bf38      	it	cc
 800a6ee:	250c      	movcc	r5, #12
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	db01      	blt.n	800a6fa <_malloc_r+0x1a>
 800a6f6:	42a9      	cmp	r1, r5
 800a6f8:	d903      	bls.n	800a702 <_malloc_r+0x22>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	6033      	str	r3, [r6, #0]
 800a6fe:	2000      	movs	r0, #0
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	f000 f87d 	bl	800a800 <__malloc_lock>
 800a706:	4a21      	ldr	r2, [pc, #132]	; (800a78c <_malloc_r+0xac>)
 800a708:	6814      	ldr	r4, [r2, #0]
 800a70a:	4621      	mov	r1, r4
 800a70c:	b991      	cbnz	r1, 800a734 <_malloc_r+0x54>
 800a70e:	4c20      	ldr	r4, [pc, #128]	; (800a790 <_malloc_r+0xb0>)
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	b91b      	cbnz	r3, 800a71c <_malloc_r+0x3c>
 800a714:	4630      	mov	r0, r6
 800a716:	f000 f863 	bl	800a7e0 <_sbrk_r>
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f000 f85e 	bl	800a7e0 <_sbrk_r>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d124      	bne.n	800a772 <_malloc_r+0x92>
 800a728:	230c      	movs	r3, #12
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	4630      	mov	r0, r6
 800a72e:	f000 f868 	bl	800a802 <__malloc_unlock>
 800a732:	e7e4      	b.n	800a6fe <_malloc_r+0x1e>
 800a734:	680b      	ldr	r3, [r1, #0]
 800a736:	1b5b      	subs	r3, r3, r5
 800a738:	d418      	bmi.n	800a76c <_malloc_r+0x8c>
 800a73a:	2b0b      	cmp	r3, #11
 800a73c:	d90f      	bls.n	800a75e <_malloc_r+0x7e>
 800a73e:	600b      	str	r3, [r1, #0]
 800a740:	50cd      	str	r5, [r1, r3]
 800a742:	18cc      	adds	r4, r1, r3
 800a744:	4630      	mov	r0, r6
 800a746:	f000 f85c 	bl	800a802 <__malloc_unlock>
 800a74a:	f104 000b 	add.w	r0, r4, #11
 800a74e:	1d23      	adds	r3, r4, #4
 800a750:	f020 0007 	bic.w	r0, r0, #7
 800a754:	1ac3      	subs	r3, r0, r3
 800a756:	d0d3      	beq.n	800a700 <_malloc_r+0x20>
 800a758:	425a      	negs	r2, r3
 800a75a:	50e2      	str	r2, [r4, r3]
 800a75c:	e7d0      	b.n	800a700 <_malloc_r+0x20>
 800a75e:	428c      	cmp	r4, r1
 800a760:	684b      	ldr	r3, [r1, #4]
 800a762:	bf16      	itet	ne
 800a764:	6063      	strne	r3, [r4, #4]
 800a766:	6013      	streq	r3, [r2, #0]
 800a768:	460c      	movne	r4, r1
 800a76a:	e7eb      	b.n	800a744 <_malloc_r+0x64>
 800a76c:	460c      	mov	r4, r1
 800a76e:	6849      	ldr	r1, [r1, #4]
 800a770:	e7cc      	b.n	800a70c <_malloc_r+0x2c>
 800a772:	1cc4      	adds	r4, r0, #3
 800a774:	f024 0403 	bic.w	r4, r4, #3
 800a778:	42a0      	cmp	r0, r4
 800a77a:	d005      	beq.n	800a788 <_malloc_r+0xa8>
 800a77c:	1a21      	subs	r1, r4, r0
 800a77e:	4630      	mov	r0, r6
 800a780:	f000 f82e 	bl	800a7e0 <_sbrk_r>
 800a784:	3001      	adds	r0, #1
 800a786:	d0cf      	beq.n	800a728 <_malloc_r+0x48>
 800a788:	6025      	str	r5, [r4, #0]
 800a78a:	e7db      	b.n	800a744 <_malloc_r+0x64>
 800a78c:	20005058 	.word	0x20005058
 800a790:	2000505c 	.word	0x2000505c

0800a794 <_realloc_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	4607      	mov	r7, r0
 800a798:	4614      	mov	r4, r2
 800a79a:	460e      	mov	r6, r1
 800a79c:	b921      	cbnz	r1, 800a7a8 <_realloc_r+0x14>
 800a79e:	4611      	mov	r1, r2
 800a7a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7a4:	f7ff bf9c 	b.w	800a6e0 <_malloc_r>
 800a7a8:	b922      	cbnz	r2, 800a7b4 <_realloc_r+0x20>
 800a7aa:	f7ff ff4b 	bl	800a644 <_free_r>
 800a7ae:	4625      	mov	r5, r4
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b4:	f000 f826 	bl	800a804 <_malloc_usable_size_r>
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d20f      	bcs.n	800a7dc <_realloc_r+0x48>
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4638      	mov	r0, r7
 800a7c0:	f7ff ff8e 	bl	800a6e0 <_malloc_r>
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0f2      	beq.n	800a7b0 <_realloc_r+0x1c>
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	f7ff fbef 	bl	8009fb0 <memcpy>
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff ff35 	bl	800a644 <_free_r>
 800a7da:	e7e9      	b.n	800a7b0 <_realloc_r+0x1c>
 800a7dc:	4635      	mov	r5, r6
 800a7de:	e7e7      	b.n	800a7b0 <_realloc_r+0x1c>

0800a7e0 <_sbrk_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4c06      	ldr	r4, [pc, #24]	; (800a7fc <_sbrk_r+0x1c>)
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	6023      	str	r3, [r4, #0]
 800a7ec:	f7f6 f960 	bl	8000ab0 <_sbrk>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_sbrk_r+0x1a>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_sbrk_r+0x1a>
 800a7f8:	602b      	str	r3, [r5, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20006a3c 	.word	0x20006a3c

0800a800 <__malloc_lock>:
 800a800:	4770      	bx	lr

0800a802 <__malloc_unlock>:
 800a802:	4770      	bx	lr

0800a804 <_malloc_usable_size_r>:
 800a804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a808:	1f18      	subs	r0, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bfbc      	itt	lt
 800a80e:	580b      	ldrlt	r3, [r1, r0]
 800a810:	18c0      	addlt	r0, r0, r3
 800a812:	4770      	bx	lr

0800a814 <_init>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr

0800a820 <_fini>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr
