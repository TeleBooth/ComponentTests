
Uart Terminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009990  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d18  08009d18  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d20  08009d20  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08009d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006940  20000194  08009ebc  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ad4  08009ebc  00026ad4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2b1  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d0e  00000000  00000000  0003f475  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001688  00000000  00000000  00043188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014c0  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac2f  00000000  00000000  00045cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001472f  00000000  00000000  000708ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7153  00000000  00000000  0008502e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dec  00000000  00000000  0017c1fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000194 	.word	0x20000194
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b00 	.word	0x08009b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000198 	.word	0x20000198
 80001c4:	08009b00 	.word	0x08009b00

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b5b0      	push	{r4, r5, r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fda7 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f87d 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f905 	bl	80006f4 <MX_GPIO_Init>
  //MX_DMA_Init();
  //MX_USART2_UART_Init();
  MX_USB_DEVICE_Init();
 80004ea:	f008 fae5 	bl	8008ab8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(5000);
 80004ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80004f2:	f000 fe15 	bl	8001120 <HAL_Delay>

  if (esp8266_init(&huart2)){
 80004f6:	4835      	ldr	r0, [pc, #212]	; (80005cc <main+0xf4>)
 80004f8:	f000 fb24 	bl	8000b44 <esp8266_init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d000      	beq.n	8000504 <main+0x2c>
  		while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x2a>
  	// 1. port krpc-cnano into this project
  	// 	1.1 writing the four functions in "communication.h"
  	//	1.2 writing the iostream callback functions
  	// 2. get the initialization sequence in this code

  	init_task_list();
 8000504:	f000 fbb4 	bl	8000c70 <init_task_list>

  	strcpy((char *) buffer, "Hello Jeremy every 15 seconds!");
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <main+0xf8>)
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <main+0xfc>)
 800050c:	4614      	mov	r4, r2
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000518:	c407      	stmia	r4!, {r0, r1, r2}
 800051a:	8023      	strh	r3, [r4, #0]
 800051c:	3402      	adds	r4, #2
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 8000522:	482b      	ldr	r0, [pc, #172]	; (80005d0 <main+0xf8>)
 8000524:	f7ff fe50 	bl	80001c8 <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <main+0xf8>)
 800052e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	//HAL_UART_Transmit_IT(&s_UARTHandle, &buffer[BUF_SIZE], 1);
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 15 * SEC, 15 * SEC);
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0xf8>)
 8000534:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8000538:	f643 2398 	movw	r3, #15000	; 0x3a98
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <main+0xf8>)
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fc21 	bl	8000d8c <add_task>
  	strcpy((char *) buffer, "Hello Nick every 10 seconds!");
 800054a:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <main+0xf8>)
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <main+0x100>)
 800054e:	4614      	mov	r4, r2
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800055a:	c407      	stmia	r4!, {r0, r1, r2}
 800055c:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 800055e:	481c      	ldr	r0, [pc, #112]	; (80005d0 <main+0xf8>)
 8000560:	f7ff fe32 	bl	80001c8 <strlen>
 8000564:	4603      	mov	r3, r0
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <main+0xf8>)
 800056a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 10 * SEC, 10 * SEC);
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <main+0xf8>)
 8000570:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8000574:	f242 7310 	movw	r3, #10000	; 0x2710
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	f242 7310 	movw	r3, #10000	; 0x2710
 800057e:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <main+0xf8>)
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fc03 	bl	8000d8c <add_task>
  	strcpy((char *) buffer, "Hello Pablo every 5 seconds!");
 8000586:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <main+0xf8>)
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0x104>)
 800058a:	4614      	mov	r4, r2
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000596:	c407      	stmia	r4!, {r0, r1, r2}
 8000598:	7023      	strb	r3, [r4, #0]
  	buffer[BUF_SIZE] = (uint8_t) strlen((char *) buffer);
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <main+0xf8>)
 800059c:	f7ff fe14 	bl	80001c8 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <main+0xf8>)
 80005a6:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  	add_task(REQUEST_TASK, buffer[BUF_SIZE], (void *) buffer, 5 * SEC, 5 * SEC);
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <main+0xf8>)
 80005ac:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 80005b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ba:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <main+0xf8>)
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fbe5 	bl	8000d8c <add_task>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //asm("wfi");
	  handle_tasks(&huart2);
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <main+0xf4>)
 80005c4:	f000 fcc0 	bl	8000f48 <handle_tasks>
 80005c8:	e7fb      	b.n	80005c2 <main+0xea>
 80005ca:	bf00      	nop
 80005cc:	2000503c 	.word	0x2000503c
 80005d0:	200001b0 	.word	0x200001b0
 80005d4:	08009b18 	.word	0x08009b18
 80005d8:	08009b38 	.word	0x08009b38
 80005dc:	08009b58 	.word	0x08009b58

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b0b8      	sub	sp, #224	; 0xe0
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f009 fa6b 	bl	8009aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2288      	movs	r2, #136	; 0x88
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f009 fa5d 	bl	8009aca <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000610:	2310      	movs	r3, #16
 8000612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000622:	2360      	movs	r3, #96	; 0x60
 8000624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062e:	2301      	movs	r3, #1
 8000630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800063a:	2328      	movs	r3, #40	; 0x28
 800063c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000640:	2307      	movs	r3, #7
 8000642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fd58 	bl	800310c <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000662:	f000 f86b 	bl	800073c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2303      	movs	r3, #3
 800066e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000684:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000688:	2104      	movs	r1, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f924 	bl	80038d8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000696:	f000 f851 	bl	800073c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 800069a:	f242 0302 	movw	r3, #8194	; 0x2002
 800069e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006b2:	2318      	movs	r3, #24
 80006b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006b6:	2307      	movs	r3, #7
 80006b8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006c6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4618      	mov	r0, r3
 80006cc:	f003 fb08 	bl	8003ce0 <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80006d6:	f000 f831 	bl	800073c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f002 fcaf 	bl	8003040 <HAL_PWREx_ControlVoltageScaling>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80006e8:	f000 f828 	bl	800073c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	37e0      	adds	r7, #224	; 0xe0
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_GPIO_Init+0x44>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MX_GPIO_Init+0x44>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_GPIO_Init+0x44>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_GPIO_Init+0x44>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <MX_GPIO_Init+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_GPIO_Init+0x44>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	; 0x60
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	; 0x58
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a55      	ldr	r2, [pc, #340]	; (8000908 <HAL_UART_MspInit+0x174>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f040 80a3 	bne.w	80008fe <HAL_UART_MspInit+0x16a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

	  /* Enable USARTx clock */
	    USARTx_CLK_ENABLE();
 80007b8:	4b54      	ldr	r3, [pc, #336]	; (800090c <HAL_UART_MspInit+0x178>)
 80007ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007bc:	4a53      	ldr	r2, [pc, #332]	; (800090c <HAL_UART_MspInit+0x178>)
 80007be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c2:	6593      	str	r3, [r2, #88]	; 0x58
 80007c4:	4b51      	ldr	r3, [pc, #324]	; (800090c <HAL_UART_MspInit+0x178>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	69bb      	ldr	r3, [r7, #24]

	    /* Enable DMA clock */
	    DMAx_CLK_ENABLE();
 80007d0:	4b4e      	ldr	r3, [pc, #312]	; (800090c <HAL_UART_MspInit+0x178>)
 80007d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007d4:	4a4d      	ldr	r2, [pc, #308]	; (800090c <HAL_UART_MspInit+0x178>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6493      	str	r3, [r2, #72]	; 0x48
 80007dc:	4b4b      	ldr	r3, [pc, #300]	; (800090c <HAL_UART_MspInit+0x178>)
 80007de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e8:	4b48      	ldr	r3, [pc, #288]	; (800090c <HAL_UART_MspInit+0x178>)
 80007ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ec:	4a47      	ldr	r2, [pc, #284]	; (800090c <HAL_UART_MspInit+0x178>)
 80007ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f2:	6593      	str	r3, [r2, #88]	; 0x58
 80007f4:	4b45      	ldr	r3, [pc, #276]	; (800090c <HAL_UART_MspInit+0x178>)
 80007f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b42      	ldr	r3, [pc, #264]	; (800090c <HAL_UART_MspInit+0x178>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000804:	4a41      	ldr	r2, [pc, #260]	; (800090c <HAL_UART_MspInit+0x178>)
 8000806:	f043 0301 	orr.w	r3, r3, #1
 800080a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080c:	4b3f      	ldr	r3, [pc, #252]	; (800090c <HAL_UART_MspInit+0x178>)
 800080e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]

    //enable GPIOA pin 1
        GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 f8a3 	bl	800197c <HAL_GPIO_Init>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2102      	movs	r1, #2
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f001 fb39 	bl	8001eb4 <HAL_GPIO_WritePin>

    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000842:	230c      	movs	r3, #12
 8000844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000852:	2307      	movs	r3, #7
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f001 f88c 	bl	800197c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000866:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <HAL_UART_MspInit+0x180>)
 8000868:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <HAL_UART_MspInit+0x17c>)
 800086c:	2202      	movs	r2, #2
 800086e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000872:	2210      	movs	r2, #16
 8000874:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <HAL_UART_MspInit+0x17c>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <HAL_UART_MspInit+0x17c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_UART_MspInit+0x17c>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800089a:	481d      	ldr	r0, [pc, #116]	; (8000910 <HAL_UART_MspInit+0x17c>)
 800089c:	f000 fda4 	bl	80013e8 <HAL_DMA_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80008a6:	f7ff ff49 	bl	800073c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <HAL_UART_MspInit+0x17c>)
 80008ae:	669a      	str	r2, [r3, #104]	; 0x68
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x17c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2026      	movs	r0, #38	; 0x26
 80008bc:	f000 fd4f 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c0:	2026      	movs	r0, #38	; 0x26
 80008c2:	f000 fd68 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	2011      	movs	r0, #17
 80008cc:	f000 fd47 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80008d0:	2011      	movs	r0, #17
 80008d2:	f000 fd60 	bl	8001396 <HAL_NVIC_EnableIRQ>


    TIMx_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_UART_MspInit+0x178>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_UART_MspInit+0x178>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_UART_MspInit+0x178>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]

    HAL_NVIC_SetPriority(TIMx_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	201d      	movs	r0, #29
 80008f4:	f000 fd33 	bl	800135e <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(TIMx_IRQn);
 80008f8:	201d      	movs	r0, #29
 80008fa:	f000 fd4c 	bl	8001396 <HAL_NVIC_EnableIRQ>


  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40004400 	.word	0x40004400
 800090c:	40021000 	.word	0x40021000
 8000910:	20004ff4 	.word	0x20004ff4
 8000914:	40020080 	.word	0x40020080

08000918 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <HAL_UART_MspDeInit+0x40>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d112      	bne.n	8000950 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_UART_MspDeInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <HAL_UART_MspDeInit+0x44>)
 8000930:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000934:	6593      	str	r3, [r2, #88]	; 0x58
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000936:	210c      	movs	r1, #12
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f001 f9c6 	bl	8001ccc <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fe07 	bl	8001558 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800094a:	2026      	movs	r0, #38	; 0x26
 800094c:	f000 fd31 	bl	80013b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 fb96 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <DMA1_Channel7_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32l4xx.s).                    */
/******************************************************************************/

void DMA1_Channel7_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <DMA1_Channel7_IRQHandler+0x10>)
 80009c2:	f000 fefc 	bl	80017be <HAL_DMA_IRQHandler>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20004ff4 	.word	0x20004ff4

080009d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <USART2_IRQHandler+0x10>)
 80009d6:	f004 fac7 	bl	8004f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000503c 	.word	0x2000503c

080009e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <OTG_FS_IRQHandler+0x10>)
 80009ea:	f001 fbce 	bl	800218a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200066cc 	.word	0x200066cc

080009f8 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM3_IRQHandler+0x10>)
 80009fe:	f003 fe7f 	bl	8004700 <HAL_TIM_IRQHandler>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000648c 	.word	0x2000648c

08000a0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <SystemInit+0x64>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a16:	4a16      	ldr	r2, [pc, #88]	; (8000a70 <SystemInit+0x64>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <SystemInit+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <SystemInit+0x68>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <SystemInit+0x68>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <SystemInit+0x68>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a0f      	ldr	r2, [pc, #60]	; (8000a74 <SystemInit+0x68>)
 8000a38:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a3c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <SystemInit+0x68>)
 8000a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <SystemInit+0x68>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <SystemInit+0x68>)
 8000a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <SystemInit+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SystemInit+0x64>)
 8000a5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a62:	609a      	str	r2, [r3, #8]
#endif
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00
 8000a74:	40021000 	.word	0x40021000

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a7e:	e003      	b.n	8000a88 <LoopCopyDataInit>

08000a80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a86:	3104      	adds	r1, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a90:	d3f6      	bcc.n	8000a80 <CopyDataInit>
	ldr	r2, =_sbss
 8000a92:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a94:	e002      	b.n	8000a9c <LoopFillZerobss>

08000a96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a98:	f842 3b04 	str.w	r3, [r2], #4

08000a9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <LoopForever+0x16>)
	cmp	r2, r3
 8000a9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000aa0:	d3f9      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aa2:	f7ff ffb3 	bl	8000a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f008 ffe1 	bl	8009a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fd15 	bl	80004d8 <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ab4:	08009d28 	.word	0x08009d28
	ldr	r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000abc:	20000194 	.word	0x20000194
	ldr	r2, =_sbss
 8000ac0:	20000194 	.word	0x20000194
	ldr	r3, = _ebss
 8000ac4:	20006ad4 	.word	0x20006ad4

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <Transmit_Wrapper>:
uint8_t responseBuffer[256];
uint16_t responseSizeTmp = 0;
extern uint16_t responseSize;

// transmit and receive wrappers used to implement the response behavior
void Transmit_Wrapper(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t responseSize){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	461a      	mov	r2, r3
 8000ada:	460b      	mov	r3, r1
 8000adc:	80fb      	strh	r3, [r7, #6]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	80bb      	strh	r3, [r7, #4]
	responseSizeTmp = responseSize;
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <Transmit_Wrapper+0x38>)
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	8013      	strh	r3, [r2, #0]
	while(HAL_UART_Transmit_DMA(huart, pData, Size) == HAL_BUSY);
 8000ae8:	bf00      	nop
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	461a      	mov	r2, r3
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	68f8      	ldr	r0, [r7, #12]
 8000af2:	f004 f9bd 	bl	8004e70 <HAL_UART_Transmit_DMA>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d0f6      	beq.n	8000aea <Transmit_Wrapper+0x1e>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200009b4 	.word	0x200009b4

08000b08 <Receive_Wrapper>:

// busy waits
ESP8266_STATUS Receive_Wrapper(uint8_t * responseBuffer, const char * compareString, uint16_t compareStringLength){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
	while(responseSize > 0);
 8000b16:	bf00      	nop
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <Receive_Wrapper+0x38>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1fb      	bne.n	8000b18 <Receive_Wrapper+0x10>
	if (strncmp((char *) responseBuffer, compareString, compareStringLength)) {
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68b9      	ldr	r1, [r7, #8]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f008 ffd7 	bl	8009ada <strncmp>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <Receive_Wrapper+0x2e>
			return ESP8266_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e000      	b.n	8000b38 <Receive_Wrapper+0x30>
		}
	return ESP8266_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20006488 	.word	0x20006488

08000b44 <esp8266_init>:

/*-- Checks to see if the ESP8266 module is alive, then disables command echoing, and enables station mode --*/
ESP8266_STATUS esp8266_init(UART_HandleTypeDef *huart) {
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if (esp8266_reset(huart)) {
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f863 	bl	8000c18 <esp8266_reset>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <esp8266_init+0x18>
		return ESP8266_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e049      	b.n	8000bf0 <esp8266_init+0xac>
	}

	// Check if alive, note that echoing has yet to be disabled
	strcpy((char *) esp_buffer, C_AT);
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <esp8266_init+0xb4>)
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <esp8266_init+0xb8>)
 8000b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b64:	6018      	str	r0, [r3, #0]
 8000b66:	3304      	adds	r3, #4
 8000b68:	7019      	strb	r1, [r3, #0]
	Transmit_Wrapper(huart, esp_buffer, C_AT_LEN, C_AT_LEN + R_OK_LEN);
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	4922      	ldr	r1, [pc, #136]	; (8000bf8 <esp8266_init+0xb4>)
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ffab 	bl	8000acc <Transmit_Wrapper>
	if (Receive_Wrapper(responseBuffer, C_AT_OK , C_AT_LEN + R_OK_LEN)) {
 8000b76:	220a      	movs	r2, #10
 8000b78:	4921      	ldr	r1, [pc, #132]	; (8000c00 <esp8266_init+0xbc>)
 8000b7a:	4822      	ldr	r0, [pc, #136]	; (8000c04 <esp8266_init+0xc0>)
 8000b7c:	f7ff ffc4 	bl	8000b08 <Receive_Wrapper>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <esp8266_init+0x46>
		return ESP8266_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e032      	b.n	8000bf0 <esp8266_init+0xac>
	}
	//HAL_Delay(100);

	// Disable echoing
	strcpy((char *) esp_buffer, C_ATE("0"));
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <esp8266_init+0xb4>)
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <esp8266_init+0xc4>)
 8000b8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b92:	6018      	str	r0, [r3, #0]
 8000b94:	3304      	adds	r3, #4
 8000b96:	8019      	strh	r1, [r3, #0]
 8000b98:	3302      	adds	r3, #2
 8000b9a:	0c0a      	lsrs	r2, r1, #16
 8000b9c:	701a      	strb	r2, [r3, #0]
	Transmit_Wrapper(huart, esp_buffer, C_ATE_LEN("0"), C_ATE_LEN("0") + R_OK_LEN);
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	4915      	ldr	r1, [pc, #84]	; (8000bf8 <esp8266_init+0xb4>)
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff91 	bl	8000acc <Transmit_Wrapper>
	if (Receive_Wrapper(responseBuffer, C_ATE0_OK , C_ATE_LEN("0") + R_OK_LEN)) {
 8000baa:	220c      	movs	r2, #12
 8000bac:	4917      	ldr	r1, [pc, #92]	; (8000c0c <esp8266_init+0xc8>)
 8000bae:	4815      	ldr	r0, [pc, #84]	; (8000c04 <esp8266_init+0xc0>)
 8000bb0:	f7ff ffaa 	bl	8000b08 <Receive_Wrapper>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <esp8266_init+0x7a>
		return ESP8266_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e018      	b.n	8000bf0 <esp8266_init+0xac>
	}
	//HAL_Delay(100);

	// Enable station mode
	strcpy((char *) esp_buffer, C_AT_CWMODE("1"));
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <esp8266_init+0xb4>)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <esp8266_init+0xcc>)
 8000bc2:	4614      	mov	r4, r2
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	8023      	strh	r3, [r4, #0]
	Transmit_Wrapper(huart, esp_buffer, C_AT_CWMODE_LEN("1"), R_OK_LEN);
 8000bce:	2306      	movs	r3, #6
 8000bd0:	2211      	movs	r2, #17
 8000bd2:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <esp8266_init+0xb4>)
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff79 	bl	8000acc <Transmit_Wrapper>
	if(Receive_Wrapper(responseBuffer, R_OK , R_OK_LEN))
 8000bda:	2206      	movs	r2, #6
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <esp8266_init+0xd0>)
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <esp8266_init+0xc0>)
 8000be0:	f7ff ff92 	bl	8000b08 <Receive_Wrapper>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <esp8266_init+0xaa>
		return ESP8266_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <esp8266_init+0xac>
	//HAL_Delay(100);


	return ESP8266_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf8:	200005b4 	.word	0x200005b4
 8000bfc:	08009b78 	.word	0x08009b78
 8000c00:	08009b80 	.word	0x08009b80
 8000c04:	200050bc 	.word	0x200050bc
 8000c08:	08009b8c 	.word	0x08009b8c
 8000c0c:	08009b94 	.word	0x08009b94
 8000c10:	08009ba4 	.word	0x08009ba4
 8000c14:	08009bb8 	.word	0x08009bb8

08000c18 <esp8266_reset>:

/*-- Physically resets the ESP8266 by triggering its reset pin using GPIOA Pin 1 --*/
ESP8266_STATUS esp8266_reset(UART_HandleTypeDef *huart) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	strcpy((char *) esp_buffer, "AT+RST\r\n");
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <esp8266_reset+0x48>)
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <esp8266_reset+0x4c>)
 8000c24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c26:	c303      	stmia	r3!, {r0, r1}
 8000c28:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(huart, esp_buffer, 8);
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <esp8266_reset+0x48>)
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f004 f91e 	bl	8004e70 <HAL_UART_Transmit_DMA>

	Transmit_Wrapper(huart, esp_buffer, 8, 565);
 8000c34:	f240 2335 	movw	r3, #565	; 0x235
 8000c38:	2208      	movs	r2, #8
 8000c3a:	4909      	ldr	r1, [pc, #36]	; (8000c60 <esp8266_reset+0x48>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff45 	bl	8000acc <Transmit_Wrapper>
	if(Receive_Wrapper(&responseBuffer[565-R_RESET_LEN], R_RESET , R_RESET_LEN))
 8000c42:	2209      	movs	r2, #9
 8000c44:	4908      	ldr	r1, [pc, #32]	; (8000c68 <esp8266_reset+0x50>)
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <esp8266_reset+0x54>)
 8000c48:	f7ff ff5e 	bl	8000b08 <Receive_Wrapper>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <esp8266_reset+0x3e>
		return ESP8266_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <esp8266_reset+0x40>

	return ESP8266_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200005b4 	.word	0x200005b4
 8000c64:	08009bc0 	.word	0x08009bc0
 8000c68:	08009bcc 	.word	0x08009bcc
 8000c6c:	200052e8 	.word	0x200052e8

08000c70 <init_task_list>:
static uint32_t last_time;

static void handle_response (UART_HandleTypeDef *huart, TASK_NODE *t);
static void handle_request (UART_HandleTypeDef *huart, TASK_NODE *t);

void init_task_list() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t cnt;
	head = tasks;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <init_task_list+0x70>)
 8000c78:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <init_task_list+0x74>)
 8000c7a:	601a      	str	r2, [r3, #0]
	tail = tasks;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <init_task_list+0x78>)
 8000c7e:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <init_task_list+0x74>)
 8000c80:	601a      	str	r2, [r3, #0]
	TASK_NODE *temp = head;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <init_task_list+0x70>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	603b      	str	r3, [r7, #0]
	for (cnt = 1; cnt < MAX_TASKS; cnt++) {
 8000c88:	2301      	movs	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	e011      	b.n	8000cb2 <init_task_list+0x42>
		temp->task_type = NULL_TASK;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	711a      	strb	r2, [r3, #4]
		temp->next = &tasks[cnt];
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	4613      	mov	r3, r2
 8000c98:	011b      	lsls	r3, r3, #4
 8000c9a:	4413      	add	r3, r2
 8000c9c:	011b      	lsls	r3, r3, #4
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <init_task_list+0x74>)
 8000ca0:	441a      	add	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	601a      	str	r2, [r3, #0]
		temp = temp->next;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	603b      	str	r3, [r7, #0]
	for (cnt = 1; cnt < MAX_TASKS; cnt++) {
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	2b3f      	cmp	r3, #63	; 0x3f
 8000cb6:	d9ea      	bls.n	8000c8e <init_task_list+0x1e>
	}
	temp->task_type = NULL_TASK;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	22ff      	movs	r2, #255	; 0xff
 8000cbc:	711a      	strb	r2, [r3, #4]
	temp->next = head;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <init_task_list+0x70>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	601a      	str	r2, [r3, #0]
	last_time = HAL_GetTick();
 8000cc6:	f000 fa1f 	bl	8001108 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <init_task_list+0x7c>)
 8000cce:	601a      	str	r2, [r3, #0]
	num_tasks = 0;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <init_task_list+0x80>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20004db8 	.word	0x20004db8
 8000ce4:	200009b8 	.word	0x200009b8
 8000ce8:	20004dbc 	.word	0x20004dbc
 8000cec:	20004dc4 	.word	0x20004dc4
 8000cf0:	20004dc0 	.word	0x20004dc0

08000cf4 <bring_current>:
	} else {
		return 0;
	}
}

uint32_t bring_current() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	uint32_t dt;
	uint32_t current_time = HAL_GetTick();
 8000cfa:	f000 fa05 	bl	8001108 <HAL_GetTick>
 8000cfe:	6038      	str	r0, [r7, #0]
	if (current_time < last_time) {
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <bring_current+0x8c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d206      	bcs.n	8000d18 <bring_current+0x24>
		dt = (UINT32_MAX - last_time) + current_time;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <bring_current+0x8c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	3b01      	subs	r3, #1
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e004      	b.n	8000d22 <bring_current+0x2e>
	} else {
		dt = current_time - last_time;
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <bring_current+0x8c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	607b      	str	r3, [r7, #4]
	}
	last_time = current_time;
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <bring_current+0x8c>)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	6013      	str	r3, [r2, #0]
	if (num_tasks == 0) {
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <bring_current+0x90>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <bring_current+0x42>
		return 0xFFFFFFFF;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	e020      	b.n	8000d78 <bring_current+0x84>
	} else {
		if (head->timeout < dt) {
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <bring_current+0x94>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d906      	bls.n	8000d52 <bring_current+0x5e>
			head->timeout = 0;
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <bring_current+0x94>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			return 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e012      	b.n	8000d78 <bring_current+0x84>
		} else {
			head->timeout = head->timeout - dt;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <bring_current+0x94>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <bring_current+0x94>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	1a8a      	subs	r2, r1, r2
 8000d62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			return (head->timeout > MAX_WAIT) ? MAX_WAIT : head->timeout;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <bring_current+0x94>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d72:	bf28      	it	cs
 8000d74:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
		}
	}
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20004dc4 	.word	0x20004dc4
 8000d84:	20004dc0 	.word	0x20004dc0
 8000d88:	20004db8 	.word	0x20004db8

08000d8c <add_task>:

void add_task(TASK_TYPE task_type, uint8_t size, void *task, uint32_t timeout,
		uint32_t repeat_interval) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4603      	mov	r3, r0
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	73bb      	strb	r3, [r7, #14]
	if (num_tasks == MAX_TASKS) {
 8000d9e:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <add_task+0x1b0>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b40      	cmp	r3, #64	; 0x40
 8000da4:	f000 80c5 	beq.w	8000f32 <add_task+0x1a6>
		return;
	}
	uint8_t cnt;
	TASK_NODE *t, *temp;
	// If empty simply fill head with relevant data
	if (num_tasks == 0) {
 8000da8:	4b64      	ldr	r3, [pc, #400]	; (8000f3c <add_task+0x1b0>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d11e      	bne.n	8000dee <add_task+0x62>
		t = head;
 8000db0:	4b63      	ldr	r3, [pc, #396]	; (8000f40 <add_task+0x1b4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
		t->task_type = task_type;
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	711a      	strb	r2, [r3, #4]
		t->size = size;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	7bba      	ldrb	r2, [r7, #14]
 8000dc0:	715a      	strb	r2, [r3, #5]
		memcpy(t->task, (uint8_t *) task, size);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	7bba      	ldrb	r2, [r7, #14]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f008 fe72 	bl	8009ab4 <memcpy>
		t->timeout = timeout;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		t->repeat_interval = repeat_interval;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ddc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		num_tasks++;
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <add_task+0x1b0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <add_task+0x1b0>)
 8000dea:	701a      	strb	r2, [r3, #0]
		return;
 8000dec:	e0a2      	b.n	8000f34 <add_task+0x1a8>
	}
	// If not empty take a free task (tail->next) and fill it with relevant data (except timeout, which is relative to the other tasks)
	t = tail->next;
 8000dee:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <add_task+0x1b8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	617b      	str	r3, [r7, #20]
	t->task_type = task_type;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	711a      	strb	r2, [r3, #4]
	t->size = size;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	7bba      	ldrb	r2, [r7, #14]
 8000e00:	715a      	strb	r2, [r3, #5]
	memcpy(t->task, (uint8_t *) task, size);
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3306      	adds	r3, #6
 8000e06:	7bba      	ldrb	r2, [r7, #14]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f008 fe52 	bl	8009ab4 <memcpy>
	t->repeat_interval = repeat_interval;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	// Unlink the task from the list
	tail->next = t->next;
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <add_task+0x1b8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	697a      	ldr	r2, [r7, #20]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	601a      	str	r2, [r3, #0]
	t->next = NULL;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
	// Process the case were the task has to be inserted at the beginning of the task list
	if (timeout < head->timeout) {
 8000e28:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <add_task+0x1b4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d22d      	bcs.n	8000e92 <add_task+0x106>
		// Get empty task that precedes the head in the circular task list
		for (cnt = 0, temp = head; cnt < MAX_TASKS - 2; cnt++, temp = temp->next);
 8000e36:	2300      	movs	r3, #0
 8000e38:	77fb      	strb	r3, [r7, #31]
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <add_task+0x1b4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	61bb      	str	r3, [r7, #24]
 8000e40:	e005      	b.n	8000e4e <add_task+0xc2>
 8000e42:	7ffb      	ldrb	r3, [r7, #31]
 8000e44:	3301      	adds	r3, #1
 8000e46:	77fb      	strb	r3, [r7, #31]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	2b3d      	cmp	r3, #61	; 0x3d
 8000e52:	d9f6      	bls.n	8000e42 <add_task+0xb6>
		temp->next = t;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	601a      	str	r2, [r3, #0]
		t->timeout = timeout;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		t->next = head;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <add_task+0x1b4>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	601a      	str	r2, [r3, #0]
		head->timeout = head->timeout - timeout;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <add_task+0x1b4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8000e72:	4b33      	ldr	r3, [pc, #204]	; (8000f40 <add_task+0x1b4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	1a8a      	subs	r2, r1, r2
 8000e7a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		head = t;
 8000e7e:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <add_task+0x1b4>)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	6013      	str	r3, [r2, #0]
		num_tasks++;
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <add_task+0x1b0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <add_task+0x1b0>)
 8000e8e:	701a      	strb	r2, [r3, #0]
		return;
 8000e90:	e050      	b.n	8000f34 <add_task+0x1a8>
	}
	// Iterate through task list and find where the task should be inserted based on its timeout.
	for (cnt = 0, temp = head; cnt < num_tasks; cnt++, temp = temp->next) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	77fb      	strb	r3, [r7, #31]
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <add_task+0x1b4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	e03d      	b.n	8000f1a <add_task+0x18e>
		timeout = timeout - temp->timeout;
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	607b      	str	r3, [r7, #4]
		// Handle case when we are at the end of the task list
		if (cnt == num_tasks - 1) {
 8000eaa:	7ffa      	ldrb	r2, [r7, #31]
 8000eac:	4b23      	ldr	r3, [pc, #140]	; (8000f3c <add_task+0x1b0>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d10e      	bne.n	8000ed4 <add_task+0x148>
			t->timeout = timeout;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			t->next = temp->next;
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	601a      	str	r2, [r3, #0]
			temp->next = t;
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	601a      	str	r2, [r3, #0]
			tail = t;
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <add_task+0x1b8>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	6013      	str	r3, [r2, #0]
			break;
 8000ed2:	e027      	b.n	8000f24 <add_task+0x198>
		}
		// Handle normal case
		else if (timeout < temp->next->timeout) {
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d215      	bcs.n	8000f0e <add_task+0x182>
			t->timeout = timeout;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			temp->next->timeout = temp->next->timeout - timeout;
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	1a8a      	subs	r2, r1, r2
 8000efa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			t->next = temp->next;
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
			temp->next = t;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]
			break;
 8000f0c:	e00a      	b.n	8000f24 <add_task+0x198>
	for (cnt = 0, temp = head; cnt < num_tasks; cnt++, temp = temp->next) {
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	3301      	adds	r3, #1
 8000f12:	77fb      	strb	r3, [r7, #31]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <add_task+0x1b0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	7ffa      	ldrb	r2, [r7, #31]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3bc      	bcc.n	8000e9e <add_task+0x112>
		}
	}
	num_tasks++;
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <add_task+0x1b0>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <add_task+0x1b0>)
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e000      	b.n	8000f34 <add_task+0x1a8>
		return;
 8000f32:	bf00      	nop
}
 8000f34:	3720      	adds	r7, #32
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20004dc0 	.word	0x20004dc0
 8000f40:	20004db8 	.word	0x20004db8
 8000f44:	20004dbc 	.word	0x20004dbc

08000f48 <handle_tasks>:

void handle_tasks (UART_HandleTypeDef *huart) {
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	6078      	str	r0, [r7, #4]
	if (bring_current() > 2) {
 8000f50:	f7ff fed0 	bl	8000cf4 <bring_current>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d83c      	bhi.n	8000fd4 <handle_tasks+0x8c>
		return;
	}
	TASK_NODE *t = head;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <handle_tasks+0x94>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
	head = head->next;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <handle_tasks+0x94>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <handle_tasks+0x94>)
 8000f68:	6013      	str	r3, [r2, #0]
	num_tasks--;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <handle_tasks+0x98>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <handle_tasks+0x98>)
 8000f74:	701a      	strb	r2, [r3, #0]
	switch (t->task_type) {
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d007      	beq.n	8000f90 <handle_tasks+0x48>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d000      	beq.n	8000f86 <handle_tasks+0x3e>
			break;
		case REQUEST_TASK:
			handle_request(huart, t);
			break;
		default:
			break;
 8000f84:	e009      	b.n	8000f9a <handle_tasks+0x52>
			handle_response(huart, t);
 8000f86:	68f9      	ldr	r1, [r7, #12]
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f82b 	bl	8000fe4 <handle_response>
			break;
 8000f8e:	e004      	b.n	8000f9a <handle_tasks+0x52>
			handle_request(huart, t);
 8000f90:	68f9      	ldr	r1, [r7, #12]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f831 	bl	8000ffa <handle_request>
			break;
 8000f98:	bf00      	nop
	}
	if (t->repeat_interval) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d012      	beq.n	8000fca <handle_tasks+0x82>
		bring_current();
 8000fa4:	f7ff fea6 	bl	8000cf4 <bring_current>
		add_task(t->task_type, t->size, t->task, t->repeat_interval, t->repeat_interval);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f993 0004 	ldrsb.w	r0, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	7959      	ldrb	r1, [r3, #5]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1d9a      	adds	r2, r3, #6
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f8d3 410c 	ldr.w	r4, [r3, #268]	; 0x10c
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	f7ff fee1 	bl	8000d8c <add_task>
	}
	t->task_type = NULL_TASK;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	22ff      	movs	r2, #255	; 0xff
 8000fce:	711a      	strb	r2, [r3, #4]
	return;
 8000fd0:	bf00      	nop
 8000fd2:	e000      	b.n	8000fd6 <handle_tasks+0x8e>
		return;
 8000fd4:	bf00      	nop
}
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	20004db8 	.word	0x20004db8
 8000fe0:	20004dc0 	.word	0x20004dc0

08000fe4 <handle_response>:

void handle_response (UART_HandleTypeDef *huart, TASK_NODE *t) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <handle_request>:

void handle_request (UART_HandleTypeDef *huart, TASK_NODE *t) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, &t->size, 1, 5 * SEC);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	1d59      	adds	r1, r3, #5
 8001008:	f241 3388 	movw	r3, #5000	; 0x1388
 800100c:	2201      	movs	r2, #1
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f003 fdf9 	bl	8004c06 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, t->task, t->size, 5 * SEC);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	1d99      	adds	r1, r3, #6
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	795b      	ldrb	r3, [r3, #5]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f003 fdef 	bl	8004c06 <HAL_UART_Transmit>
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_Init+0x3c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_Init+0x3c>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001046:	2003      	movs	r0, #3
 8001048:	f000 f97e 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104c:	2000      	movs	r0, #0
 800104e:	f000 f80f 	bl	8001070 <HAL_InitTick>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	e001      	b.n	8001062 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800105e:	f7ff fb75 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001062:	79fb      	ldrb	r3, [r7, #7]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_InitTick+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d022      	beq.n	80010ca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_InitTick+0x6c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_InitTick+0x68>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001090:	fbb1 f3f3 	udiv	r3, r1, r3
 8001094:	fbb2 f3f3 	udiv	r3, r2, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f998 	bl	80013ce <HAL_SYSTICK_Config>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10f      	bne.n	80010c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	d809      	bhi.n	80010be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010aa:	2200      	movs	r2, #0
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	f000 f954 	bl	800135e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_InitTick+0x70>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e007      	b.n	80010ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e004      	b.n	80010ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x1c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x1c>)
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	200051bc 	.word	0x200051bc
 8001104:	20000008 	.word	0x20000008

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200051bc 	.word	0x200051bc

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d004      	beq.n	8001144 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_Delay+0x40>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001144:	bf00      	nop
 8001146:	f7ff ffdf 	bl	8001108 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8f7      	bhi.n	8001146 <HAL_Delay+0x26>
  {
  }
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db0b      	blt.n	80011f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	f003 021f 	and.w	r2, r3, #31
 80011e0:	4907      	ldr	r1, [pc, #28]	; (8001200 <__NVIC_EnableIRQ+0x38>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	2001      	movs	r0, #1
 80011ea:	fa00 f202 	lsl.w	r2, r0, r2
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100

08001204 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	2b00      	cmp	r3, #0
 8001214:	db10      	blt.n	8001238 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	4909      	ldr	r1, [pc, #36]	; (8001244 <__NVIC_DisableIRQ+0x40>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	095b      	lsrs	r3, r3, #5
 8001224:	2001      	movs	r0, #1
 8001226:	fa00 f202 	lsl.w	r2, r0, r2
 800122a:	3320      	adds	r3, #32
 800122c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001234:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff07 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff1c 	bl	80011ac <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff0f 	bl	80011c8 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff1f 	bl	8001204 <__NVIC_DisableIRQ>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff94 	bl	8001304 <SysTick_Config>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e098      	b.n	800152c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_DMA_Init+0x150>)
 8001402:	429a      	cmp	r2, r3
 8001404:	d80f      	bhi.n	8001426 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_DMA_Init+0x154>)
 800140e:	4413      	add	r3, r2
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <HAL_DMA_Init+0x158>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	009a      	lsls	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_DMA_Init+0x15c>)
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
 8001424:	e00e      	b.n	8001444 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	461a      	mov	r2, r3
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <HAL_DMA_Init+0x160>)
 800142e:	4413      	add	r3, r2
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <HAL_DMA_Init+0x158>)
 8001432:	fba2 2303 	umull	r2, r3, r2, r3
 8001436:	091b      	lsrs	r3, r3, #4
 8001438:	009a      	lsls	r2, r3, #2
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a42      	ldr	r2, [pc, #264]	; (800154c <HAL_DMA_Init+0x164>)
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800145a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800145e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800149e:	d039      	beq.n	8001514 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a27      	ldr	r2, [pc, #156]	; (8001544 <HAL_DMA_Init+0x15c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11a      	bne.n	80014e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014aa:	4b29      	ldr	r3, [pc, #164]	; (8001550 <HAL_DMA_Init+0x168>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f003 031c 	and.w	r3, r3, #28
 80014b6:	210f      	movs	r1, #15
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4924      	ldr	r1, [pc, #144]	; (8001550 <HAL_DMA_Init+0x168>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <HAL_DMA_Init+0x168>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f003 031c 	and.w	r3, r3, #28
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	491d      	ldr	r1, [pc, #116]	; (8001550 <HAL_DMA_Init+0x168>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
 80014de:	e019      	b.n	8001514 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80014e0:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <HAL_DMA_Init+0x16c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e8:	f003 031c 	and.w	r3, r3, #28
 80014ec:	210f      	movs	r1, #15
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4917      	ldr	r1, [pc, #92]	; (8001554 <HAL_DMA_Init+0x16c>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_DMA_Init+0x16c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 031c 	and.w	r3, r3, #28
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	4911      	ldr	r1, [pc, #68]	; (8001554 <HAL_DMA_Init+0x16c>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40020407 	.word	0x40020407
 800153c:	bffdfff8 	.word	0xbffdfff8
 8001540:	cccccccd 	.word	0xcccccccd
 8001544:	40020000 	.word	0x40020000
 8001548:	bffdfbf8 	.word	0xbffdfbf8
 800154c:	40020400 	.word	0x40020400
 8001550:	400200a8 	.word	0x400200a8
 8001554:	400204a8 	.word	0x400204a8

08001558 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e072      	b.n	8001650 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_DMA_DeInit+0x104>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d80f      	bhi.n	80015a6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_DMA_DeInit+0x108>)
 800158e:	4413      	add	r3, r2
 8001590:	4a34      	ldr	r2, [pc, #208]	; (8001664 <HAL_DMA_DeInit+0x10c>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	009a      	lsls	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_DMA_DeInit+0x110>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
 80015a4:	e00e      	b.n	80015c4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_DMA_DeInit+0x114>)
 80015ae:	4413      	add	r3, r2
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <HAL_DMA_DeInit+0x10c>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	009a      	lsls	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a2b      	ldr	r2, [pc, #172]	; (8001670 <HAL_DMA_DeInit+0x118>)
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d0:	f003 021c 	and.w	r2, r3, #28
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f202 	lsl.w	r2, r1, r2
 80015de:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_DMA_DeInit+0x110>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10d      	bne.n	8001606 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <HAL_DMA_DeInit+0x11c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f003 031c 	and.w	r3, r3, #28
 80015f6:	210f      	movs	r1, #15
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	491d      	ldr	r1, [pc, #116]	; (8001674 <HAL_DMA_DeInit+0x11c>)
 8001600:	4013      	ands	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e00c      	b.n	8001620 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_DMA_DeInit+0x120>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f003 031c 	and.w	r3, r3, #28
 8001612:	210f      	movs	r1, #15
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	4917      	ldr	r1, [pc, #92]	; (8001678 <HAL_DMA_DeInit+0x120>)
 800161c:	4013      	ands	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40020407 	.word	0x40020407
 8001660:	bffdfff8 	.word	0xbffdfff8
 8001664:	cccccccd 	.word	0xcccccccd
 8001668:	40020000 	.word	0x40020000
 800166c:	bffdfbf8 	.word	0xbffdfbf8
 8001670:	40020400 	.word	0x40020400
 8001674:	400200a8 	.word	0x400200a8
 8001678:	400204a8 	.word	0x400204a8

0800167c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_DMA_Start_IT+0x20>
 8001698:	2302      	movs	r3, #2
 800169a:	e04b      	b.n	8001734 <HAL_DMA_Start_IT+0xb8>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d13a      	bne.n	8001726 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f921 	bl	800191c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d008      	beq.n	80016f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 020e 	orr.w	r2, r2, #14
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e00f      	b.n	8001714 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0204 	bic.w	r2, r2, #4
 8001702:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 020a 	orr.w	r2, r2, #10
 8001712:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e005      	b.n	8001732 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800172e:	2302      	movs	r3, #2
 8001730:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001732:	7dfb      	ldrb	r3, [r7, #23]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d005      	beq.n	8001760 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2204      	movs	r2, #4
 8001758:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e029      	b.n	80017b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 020e 	bic.w	r2, r2, #14
 800176e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0201 	bic.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f003 021c 	and.w	r2, r3, #28
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f202 	lsl.w	r2, r1, r2
 8001792:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    }
  }
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 031c 	and.w	r3, r3, #28
 80017de:	2204      	movs	r2, #4
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d026      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d021      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f003 021c 	and.w	r2, r3, #28
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2104      	movs	r1, #4
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d071      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001836:	e06c      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 031c 	and.w	r3, r3, #28
 8001840:	2202      	movs	r2, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02e      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d029      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020a 	bic.w	r2, r2, #10
 8001872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 021c 	and.w	r2, r3, #28
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2102      	movs	r1, #2
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d038      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018a8:	e033      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d02a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d025      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f003 021c 	and.w	r2, r3, #28
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001912:	bf00      	nop
 8001914:	bf00      	nop
}
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f003 021c 	and.w	r2, r3, #28
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b10      	cmp	r3, #16
 800194c:	d108      	bne.n	8001960 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800195e:	e007      	b.n	8001970 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e17f      	b.n	8001c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 8171 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d118      	bne.n	8001a64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x128>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	6939      	ldr	r1, [r7, #16]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80ac 	beq.w	8001c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b46:	4a59      	ldr	r2, [pc, #356]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b70:	d025      	beq.n	8001bbe <HAL_GPIO_Init+0x242>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d01f      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d019      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d00d      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d007      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00c      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00a      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001baa:	2305      	movs	r3, #5
 8001bac:	e008      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e004      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_GPIO_Init+0x244>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	f002 0203 	and.w	r2, r2, #3
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	4093      	lsls	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd0:	4936      	ldr	r1, [pc, #216]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c02:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c2c:	4a26      	ldr	r2, [pc, #152]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c56:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa22 f303 	lsr.w	r3, r2, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f47f ae78 	bne.w	800198c <HAL_GPIO_Init+0x10>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	40010400 	.word	0x40010400

08001ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001cda:	e0cd      	b.n	8001e78 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80c0 	beq.w	8001e72 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1a:	d025      	beq.n	8001d68 <HAL_GPIO_DeInit+0x9c>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	; (8001e98 <HAL_GPIO_DeInit+0x1cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d01f      	beq.n	8001d64 <HAL_GPIO_DeInit+0x98>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a5d      	ldr	r2, [pc, #372]	; (8001e9c <HAL_GPIO_DeInit+0x1d0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d019      	beq.n	8001d60 <HAL_GPIO_DeInit+0x94>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_GPIO_DeInit+0x1d4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_DeInit+0x90>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a5b      	ldr	r2, [pc, #364]	; (8001ea4 <HAL_GPIO_DeInit+0x1d8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_DeInit+0x8c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_GPIO_DeInit+0x1dc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_DeInit+0x88>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_GPIO_DeInit+0x1e0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_DeInit+0x84>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e00c      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d50:	2307      	movs	r3, #7
 8001d52:	e00a      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d54:	2305      	movs	r3, #5
 8001d56:	e008      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e006      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e004      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_GPIO_DeInit+0x9e>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	f002 0203 	and.w	r2, r2, #3
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	4093      	lsls	r3, r2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d132      	bne.n	8001de0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	494b      	ldr	r1, [pc, #300]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4947      	ldr	r1, [pc, #284]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4944      	ldr	r1, [pc, #272]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	4940      	ldr	r1, [pc, #256]	; (8001eb0 <HAL_GPIO_DeInit+0x1e4>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001dc2:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	4830      	ldr	r0, [pc, #192]	; (8001e94 <HAL_GPIO_DeInit+0x1c8>)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	400a      	ands	r2, r1
 8001dda:	3302      	adds	r3, #2
 8001ddc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	2103      	movs	r1, #3
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	08d2      	lsrs	r2, r2, #3
 8001e14:	4019      	ands	r1, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2103      	movs	r1, #3
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	401a      	ands	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2103      	movs	r1, #3
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e62:	2101      	movs	r1, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f af2b 	bne.w	8001cdc <HAL_GPIO_DeInit+0x10>
  }
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	48001400 	.word	0x48001400
 8001eac:	48001800 	.word	0x48001800
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee6:	b08f      	sub	sp, #60	; 0x3c
 8001ee8:	af0a      	add	r7, sp, #40	; 0x28
 8001eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e116      	b.n	8002124 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f007 f98f 	bl	8009234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d102      	bne.n	8001f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f004 f8c6 	bl	80060c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	687e      	ldr	r6, [r7, #4]
 8001f42:	466d      	mov	r5, sp
 8001f44:	f106 0410 	add.w	r4, r6, #16
 8001f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f58:	1d33      	adds	r3, r6, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	6838      	ldr	r0, [r7, #0]
 8001f5e:	f003 ffb3 	bl	8005ec8 <USB_CoreInit>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d7      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f8b4 	bl	80060e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e04a      	b.n	800201c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	333d      	adds	r3, #61	; 0x3d
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	333c      	adds	r3, #60	; 0x3c
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3342      	adds	r3, #66	; 0x42
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	333f      	adds	r3, #63	; 0x3f
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3344      	adds	r3, #68	; 0x44
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3348      	adds	r3, #72	; 0x48
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	3350      	adds	r3, #80	; 0x50
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	3301      	adds	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d3af      	bcc.n	8001f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
 800202a:	e044      	b.n	80020b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	3301      	adds	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d3b5      	bcc.n	800202c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	687e      	ldr	r6, [r7, #4]
 80020c8:	466d      	mov	r5, sp
 80020ca:	f106 0410 	add.w	r4, r6, #16
 80020ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020da:	e885 0003 	stmia.w	r5, {r0, r1}
 80020de:	1d33      	adds	r3, r6, #4
 80020e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e2:	6838      	ldr	r0, [r7, #0]
 80020e4:	f004 f82a 	bl	800613c <USB_DevInit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e014      	b.n	8002124 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 ff62 	bl	8002fdc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f004 ffa3 	bl	8007068 <USB_DevDisconnect>

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_PCD_Start+0x1c>
 8002144:	2302      	movs	r3, #2
 8002146:	e01c      	b.n	8002182 <HAL_PCD_Start+0x56>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 ff65 	bl	8007038 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 ff96 	bl	80060a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800218a:	b590      	push	{r4, r7, lr}
 800218c:	b08d      	sub	sp, #52	; 0x34
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f005 f80c 	bl	80071be <USB_GetMode>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 838f 	bne.w	80028cc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 ff70 	bl	8007098 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8385 	beq.w	80028ca <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 ff67 	bl	8007098 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d107      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f002 0202 	and.w	r2, r2, #2
 80021e2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 ff55 	bl	8007098 <USB_ReadInterrupts>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d161      	bne.n	80022bc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0210 	bic.w	r2, r2, #16
 8002206:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	2b02      	cmp	r3, #2
 8002232:	d124      	bne.n	800227e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d035      	beq.n	80022ac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800224a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6a38      	ldr	r0, [r7, #32]
 8002254:	f004 fdcd 	bl	8006df2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002264:	441a      	add	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002276:	441a      	add	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	619a      	str	r2, [r3, #24]
 800227c:	e016      	b.n	80022ac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	0c5b      	lsrs	r3, r3, #17
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	2b06      	cmp	r3, #6
 8002288:	d110      	bne.n	80022ac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002290:	2208      	movs	r2, #8
 8002292:	4619      	mov	r1, r3
 8002294:	6a38      	ldr	r0, [r7, #32]
 8002296:	f004 fdac 	bl	8006df2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0210 	orr.w	r2, r2, #16
 80022ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fee9 	bl	8007098 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022d0:	d16e      	bne.n	80023b0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f004 feef 	bl	80070be <USB_ReadDevAllOutEpInterrupt>
 80022e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80022e2:	e062      	b.n	80023aa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d057      	beq.n	800239e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f004 ff14 	bl	8007126 <USB_ReadDevOutEPInterrupt>
 80022fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002316:	461a      	mov	r2, r3
 8002318:	2301      	movs	r3, #1
 800231a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800231c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fd82 	bl	8002e28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00c      	beq.n	8002348 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	461a      	mov	r2, r3
 800233c:	2308      	movs	r3, #8
 800233e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 fdbe 	bl	8002ec4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	4413      	add	r3, r2
 800235a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235e:	461a      	mov	r2, r3
 8002360:	2310      	movs	r3, #16
 8002362:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	4413      	add	r3, r2
 8002376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237a:	461a      	mov	r2, r3
 800237c:	2320      	movs	r3, #32
 800237e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002396:	461a      	mov	r2, r3
 8002398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d199      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f004 fe6f 	bl	8007098 <USB_ReadInterrupts>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023c4:	f040 8087 	bne.w	80024d6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f004 fe90 	bl	80070f2 <USB_ReadDevAllInEpInterrupt>
 80023d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80023d8:	e07a      	b.n	80024d0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80023da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d06f      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 feb7 	bl	8007162 <USB_ReadDevInEPInterrupt>
 80023f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d020      	beq.n	8002442 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	69f9      	ldr	r1, [r7, #28]
 800241c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002420:	4013      	ands	r3, r2
 8002422:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f006 ff8c 	bl	800935a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	4413      	add	r3, r2
 8002454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002458:	461a      	mov	r2, r3
 800245a:	2308      	movs	r3, #8
 800245c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002474:	461a      	mov	r2, r3
 8002476:	2310      	movs	r3, #16
 8002478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002490:	461a      	mov	r2, r3
 8002492:	2340      	movs	r3, #64	; 0x40
 8002494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ac:	461a      	mov	r2, r3
 80024ae:	2302      	movs	r3, #2
 80024b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fc29 	bl	8002d16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3301      	adds	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d181      	bne.n	80023da <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f004 fddc 	bl	8007098 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ea:	d122      	bne.n	8002532 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002512:	2100      	movs	r1, #0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f007 fa3d 	bl	8009994 <HAL_PCDEx_LPM_Callback>
 800251a:	e002      	b.n	8002522 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f006 ff89 	bl	8009434 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002530:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f004 fdae 	bl	8007098 <USB_ReadInterrupts>
 800253c:	4603      	mov	r3, r0
 800253e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002546:	d112      	bne.n	800256e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f006 ff45 	bl	80093e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800256c:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fd90 	bl	8007098 <USB_ReadInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002582:	d121      	bne.n	80025c8 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002592:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d111      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	f003 020f 	and.w	r2, r3, #15
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025b8:	2101      	movs	r1, #1
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f007 f9ea 	bl	8009994 <HAL_PCDEx_LPM_Callback>
 80025c0:	e002      	b.n	80025c8 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f006 ff10 	bl	80093e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 fd63 	bl	8007098 <USB_ReadInterrupts>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	f040 80c5 	bne.w	800276a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2110      	movs	r1, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 feea 	bl	80063d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002604:	e056      	b.n	80026b4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002612:	461a      	mov	r2, r3
 8002614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002618:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	440a      	add	r2, r1
 8002630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002638:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	440a      	add	r2, r1
 8002650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002658:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002666:	461a      	mov	r2, r3
 8002668:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800266c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800267e:	0151      	lsls	r1, r2, #5
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	440a      	add	r2, r1
 8002684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002688:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800268c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	0151      	lsls	r1, r2, #5
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	440a      	add	r2, r1
 80026a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b0:	3301      	adds	r3, #1
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d3a3      	bcc.n	8002606 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d016      	beq.n	8002708 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ea:	f043 030b 	orr.w	r3, r3, #11
 80026ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002700:	f043 030b 	orr.w	r3, r3, #11
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	e015      	b.n	8002734 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800271a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800271e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800272e:	f043 030b 	orr.w	r3, r3, #11
 8002732:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002742:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002746:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f004 fd63 	bl	8007220 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fc92 	bl	8007098 <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d124      	bne.n	80027ca <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fd28 	bl	80071da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fe81 	bl	8006496 <USB_GetDevSpeed>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681c      	ldr	r4, [r3, #0]
 80027a0:	f001 fa06 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	4620      	mov	r0, r4
 80027b0:	f003 fbdc 	bl	8005f6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f006 fdf8 	bl	80093aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fc62 	bl	8007098 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d10a      	bne.n	80027f4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f006 fdd5 	bl	800938e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f002 0208 	and.w	r2, r2, #8
 80027f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f004 fc4d 	bl	8007098 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002808:	d10f      	bne.n	800282a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f006 fe47 	bl	80094a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fc32 	bl	8007098 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800283e:	d10f      	bne.n	8002860 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f006 fe1a 	bl	8009484 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800285e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fc17 	bl	8007098 <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d10a      	bne.n	800288c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f006 fe28 	bl	80094cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800288a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fc01 	bl	8007098 <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b04      	cmp	r3, #4
 800289e:	d115      	bne.n	80028cc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d002      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f006 fe18 	bl	80094e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	e000      	b.n	80028cc <HAL_PCD_IRQHandler+0x742>
      return;
 80028ca:	bf00      	nop
    }
  }
}
 80028cc:	3734      	adds	r7, #52	; 0x34
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}

080028d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_PCD_SetAddress+0x1a>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e013      	b.n	8002914 <HAL_PCD_SetAddress+0x42>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fb71 	bl	8006fec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	70fb      	strb	r3, [r7, #3]
 800292e:	460b      	mov	r3, r1
 8002930:	803b      	strh	r3, [r7, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800293a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800293e:	2b00      	cmp	r3, #0
 8002940:	da0f      	bge.n	8002962 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 020f 	and.w	r2, r3, #15
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	3338      	adds	r3, #56	; 0x38
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	705a      	strb	r2, [r3, #1]
 8002960:	e00f      	b.n	8002982 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	f003 020f 	and.w	r2, r3, #15
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	3304      	adds	r3, #4
 800297a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	f003 030f 	and.w	r3, r3, #15
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800298e:	883a      	ldrh	r2, [r7, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	78ba      	ldrb	r2, [r7, #2]
 8002998:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029ac:	78bb      	ldrb	r3, [r7, #2]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d102      	bne.n	80029b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_EP_Open+0xaa>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e00e      	b.n	80029e4 <HAL_PCD_EP_Open+0xc8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fd7d 	bl	80064d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029e2:	7afb      	ldrb	r3, [r7, #11]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	da0f      	bge.n	8002a20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 020f 	and.w	r2, r3, #15
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	3338      	adds	r3, #56	; 0x38
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4413      	add	r3, r2
 8002a14:	3304      	adds	r3, #4
 8002a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	705a      	strb	r2, [r3, #1]
 8002a1e:	e00f      	b.n	8002a40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	f003 020f 	and.w	r2, r3, #15
 8002a26:	4613      	mov	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	3304      	adds	r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_PCD_EP_Close+0x6e>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e00e      	b.n	8002a78 <HAL_PCD_EP_Close+0x8c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68f9      	ldr	r1, [r7, #12]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fdbb 	bl	80065e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a90:	7afb      	ldrb	r3, [r7, #11]
 8002a92:	f003 020f 	and.w	r2, r3, #15
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ace:	7afb      	ldrb	r3, [r7, #11]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6979      	ldr	r1, [r7, #20]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 f838 	bl	8006b54 <USB_EP0StartXfer>
 8002ae4:	e005      	b.n	8002af2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6979      	ldr	r1, [r7, #20]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fe55 	bl	800679c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 ffe3 	bl	8006b54 <USB_EP0StartXfer>
 8002b8e:	e005      	b.n	8002b9c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6979      	ldr	r1, [r7, #20]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fe00 	bl	800679c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04e      	b.n	8002c62 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0f      	bge.n	8002bec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3338      	adds	r3, #56	; 0x38
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	705a      	strb	r2, [r3, #1]
 8002bea:	e00d      	b.n	8002c08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_PCD_EP_SetStall+0x82>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e01c      	b.n	8002c62 <HAL_PCD_EP_SetStall+0xbc>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 f904 	bl	8006e44 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c50:	4619      	mov	r1, r3
 8002c52:	4610      	mov	r0, r2
 8002c54:	f004 fae4 	bl	8007220 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	f003 020f 	and.w	r2, r3, #15
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d901      	bls.n	8002c88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e042      	b.n	8002d0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da0f      	bge.n	8002cb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	f003 020f 	and.w	r2, r3, #15
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	3338      	adds	r3, #56	; 0x38
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	705a      	strb	r2, [r3, #1]
 8002cae:	e00f      	b.n	8002cd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_PCD_EP_ClrStall+0x86>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e00e      	b.n	8002d0e <HAL_PCD_EP_ClrStall+0xa4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68f9      	ldr	r1, [r7, #12]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 f90e 	bl	8006f20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	3338      	adds	r3, #56	; 0x38
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d901      	bls.n	8002d4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e067      	b.n	8002e1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d902      	bls.n	8002d6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3303      	adds	r3, #3
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d72:	e026      	b.n	8002dc2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d902      	bls.n	8002d90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	3303      	adds	r3, #3
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	6978      	ldr	r0, [r7, #20]
 8002da6:	f003 fff3 	bl	8006d90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	441a      	add	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	441a      	add	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d809      	bhi.n	8002dec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d203      	bcs.n	8002dec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1c3      	bne.n	8002d74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d811      	bhi.n	8002e1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	2201      	movs	r2, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	43db      	mvns	r3, r3
 8002e12:	6939      	ldr	r1, [r7, #16]
 8002e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e18:	4013      	ands	r3, r2
 8002e1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	333c      	adds	r3, #60	; 0x3c
 8002e40:	3304      	adds	r3, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d124      	bne.n	8002ea8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7a:	6093      	str	r3, [r2, #8]
 8002e7c:	e01a      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	2320      	movs	r3, #32
 8002e98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f006 fa3f 	bl	8009324 <HAL_PCD_DataOutStageCallback>
 8002ea6:	e005      	b.n	8002eb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f006 fa38 	bl	8009324 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	4f54310a 	.word	0x4f54310a

08002ec4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	333c      	adds	r3, #60	; 0x3c
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <PCD_EP_OutSetupPacket_int+0x64>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90e      	bls.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f006 f9f1 	bl	8009300 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	4f54300a 	.word	0x4f54300a

08002f2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	70fb      	strb	r3, [r7, #3]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d107      	bne.n	8002f5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f4a:	883b      	ldrh	r3, [r7, #0]
 8002f4c:	0419      	lsls	r1, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
 8002f58:	e028      	b.n	8002fac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e00d      	b.n	8002f8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
 8002f74:	3340      	adds	r3, #64	; 0x40
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	4413      	add	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	3301      	adds	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d3ec      	bcc.n	8002f6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f94:	883b      	ldrh	r3, [r7, #0]
 8002f96:	0418      	lsls	r0, r3, #16
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6819      	ldr	r1, [r3, #0]
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4302      	orrs	r2, r0
 8002fa4:	3340      	adds	r3, #64	; 0x40
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300e:	f043 0303 	orr.w	r3, r3, #3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_PWREx_GetVoltageRange+0x18>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40007000 	.word	0x40007000

08003040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304e:	d130      	bne.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003050:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305c:	d038      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800306c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2232      	movs	r2, #50	; 0x32
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	3301      	adds	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003084:	e002      	b.n	800308c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3b01      	subs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d102      	bne.n	80030a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f2      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a0:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ac:	d110      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e00f      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d007      	beq.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c8:	4a05      	ldr	r2, [pc, #20]	; (80030e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000
 80030e4:	20000000 	.word	0x20000000
 80030e8:	431bde83 	.word	0x431bde83

080030ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fa:	6053      	str	r3, [r2, #4]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40007000 	.word	0x40007000

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e3d4      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	4b9e      	ldr	r3, [pc, #632]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80e4 	beq.w	8003308 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_RCC_OscConfig+0x4a>
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	f040 808b 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b01      	cmp	r3, #1
 8003152:	f040 8087 	bne.w	8003264 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003156:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x62>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e3ac      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	4b8c      	ldr	r3, [pc, #560]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_RCC_OscConfig+0x7c>
 800317e:	4b89      	ldr	r3, [pc, #548]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003186:	e005      	b.n	8003194 <HAL_RCC_OscConfig+0x88>
 8003188:	4b86      	ldr	r3, [pc, #536]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	4293      	cmp	r3, r2
 8003196:	d223      	bcs.n	80031e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fd3f 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e38d      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ac:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a7c      	ldr	r2, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b7a      	ldr	r3, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4977      	ldr	r1, [pc, #476]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ca:	4b76      	ldr	r3, [pc, #472]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4972      	ldr	r1, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e0:	4b70      	ldr	r3, [pc, #448]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6f      	ldr	r2, [pc, #444]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	4b6d      	ldr	r3, [pc, #436]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	496a      	ldr	r1, [pc, #424]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fe:	4b69      	ldr	r3, [pc, #420]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4965      	ldr	r1, [pc, #404]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fcff 	bl	8003c20 <RCC_SetFlashLatencyFromMSIRange>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e34d      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800322c:	f000 fc36 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003230:	4601      	mov	r1, r0
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_RCC_OscConfig+0x29c>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa21 f303 	lsr.w	r3, r1, r3
 8003248:	4a58      	ldr	r2, [pc, #352]	; (80033ac <HAL_RCC_OscConfig+0x2a0>)
 800324a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800324c:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_OscConfig+0x2a4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd ff0d 	bl	8001070 <HAL_InitTick>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d052      	beq.n	8003306 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	e331      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d032      	beq.n	80032d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800326c:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4c      	ldr	r2, [pc, #304]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003278:	f7fd ff46 	bl	8001108 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003280:	f7fd ff42 	bl	8001108 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e31a      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003292:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	493b      	ldr	r1, [pc, #236]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	4936      	ldr	r1, [pc, #216]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e01a      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032de:	f7fd ff13 	bl	8001108 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e6:	f7fd ff0f 	bl	8001108 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e2e7      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCC_OscConfig+0x1da>
 8003304:	e000      	b.n	8003308 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003306:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d074      	beq.n	80033fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b08      	cmp	r3, #8
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x21a>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b0c      	cmp	r3, #12
 800331e:	d10e      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d10b      	bne.n	800333e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d064      	beq.n	80033fc <HAL_RCC_OscConfig+0x2f0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d160      	bne.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e2c4      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x24a>
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e01d      	b.n	8003392 <HAL_RCC_OscConfig+0x286>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x26e>
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x286>
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x298>)
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fd feb5 	bl	8001108 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a0:	e011      	b.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08009cd0 	.word	0x08009cd0
 80033ac:	20000000 	.word	0x20000000
 80033b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fd fea8 	bl	8001108 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	; 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e280      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c6:	4baf      	ldr	r3, [pc, #700]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2a8>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fd fe98 	bl	8001108 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fd fe94 	bl	8001108 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e26c      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ee:	4ba5      	ldr	r3, [pc, #660]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x2d0>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d060      	beq.n	80034cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d005      	beq.n	800341c <HAL_RCC_OscConfig+0x310>
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b0c      	cmp	r3, #12
 8003414:	d119      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d116      	bne.n	800344a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800341c:	4b99      	ldr	r3, [pc, #612]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_OscConfig+0x328>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e249      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	4b93      	ldr	r3, [pc, #588]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	4990      	ldr	r1, [pc, #576]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003448:	e040      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003452:	4b8c      	ldr	r3, [pc, #560]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a8b      	ldr	r2, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fd fe53 	bl	8001108 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7fd fe4f 	bl	8001108 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e227      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003478:	4b82      	ldr	r3, [pc, #520]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b7f      	ldr	r3, [pc, #508]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	497c      	ldr	r1, [pc, #496]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
 8003498:	e018      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b7a      	ldr	r3, [pc, #488]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a79      	ldr	r2, [pc, #484]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a6:	f7fd fe2f 	bl	8001108 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fd fe2b 	bl	8001108 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e203      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f0      	bne.n	80034ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d03c      	beq.n	8003552 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01c      	beq.n	800351a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e6:	4a67      	ldr	r2, [pc, #412]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fd fe0a 	bl	8001108 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd fe06 	bl	8001108 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1de      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800350a:	4b5e      	ldr	r3, [pc, #376]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ef      	beq.n	80034f8 <HAL_RCC_OscConfig+0x3ec>
 8003518:	e01b      	b.n	8003552 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003520:	4a58      	ldr	r2, [pc, #352]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fd fded 	bl	8001108 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003532:	f7fd fde9 	bl	8001108 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1c1      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003544:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1ef      	bne.n	8003532 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a6 	beq.w	80036ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003564:	4b47      	ldr	r3, [pc, #284]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10d      	bne.n	800358c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b44      	ldr	r3, [pc, #272]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	4a43      	ldr	r2, [pc, #268]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800358c:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d118      	bne.n	80035ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003598:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3a      	ldr	r2, [pc, #232]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a4:	f7fd fdb0 	bl	8001108 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ac:	f7fd fdac 	bl	8001108 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e184      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x57c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d108      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4d8>
 80035d2:	4b2c      	ldr	r3, [pc, #176]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	4a2a      	ldr	r2, [pc, #168]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e2:	e024      	b.n	800362e <HAL_RCC_OscConfig+0x522>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d110      	bne.n	800360e <HAL_RCC_OscConfig+0x502>
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035fc:	4b21      	ldr	r3, [pc, #132]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a20      	ldr	r2, [pc, #128]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	e00f      	b.n	800362e <HAL_RCC_OscConfig+0x522>
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800361e:	4b19      	ldr	r3, [pc, #100]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003636:	f7fd fd67 	bl	8001108 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	e00a      	b.n	8003654 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363e:	f7fd fd63 	bl	8001108 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4293      	cmp	r3, r2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e139      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_OscConfig+0x578>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ed      	beq.n	800363e <HAL_RCC_OscConfig+0x532>
 8003662:	e01a      	b.n	800369a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd fd50 	bl	8001108 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800366a:	e00f      	b.n	800368c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fd4c 	bl	8001108 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d906      	bls.n	800368c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e122      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800368c:	4b90      	ldr	r3, [pc, #576]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e8      	bne.n	800366c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369a:	7ffb      	ldrb	r3, [r7, #31]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	4a8a      	ldr	r2, [pc, #552]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8108 	beq.w	80038c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	f040 80d0 	bne.w	8003860 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036c0:	4b83      	ldr	r3, [pc, #524]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0203 	and.w	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d130      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	3b01      	subs	r3, #1
 80036e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d127      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d11f      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003700:	2a07      	cmp	r2, #7
 8003702:	bf14      	ite	ne
 8003704:	2201      	movne	r2, #1
 8003706:	2200      	moveq	r2, #0
 8003708:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	3b01      	subs	r3, #1
 800371c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d109      	bne.n	8003736 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	3b01      	subs	r3, #1
 8003730:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d06e      	beq.n	8003814 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d069      	beq.n	8003810 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800373c:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d105      	bne.n	8003754 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b7      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003758:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a5c      	ldr	r2, [pc, #368]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800375e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003764:	f7fd fcd0 	bl	8001108 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd fccc 	bl	8001108 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0a4      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378a:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_OscConfig+0x7c8>)
 8003790:	4013      	ands	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800379a:	3a01      	subs	r2, #1
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037a4:	0212      	lsls	r2, r2, #8
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037ac:	0852      	lsrs	r2, r2, #1
 80037ae:	3a01      	subs	r2, #1
 80037b0:	0552      	lsls	r2, r2, #21
 80037b2:	4311      	orrs	r1, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037b8:	0852      	lsrs	r2, r2, #1
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0652      	lsls	r2, r2, #25
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037c4:	0912      	lsrs	r2, r2, #4
 80037c6:	0452      	lsls	r2, r2, #17
 80037c8:	430a      	orrs	r2, r1
 80037ca:	4941      	ldr	r1, [pc, #260]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a3e      	ldr	r2, [pc, #248]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80037d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e8:	f7fd fc8e 	bl	8001108 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fd fc8a 	bl	8001108 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e062      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800380e:	e05a      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e059      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d152      	bne.n	80038c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a27      	ldr	r2, [pc, #156]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003838:	f7fd fc66 	bl	8001108 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003840:	f7fd fc62 	bl	8001108 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e03a      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCC_OscConfig+0x734>
 800385e:	e032      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d02d      	beq.n	80038c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800386c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003870:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d105      	bne.n	800388a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003884:	f023 0303 	bic.w	r3, r3, #3
 8003888:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800388a:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 8003890:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389a:	f7fd fc35 	bl	8001108 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fd fc31 	bl	8001108 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e009      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_RCC_OscConfig+0x7c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f0      	bne.n	80038a2 <HAL_RCC_OscConfig+0x796>
 80038c0:	e001      	b.n	80038c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	f99d808c 	.word	0xf99d808c

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0c8      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b63      	ldr	r3, [pc, #396]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4961      	ldr	r1, [pc, #388]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b0      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d04c      	beq.n	80039c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003930:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d121      	bne.n	8003980 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e09e      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b02      	cmp	r3, #2
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003948:	4b50      	ldr	r3, [pc, #320]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d115      	bne.n	8003980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e092      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003960:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e086      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003970:	4b46      	ldr	r3, [pc, #280]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e07e      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 0203 	bic.w	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	493f      	ldr	r1, [pc, #252]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003992:	f7fd fbb9 	bl	8001108 <HAL_GetTick>
 8003996:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399a:	f7fd fbb5 	bl	8001108 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e066      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 020c 	and.w	r2, r3, #12
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	429a      	cmp	r2, r3
 80039c0:	d1eb      	bne.n	800399a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ce:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	492c      	ldr	r1, [pc, #176]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d210      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b26      	ldr	r3, [pc, #152]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 0207 	bic.w	r2, r3, #7
 80039f6:	4924      	ldr	r1, [pc, #144]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <HAL_RCC_ClockConfig+0x1b0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e036      	b.n	8003a7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4918      	ldr	r1, [pc, #96]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4910      	ldr	r1, [pc, #64]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a4e:	f000 f825 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8003a52:	4601      	mov	r1, r0
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_RCC_ClockConfig+0x1b4>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	5cd3      	ldrb	r3, [r2, r3]
 8003a62:	f003 031f 	and.w	r3, r3, #31
 8003a66:	fa21 f303 	lsr.w	r3, r1, r3
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fafc 	bl	8001070 <HAL_InitTick>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40022000 	.word	0x40022000
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	08009cd0 	.word	0x08009cd0
 8003a94:	20000000 	.word	0x20000000
 8003a98:	20000004 	.word	0x20000004

08003a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d121      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d11e      	bne.n	8003b0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ad0:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e005      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aec:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b0c:	e00a      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d102      	bne.n	8003b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e004      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_GetSysClockFreq+0x110>)
 8003b22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b0c      	cmp	r3, #12
 8003b28:	d133      	bne.n	8003b92 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d002      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0xa4>
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0xaa>
 8003b3e:	e005      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b42:	617b      	str	r3, [r7, #20]
      break;
 8003b44:	e005      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b46:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_GetSysClockFreq+0x110>)
 8003b48:	617b      	str	r3, [r7, #20]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	617b      	str	r3, [r7, #20]
      break;
 8003b50:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	fb02 f203 	mul.w	r2, r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	0e5b      	lsrs	r3, r3, #25
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	3301      	adds	r3, #1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b92:	69bb      	ldr	r3, [r7, #24]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3724      	adds	r7, #36	; 0x24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08009ce8 	.word	0x08009ce8
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	007a1200 	.word	0x007a1200

08003bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb4:	4b03      	ldr	r3, [pc, #12]	; (8003bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000000 	.word	0x20000000

08003bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bcc:	f7ff fff0 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	0a1b      	lsrs	r3, r3, #8
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bde:	5cd3      	ldrb	r3, [r2, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08009ce0 	.word	0x08009ce0

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bf8:	f7ff ffda 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0adb      	lsrs	r3, r3, #11
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4a04      	ldr	r2, [pc, #16]	; (8003c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c0a:	5cd3      	ldrb	r3, [r2, r3]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	08009ce0 	.word	0x08009ce0

08003c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c2c:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c38:	f7ff f9f4 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c3c:	6178      	str	r0, [r7, #20]
 8003c3e:	e014      	b.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b25      	ldr	r3, [pc, #148]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c44:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c58:	f7ff f9e4 	bl	8003024 <HAL_PWREx_GetVoltageRange>
 8003c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d10b      	bne.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d919      	bls.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c7c:	d902      	bls.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c7e:	2302      	movs	r3, #2
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	e013      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c84:	2301      	movs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e010      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d902      	bls.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c90:	2303      	movs	r3, #3
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e00a      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d102      	bne.n	8003ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e004      	b.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d101      	bne.n	8003cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 0207 	bic.w	r2, r3, #7
 8003cb4:	4909      	ldr	r1, [pc, #36]	; (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d001      	beq.n	8003cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40022000 	.word	0x40022000

08003ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ce8:	2300      	movs	r3, #0
 8003cea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cec:	2300      	movs	r3, #0
 8003cee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d03f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d04:	d01c      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0a:	d802      	bhi.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d10:	e01f      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d16:	d003      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d1e:	e018      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d20:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a84      	ldr	r2, [pc, #528]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d2c:	e015      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2100      	movs	r1, #0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fab9 	bl	80042ac <RCCEx_PLLSAI1_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d3e:	e00c      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3320      	adds	r3, #32
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fba0 	bl	800448c <RCCEx_PLLSAI2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	74fb      	strb	r3, [r7, #19]
      break;
 8003d56:	e000      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5a:	7cfb      	ldrb	r3, [r7, #19]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d60:	4b75      	ldr	r3, [pc, #468]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d6e:	4972      	ldr	r1, [pc, #456]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d76:	e001      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d03f      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d90:	d01c      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d96:	d802      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d9c:	e01f      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003da2:	d003      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003da4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003da8:	d01c      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003daa:	e018      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dac:	4b62      	ldr	r3, [pc, #392]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a61      	ldr	r2, [pc, #388]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003db8:	e015      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f000 fa73 	bl	80042ac <RCCEx_PLLSAI1_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dca:	e00c      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3320      	adds	r3, #32
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb5a 	bl	800448c <RCCEx_PLLSAI2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	74fb      	strb	r3, [r7, #19]
      break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de6:	7cfb      	ldrb	r3, [r7, #19]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dec:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfa:	494f      	ldr	r1, [pc, #316]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a0 	beq.w	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	4a40      	ldr	r2, [pc, #256]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e58:	f7fd f956 	bl	8001108 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e5e:	e009      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd f952 	bl	8001108 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d902      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	74fb      	strb	r3, [r7, #19]
        break;
 8003e72:	e005      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ef      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d15c      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e86:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01f      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d019      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ea4:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ed0:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fd f911 	bl	8001108 <HAL_GetTick>
 8003ee6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee8:	e00b      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd f90d 	bl	8001108 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d902      	bls.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	74fb      	strb	r3, [r7, #19]
            break;
 8003f00:	e006      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ec      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f26:	4904      	ldr	r1, [pc, #16]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f2e:	e009      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
 8003f34:	e006      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f44:	7c7b      	ldrb	r3, [r7, #17]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4a:	4b9e      	ldr	r3, [pc, #632]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	4a9d      	ldr	r2, [pc, #628]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f62:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 0203 	bic.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	4994      	ldr	r1, [pc, #592]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f84:	4b8f      	ldr	r3, [pc, #572]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 020c 	bic.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	498c      	ldr	r1, [pc, #560]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fa6:	4b87      	ldr	r3, [pc, #540]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4983      	ldr	r1, [pc, #524]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fc8:	4b7e      	ldr	r3, [pc, #504]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	497b      	ldr	r1, [pc, #492]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	4972      	ldr	r1, [pc, #456]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	496a      	ldr	r1, [pc, #424]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402e:	4b65      	ldr	r3, [pc, #404]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	4961      	ldr	r1, [pc, #388]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004050:	4b5c      	ldr	r3, [pc, #368]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405e:	4959      	ldr	r1, [pc, #356]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004072:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004080:	4950      	ldr	r1, [pc, #320]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004094:	4b4b      	ldr	r3, [pc, #300]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	4948      	ldr	r1, [pc, #288]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b6:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	493f      	ldr	r1, [pc, #252]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d028      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040d8:	4b3a      	ldr	r3, [pc, #232]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	4937      	ldr	r1, [pc, #220]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d106      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b32      	ldr	r3, [pc, #200]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a31      	ldr	r2, [pc, #196]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	e011      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800410e:	d10c      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f8c8 	bl	80042ac <RCCEx_PLLSAI1_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d028      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004136:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004144:	491f      	ldr	r1, [pc, #124]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004154:	d106      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004160:	60d3      	str	r3, [r2, #12]
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800416c:	d10c      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3304      	adds	r3, #4
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f899 	bl	80042ac <RCCEx_PLLSAI1_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800417e:	7cfb      	ldrb	r3, [r7, #19]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004184:	7cfb      	ldrb	r3, [r7, #19]
 8004186:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02b      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004194:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	4908      	ldr	r1, [pc, #32]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b2:	d109      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a02      	ldr	r2, [pc, #8]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80041ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041be:	60d3      	str	r3, [r2, #12]
 80041c0:	e014      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d0:	d10c      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2101      	movs	r1, #1
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 f867 	bl	80042ac <RCCEx_PLLSAI1_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02f      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041f8:	4b2b      	ldr	r3, [pc, #172]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004206:	4928      	ldr	r1, [pc, #160]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004212:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004216:	d10d      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f844 	bl	80042ac <RCCEx_PLLSAI1_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d014      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	74bb      	strb	r3, [r7, #18]
 8004232:	e011      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423c:	d10c      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3320      	adds	r3, #32
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f921 	bl	800448c <RCCEx_PLLSAI2_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004272:	490d      	ldr	r1, [pc, #52]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004296:	4904      	ldr	r1, [pc, #16]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800429e:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000

080042ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ba:	4b73      	ldr	r3, [pc, #460]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042c6:	4b70      	ldr	r3, [pc, #448]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0203 	and.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d10d      	bne.n	80042f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
       ||
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
       ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d044      	beq.n	800437c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	73fb      	strb	r3, [r7, #15]
 80042f6:	e041      	b.n	800437c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d00c      	beq.n	800431a <RCCEx_PLLSAI1_Config+0x6e>
 8004300:	2b03      	cmp	r3, #3
 8004302:	d013      	beq.n	800432c <RCCEx_PLLSAI1_Config+0x80>
 8004304:	2b01      	cmp	r3, #1
 8004306:	d120      	bne.n	800434a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004308:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11d      	bne.n	8004350 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004318:	e01a      	b.n	8004350 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800431a:	4b5b      	ldr	r3, [pc, #364]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800432a:	e013      	b.n	8004354 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800432c:	4b56      	ldr	r3, [pc, #344]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10f      	bne.n	8004358 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004348:	e006      	b.n	8004358 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	73fb      	strb	r3, [r7, #15]
      break;
 800434e:	e004      	b.n	800435a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004358:	bf00      	nop
    }

    if(status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004360:	4b49      	ldr	r3, [pc, #292]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	3b01      	subs	r3, #1
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	430b      	orrs	r3, r1
 8004376:	4944      	ldr	r1, [pc, #272]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d17d      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004382:	4b41      	ldr	r3, [pc, #260]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a40      	ldr	r2, [pc, #256]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800438c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438e:	f7fc febb 	bl	8001108 <HAL_GetTick>
 8004392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004394:	e009      	b.n	80043aa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004396:	f7fc feb7 	bl	8001108 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d902      	bls.n	80043aa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	73fb      	strb	r3, [r7, #15]
        break;
 80043a8:	e005      	b.n	80043b6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ef      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d160      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d111      	bne.n	80043e6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6892      	ldr	r2, [r2, #8]
 80043d2:	0211      	lsls	r1, r2, #8
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68d2      	ldr	r2, [r2, #12]
 80043d8:	0912      	lsrs	r2, r2, #4
 80043da:	0452      	lsls	r2, r2, #17
 80043dc:	430a      	orrs	r2, r1
 80043de:	492a      	ldr	r1, [pc, #168]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	610b      	str	r3, [r1, #16]
 80043e4:	e027      	b.n	8004436 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d112      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ec:	4b26      	ldr	r3, [pc, #152]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6892      	ldr	r2, [r2, #8]
 80043fc:	0211      	lsls	r1, r2, #8
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6912      	ldr	r2, [r2, #16]
 8004402:	0852      	lsrs	r2, r2, #1
 8004404:	3a01      	subs	r2, #1
 8004406:	0552      	lsls	r2, r2, #21
 8004408:	430a      	orrs	r2, r1
 800440a:	491f      	ldr	r1, [pc, #124]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800440c:	4313      	orrs	r3, r2
 800440e:	610b      	str	r3, [r1, #16]
 8004410:	e011      	b.n	8004436 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800441a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6892      	ldr	r2, [r2, #8]
 8004422:	0211      	lsls	r1, r2, #8
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6952      	ldr	r2, [r2, #20]
 8004428:	0852      	lsrs	r2, r2, #1
 800442a:	3a01      	subs	r2, #1
 800442c:	0652      	lsls	r2, r2, #25
 800442e:	430a      	orrs	r2, r1
 8004430:	4915      	ldr	r1, [pc, #84]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a13      	ldr	r2, [pc, #76]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800443c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004440:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fc fe61 	bl	8001108 <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004448:	e009      	b.n	800445e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800444a:	f7fc fe5d 	bl	8001108 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d902      	bls.n	800445e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	73fb      	strb	r3, [r7, #15]
          break;
 800445c:	e005      	b.n	800446a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0ef      	beq.n	800444a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <RCCEx_PLLSAI1_Config+0x1dc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40021000 	.word	0x40021000

0800448c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449a:	4b68      	ldr	r3, [pc, #416]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d10d      	bne.n	80044d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
       ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044be:	4b5f      	ldr	r3, [pc, #380]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
       ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d044      	beq.n	800455c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73fb      	strb	r3, [r7, #15]
 80044d6:	e041      	b.n	800455c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d00c      	beq.n	80044fa <RCCEx_PLLSAI2_Config+0x6e>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d013      	beq.n	800450c <RCCEx_PLLSAI2_Config+0x80>
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d120      	bne.n	800452a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e8:	4b54      	ldr	r3, [pc, #336]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e01a      	b.n	8004530 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044fa:	4b50      	ldr	r3, [pc, #320]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800450a:	e013      	b.n	8004534 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004518:	4b48      	ldr	r3, [pc, #288]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004528:	e006      	b.n	8004538 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
      break;
 800452e:	e004      	b.n	800453a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004538:	bf00      	nop
    }

    if(status == HAL_OK)
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004540:	4b3e      	ldr	r3, [pc, #248]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	3b01      	subs	r3, #1
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	430b      	orrs	r3, r1
 8004556:	4939      	ldr	r1, [pc, #228]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d167      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004562:	4b36      	ldr	r3, [pc, #216]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a35      	ldr	r2, [pc, #212]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456e:	f7fc fdcb 	bl	8001108 <HAL_GetTick>
 8004572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004574:	e009      	b.n	800458a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004576:	f7fc fdc7 	bl	8001108 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d902      	bls.n	800458a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	73fb      	strb	r3, [r7, #15]
        break;
 8004588:	e005      	b.n	8004596 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ef      	bne.n	8004576 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d14a      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d111      	bne.n	80045c6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045a2:	4b26      	ldr	r3, [pc, #152]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6892      	ldr	r2, [r2, #8]
 80045b2:	0211      	lsls	r1, r2, #8
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68d2      	ldr	r2, [r2, #12]
 80045b8:	0912      	lsrs	r2, r2, #4
 80045ba:	0452      	lsls	r2, r2, #17
 80045bc:	430a      	orrs	r2, r1
 80045be:	491f      	ldr	r1, [pc, #124]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	614b      	str	r3, [r1, #20]
 80045c4:	e011      	b.n	80045ea <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c6:	4b1d      	ldr	r3, [pc, #116]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	0211      	lsls	r1, r2, #8
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6912      	ldr	r2, [r2, #16]
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	3a01      	subs	r2, #1
 80045e0:	0652      	lsls	r2, r2, #25
 80045e2:	430a      	orrs	r2, r1
 80045e4:	4915      	ldr	r1, [pc, #84]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045ea:	4b14      	ldr	r3, [pc, #80]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fc fd87 	bl	8001108 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045fc:	e009      	b.n	8004612 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045fe:	f7fc fd83 	bl	8001108 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d902      	bls.n	8004612 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	73fb      	strb	r3, [r7, #15]
          break;
 8004610:	e005      	b.n	800461e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0ef      	beq.n	80045fe <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <RCCEx_PLLSAI2_Config+0x1b0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000

08004640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e01d      	b.n	800468e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f815 	bl	8004696 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f000 f986 	bl	8004990 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_TIM_Base_Start_IT+0x50>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d00b      	beq.n	80046ee <HAL_TIM_Base_Start_IT+0x42>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046dc:	d007      	beq.n	80046ee <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	00010007 	.word	0x00010007

08004700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d122      	bne.n	800475c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b02      	cmp	r3, #2
 8004722:	d11b      	bne.n	800475c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0202 	mvn.w	r2, #2
 800472c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f905 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8f7 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f908 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d122      	bne.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d11b      	bne.n	80047b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0204 	mvn.w	r2, #4
 8004780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8db 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 800479c:	e005      	b.n	80047aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8cd 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f8de 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d122      	bne.n	8004804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d11b      	bne.n	8004804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0208 	mvn.w	r2, #8
 80047d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2204      	movs	r2, #4
 80047da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f8b1 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8a3 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f8b4 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b10      	cmp	r3, #16
 8004810:	d122      	bne.n	8004858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b10      	cmp	r3, #16
 800481e:	d11b      	bne.n	8004858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0210 	mvn.w	r2, #16
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2208      	movs	r2, #8
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f887 	bl	8004952 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f879 	bl	800493e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f88a 	bl	8004966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10e      	bne.n	8004884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0201 	mvn.w	r2, #1
 800487c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f004 fa7a 	bl	8008d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b80      	cmp	r3, #128	; 0x80
 8004890:	d10e      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d107      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f914 	bl	8004ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048be:	d10e      	bne.n	80048de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ca:	2b80      	cmp	r3, #128	; 0x80
 80048cc:	d107      	bne.n	80048de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f907 	bl	8004aec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f838 	bl	800497a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d10e      	bne.n	8004936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b20      	cmp	r3, #32
 8004924:	d107      	bne.n	8004936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0220 	mvn.w	r2, #32
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8c7 	bl	8004ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a40      	ldr	r2, [pc, #256]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ae:	d00f      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3d      	ldr	r2, [pc, #244]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_Base_SetConfig+0x40>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d108      	bne.n	80049e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2f      	ldr	r2, [pc, #188]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01f      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d01b      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <TIM_Base_SetConfig+0x118>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d017      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <TIM_Base_SetConfig+0x11c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <TIM_Base_SetConfig+0x120>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <TIM_Base_SetConfig+0x128>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x9a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <TIM_Base_SetConfig+0x130>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <TIM_Base_SetConfig+0x114>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <TIM_Base_SetConfig+0x128>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <TIM_Base_SetConfig+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_Base_SetConfig+0xf8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <TIM_Base_SetConfig+0x130>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	40000c00 	.word	0x40000c00
 8004ab4:	40013400 	.word	0x40013400
 8004ab8:	40014000 	.word	0x40014000
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800

08004ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e040      	b.n	8004b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fb fe36 	bl	8000794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb62 	bl	8005208 <UART_SetConfig>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d101      	bne.n	8004b4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e022      	b.n	8004b94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fec8 	bl	80058ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 ff4f 	bl	8005a30 <UART_CheckIdleState>
 8004b92:	4603      	mov	r3, r0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e027      	b.n	8004bfe <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2224      	movs	r2, #36	; 0x24
 8004bb2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fb fe9b 	bl	8000918 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b08a      	sub	sp, #40	; 0x28
 8004c0a:	af02      	add	r7, sp, #8
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	603b      	str	r3, [r7, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	f040 8081 	bne.w	8004d22 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Transmit+0x26>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e079      	b.n	8004d24 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_UART_Transmit+0x38>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e072      	b.n	8004d24 <HAL_UART_Transmit+0x11e>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2221      	movs	r2, #33	; 0x21
 8004c50:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c52:	f7fc fa59 	bl	8001108 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	88fa      	ldrh	r2, [r7, #6]
 8004c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c70:	d108      	bne.n	8004c84 <HAL_UART_Transmit+0x7e>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	e003      	b.n	8004c8c <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004c94:	e02d      	b.n	8004cf2 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	; 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 ff0a 	bl	8005aba <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e039      	b.n	8004d24 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	881a      	ldrh	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc2:	b292      	uxth	r2, r2
 8004cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	e008      	b.n	8004ce0 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b292      	uxth	r2, r2
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1cb      	bne.n	8004c96 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2200      	movs	r2, #0
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fed6 	bl	8005aba <UART_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e005      	b.n	8004d24 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	f040 808a 	bne.w	8004e58 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_UART_Receive_IT+0x24>
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e082      	b.n	8004e5a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Receive_IT+0x36>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e07b      	b.n	8004e5a <HAL_UART_Receive_IT+0x12e>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d8e:	d10e      	bne.n	8004dae <HAL_UART_Receive_IT+0x82>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_UART_Receive_IT+0x78>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004da2:	e02d      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dac:	e028      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_UART_Receive_IT+0xa6>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <HAL_UART_Receive_IT+0x9c>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dc6:	e01b      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	227f      	movs	r2, #127	; 0x7f
 8004dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dd0:	e016      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dda:	d10d      	bne.n	8004df8 <HAL_UART_Receive_IT+0xcc>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d104      	bne.n	8004dee <HAL_UART_Receive_IT+0xc2>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	227f      	movs	r2, #127	; 0x7f
 8004de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dec:	e008      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	223f      	movs	r2, #63	; 0x3f
 8004df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004df6:	e003      	b.n	8004e00 <HAL_UART_Receive_IT+0xd4>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2222      	movs	r2, #34	; 0x22
 8004e0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d107      	bne.n	8004e36 <HAL_UART_Receive_IT+0x10a>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_UART_Receive_IT+0x13c>)
 8004e32:	661a      	str	r2, [r3, #96]	; 0x60
 8004e34:	e002      	b.n	8004e3c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a0c      	ldr	r2, [pc, #48]	; (8004e6c <HAL_UART_Receive_IT+0x140>)
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004e52:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	e000      	b.n	8004e5a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004e58:	2302      	movs	r3, #2
  }
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	08005e0b 	.word	0x08005e0b
 8004e6c:	08005d61 	.word	0x08005d61

08004e70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d164      	bne.n	8004f50 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_UART_Transmit_DMA+0x22>
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e05d      	b.n	8004f52 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Transmit_DMA+0x34>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e056      	b.n	8004f52 <HAL_UART_Transmit_DMA+0xe2>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	88fa      	ldrh	r2, [r7, #6]
 8004ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2221      	movs	r2, #33	; 0x21
 8004ecc:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02a      	beq.n	8004f2c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eda:	4a20      	ldr	r2, [pc, #128]	; (8004f5c <HAL_UART_Transmit_DMA+0xec>)
 8004edc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee2:	4a1f      	ldr	r2, [pc, #124]	; (8004f60 <HAL_UART_Transmit_DMA+0xf0>)
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_UART_Transmit_DMA+0xf4>)
 8004eec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	4619      	mov	r1, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3328      	adds	r3, #40	; 0x28
 8004f06:	461a      	mov	r2, r3
 8004f08:	88fb      	ldrh	r3, [r7, #6]
 8004f0a:	f7fc fbb7 	bl	800167c <HAL_DMA_Start_IT>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2210      	movs	r2, #16
 8004f18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e012      	b.n	8004f52 <HAL_UART_Transmit_DMA+0xe2>
      }

    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2240      	movs	r2, #64	; 0x40
 8004f32:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f4a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e000      	b.n	8004f52 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
  }
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08005c1b 	.word	0x08005c1b
 8004f60:	08005c6f 	.word	0x08005c6f
 8004f64:	08005c8b 	.word	0x08005c8b

08004f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d113      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 8114 	beq.w	80051de <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
      }
      return;
 8004fbe:	e10e      	b.n	80051de <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80d6 	beq.w	8005174 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d105      	bne.n	8004fde <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80cb 	beq.w	8005174 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <HAL_UART_IRQHandler+0x9e>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <HAL_UART_IRQHandler+0xc6>
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2202      	movs	r2, #2
 8005020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005026:	f043 0204 	orr.w	r2, r3, #4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <HAL_UART_IRQHandler+0xee>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	f043 0202 	orr.w	r2, r3, #2
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d013      	beq.n	8005088 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2208      	movs	r2, #8
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	f043 0208 	orr.w	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00f      	beq.n	80050b2 <HAL_UART_IRQHandler+0x14a>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8093 	beq.w	80051e2 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00c      	beq.n	80050e0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d004      	beq.n	80050fe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d031      	beq.n	8005162 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fd6b 	bl	8005bda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d123      	bne.n	800515a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005120:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005126:	2b00      	cmp	r3, #0
 8005128:	d013      	beq.n	8005152 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512e:	4a30      	ldr	r2, [pc, #192]	; (80051f0 <HAL_UART_IRQHandler+0x288>)
 8005130:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc fb00 	bl	800173c <HAL_DMA_Abort_IT>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005150:	e00e      	b.n	8005170 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f003 ff44 	bl	8008fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	e00a      	b.n	8005170 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f003 ff40 	bl	8008fe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e006      	b.n	8005170 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f003 ff3c 	bl	8008fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800516e:	e038      	b.n	80051e2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	bf00      	nop
    return;
 8005172:	e036      	b.n	80051e2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00d      	beq.n	800519a <HAL_UART_IRQHandler+0x232>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fe8e 	bl	8005eb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005198:	e026      	b.n	80051e8 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00d      	beq.n	80051c0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d017      	beq.n	80051e6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4798      	blx	r3
    }
    return;
 80051be:	e012      	b.n	80051e6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00e      	beq.n	80051e8 <HAL_UART_IRQHandler+0x280>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fdaa 	bl	8005d2e <UART_EndTransmit_IT>
    return;
 80051da:	bf00      	nop
 80051dc:	e004      	b.n	80051e8 <HAL_UART_IRQHandler+0x280>
      return;
 80051de:	bf00      	nop
 80051e0:	e002      	b.n	80051e8 <HAL_UART_IRQHandler+0x280>
    return;
 80051e2:	bf00      	nop
 80051e4:	e000      	b.n	80051e8 <HAL_UART_IRQHandler+0x280>
    return;
 80051e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	08005d03 	.word	0x08005d03

080051f4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005208:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800520c:	b08a      	sub	sp, #40	; 0x28
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	431a      	orrs	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4bb8      	ldr	r3, [pc, #736]	; (8005520 <UART_SetConfig+0x318>)
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005246:	430b      	orrs	r3, r1
 8005248:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4aae      	ldr	r2, [pc, #696]	; (8005524 <UART_SetConfig+0x31c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005276:	4313      	orrs	r3, r2
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528a:	430a      	orrs	r2, r1
 800528c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4aa5      	ldr	r2, [pc, #660]	; (8005528 <UART_SetConfig+0x320>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d126      	bne.n	80052e6 <UART_SetConfig+0xde>
 8005298:	4ba4      	ldr	r3, [pc, #656]	; (800552c <UART_SetConfig+0x324>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d81a      	bhi.n	80052dc <UART_SetConfig+0xd4>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0xa4>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052cd 	.word	0x080052cd
 80052b4:	080052c5 	.word	0x080052c5
 80052b8:	080052d5 	.word	0x080052d5
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e105      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80052c4:	2302      	movs	r3, #2
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e101      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80052cc:	2304      	movs	r3, #4
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e0fd      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80052d4:	2308      	movs	r3, #8
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e0f9      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80052dc:	2310      	movs	r3, #16
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e2:	bf00      	nop
 80052e4:	e0f4      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a91      	ldr	r2, [pc, #580]	; (8005530 <UART_SetConfig+0x328>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d138      	bne.n	8005362 <UART_SetConfig+0x15a>
 80052f0:	4b8e      	ldr	r3, [pc, #568]	; (800552c <UART_SetConfig+0x324>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d82c      	bhi.n	8005358 <UART_SetConfig+0x150>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0xfc>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005339 	.word	0x08005339
 8005308:	08005359 	.word	0x08005359
 800530c:	08005359 	.word	0x08005359
 8005310:	08005359 	.word	0x08005359
 8005314:	08005349 	.word	0x08005349
 8005318:	08005359 	.word	0x08005359
 800531c:	08005359 	.word	0x08005359
 8005320:	08005359 	.word	0x08005359
 8005324:	08005341 	.word	0x08005341
 8005328:	08005359 	.word	0x08005359
 800532c:	08005359 	.word	0x08005359
 8005330:	08005359 	.word	0x08005359
 8005334:	08005351 	.word	0x08005351
 8005338:	2300      	movs	r3, #0
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e0c7      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005340:	2302      	movs	r3, #2
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e0c3      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e0bf      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e0bb      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535e:	bf00      	nop
 8005360:	e0b6      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a73      	ldr	r2, [pc, #460]	; (8005534 <UART_SetConfig+0x32c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d125      	bne.n	80053b8 <UART_SetConfig+0x1b0>
 800536c:	4b6f      	ldr	r3, [pc, #444]	; (800552c <UART_SetConfig+0x324>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005376:	2b10      	cmp	r3, #16
 8005378:	d011      	beq.n	800539e <UART_SetConfig+0x196>
 800537a:	2b10      	cmp	r3, #16
 800537c:	d802      	bhi.n	8005384 <UART_SetConfig+0x17c>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <UART_SetConfig+0x186>
 8005382:	e014      	b.n	80053ae <UART_SetConfig+0x1a6>
 8005384:	2b20      	cmp	r3, #32
 8005386:	d006      	beq.n	8005396 <UART_SetConfig+0x18e>
 8005388:	2b30      	cmp	r3, #48	; 0x30
 800538a:	d00c      	beq.n	80053a6 <UART_SetConfig+0x19e>
 800538c:	e00f      	b.n	80053ae <UART_SetConfig+0x1a6>
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005394:	e09c      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005396:	2302      	movs	r3, #2
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539c:	e098      	b.n	80054d0 <UART_SetConfig+0x2c8>
 800539e:	2304      	movs	r3, #4
 80053a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a4:	e094      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053a6:	2308      	movs	r3, #8
 80053a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ac:	e090      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053ae:	2310      	movs	r3, #16
 80053b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b4:	bf00      	nop
 80053b6:	e08b      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5e      	ldr	r2, [pc, #376]	; (8005538 <UART_SetConfig+0x330>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d125      	bne.n	800540e <UART_SetConfig+0x206>
 80053c2:	4b5a      	ldr	r3, [pc, #360]	; (800552c <UART_SetConfig+0x324>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d011      	beq.n	80053f4 <UART_SetConfig+0x1ec>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d802      	bhi.n	80053da <UART_SetConfig+0x1d2>
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <UART_SetConfig+0x1dc>
 80053d8:	e014      	b.n	8005404 <UART_SetConfig+0x1fc>
 80053da:	2b80      	cmp	r3, #128	; 0x80
 80053dc:	d006      	beq.n	80053ec <UART_SetConfig+0x1e4>
 80053de:	2bc0      	cmp	r3, #192	; 0xc0
 80053e0:	d00c      	beq.n	80053fc <UART_SetConfig+0x1f4>
 80053e2:	e00f      	b.n	8005404 <UART_SetConfig+0x1fc>
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e071      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e06d      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fa:	e069      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005402:	e065      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540a:	bf00      	nop
 800540c:	e060      	b.n	80054d0 <UART_SetConfig+0x2c8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4a      	ldr	r2, [pc, #296]	; (800553c <UART_SetConfig+0x334>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d129      	bne.n	800546c <UART_SetConfig+0x264>
 8005418:	4b44      	ldr	r3, [pc, #272]	; (800552c <UART_SetConfig+0x324>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d014      	beq.n	8005452 <UART_SetConfig+0x24a>
 8005428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542c:	d802      	bhi.n	8005434 <UART_SetConfig+0x22c>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <UART_SetConfig+0x23a>
 8005432:	e016      	b.n	8005462 <UART_SetConfig+0x25a>
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	d007      	beq.n	800544a <UART_SetConfig+0x242>
 800543a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543e:	d00c      	beq.n	800545a <UART_SetConfig+0x252>
 8005440:	e00f      	b.n	8005462 <UART_SetConfig+0x25a>
 8005442:	2300      	movs	r3, #0
 8005444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005448:	e042      	b.n	80054d0 <UART_SetConfig+0x2c8>
 800544a:	2302      	movs	r3, #2
 800544c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005450:	e03e      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005452:	2304      	movs	r3, #4
 8005454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005458:	e03a      	b.n	80054d0 <UART_SetConfig+0x2c8>
 800545a:	2308      	movs	r3, #8
 800545c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005460:	e036      	b.n	80054d0 <UART_SetConfig+0x2c8>
 8005462:	2310      	movs	r3, #16
 8005464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005468:	bf00      	nop
 800546a:	e031      	b.n	80054d0 <UART_SetConfig+0x2c8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2c      	ldr	r2, [pc, #176]	; (8005524 <UART_SetConfig+0x31c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d129      	bne.n	80054ca <UART_SetConfig+0x2c2>
 8005476:	4b2d      	ldr	r3, [pc, #180]	; (800552c <UART_SetConfig+0x324>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005484:	d014      	beq.n	80054b0 <UART_SetConfig+0x2a8>
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d802      	bhi.n	8005492 <UART_SetConfig+0x28a>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <UART_SetConfig+0x298>
 8005490:	e016      	b.n	80054c0 <UART_SetConfig+0x2b8>
 8005492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005496:	d007      	beq.n	80054a8 <UART_SetConfig+0x2a0>
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549c:	d00c      	beq.n	80054b8 <UART_SetConfig+0x2b0>
 800549e:	e00f      	b.n	80054c0 <UART_SetConfig+0x2b8>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e013      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80054a8:	2302      	movs	r3, #2
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b6:	e00b      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054be:	e007      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054c6:	bf00      	nop
 80054c8:	e002      	b.n	80054d0 <UART_SetConfig+0x2c8>
 80054ca:	2310      	movs	r3, #16
 80054cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <UART_SetConfig+0x31c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	f040 80fe 	bne.w	80056d8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d837      	bhi.n	8005554 <UART_SetConfig+0x34c>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x2e4>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005555 	.word	0x08005555
 80054fc:	08005545 	.word	0x08005545
 8005500:	08005555 	.word	0x08005555
 8005504:	08005555 	.word	0x08005555
 8005508:	08005555 	.word	0x08005555
 800550c:	0800554d 	.word	0x0800554d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fe fb5a 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005514:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005516:	e020      	b.n	800555a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005518:	4b09      	ldr	r3, [pc, #36]	; (8005540 <UART_SetConfig+0x338>)
 800551a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800551c:	e01d      	b.n	800555a <UART_SetConfig+0x352>
 800551e:	bf00      	nop
 8005520:	efff69f3 	.word	0xefff69f3
 8005524:	40008000 	.word	0x40008000
 8005528:	40013800 	.word	0x40013800
 800552c:	40021000 	.word	0x40021000
 8005530:	40004400 	.word	0x40004400
 8005534:	40004800 	.word	0x40004800
 8005538:	40004c00 	.word	0x40004c00
 800553c:	40005000 	.word	0x40005000
 8005540:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005544:	f7fe faaa 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8005548:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800554a:	e006      	b.n	800555a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800554c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005550:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005552:	e002      	b.n	800555a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	76fb      	strb	r3, [r7, #27]
        break;
 8005558:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 81b9 	beq.w	80058d4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	429a      	cmp	r2, r3
 8005570:	d305      	bcc.n	800557e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	429a      	cmp	r2, r3
 800557c:	d902      	bls.n	8005584 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	76fb      	strb	r3, [r7, #27]
 8005582:	e1a7      	b.n	80058d4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 8005584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005588:	2b08      	cmp	r3, #8
 800558a:	f200 8092 	bhi.w	80056b2 <UART_SetConfig+0x4aa>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <UART_SetConfig+0x38c>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080056b3 	.word	0x080056b3
 800559c:	08005607 	.word	0x08005607
 80055a0:	080056b3 	.word	0x080056b3
 80055a4:	0800563b 	.word	0x0800563b
 80055a8:	080056b3 	.word	0x080056b3
 80055ac:	080056b3 	.word	0x080056b3
 80055b0:	080056b3 	.word	0x080056b3
 80055b4:	08005689 	.word	0x08005689
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7fe fb06 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 80055bc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	f04f 0400 	mov.w	r4, #0
 80055ce:	0214      	lsls	r4, r2, #8
 80055d0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80055d4:	020b      	lsls	r3, r1, #8
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	0852      	lsrs	r2, r2, #1
 80055dc:	4611      	mov	r1, r2
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	eb13 0b01 	adds.w	fp, r3, r1
 80055e6:	eb44 0c02 	adc.w	ip, r4, r2
 80055ea:	4658      	mov	r0, fp
 80055ec:	4661      	mov	r1, ip
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	461a      	mov	r2, r3
 80055f8:	4623      	mov	r3, r4
 80055fa:	f7fa fded 	bl	80001d8 <__aeabi_uldivmod>
 80055fe:	4603      	mov	r3, r0
 8005600:	460c      	mov	r4, r1
 8005602:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005604:	e058      	b.n	80056b8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	49ae      	ldr	r1, [pc, #696]	; (80058cc <UART_SetConfig+0x6c4>)
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	eb13 0b01 	adds.w	fp, r3, r1
 800561a:	eb44 0c02 	adc.w	ip, r4, r2
 800561e:	4658      	mov	r0, fp
 8005620:	4661      	mov	r1, ip
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	461a      	mov	r2, r3
 800562c:	4623      	mov	r3, r4
 800562e:	f7fa fdd3 	bl	80001d8 <__aeabi_uldivmod>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005638:	e03e      	b.n	80056b8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800563a:	f7fe fa2f 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 800563e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4619      	mov	r1, r3
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	f04f 0400 	mov.w	r4, #0
 8005650:	0214      	lsls	r4, r2, #8
 8005652:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005656:	020b      	lsls	r3, r1, #8
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6852      	ldr	r2, [r2, #4]
 800565c:	0852      	lsrs	r2, r2, #1
 800565e:	4611      	mov	r1, r2
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	eb13 0b01 	adds.w	fp, r3, r1
 8005668:	eb44 0c02 	adc.w	ip, r4, r2
 800566c:	4658      	mov	r0, fp
 800566e:	4661      	mov	r1, ip
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f04f 0400 	mov.w	r4, #0
 8005678:	461a      	mov	r2, r3
 800567a:	4623      	mov	r3, r4
 800567c:	f7fa fdac 	bl	80001d8 <__aeabi_uldivmod>
 8005680:	4603      	mov	r3, r0
 8005682:	460c      	mov	r4, r1
 8005684:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8005686:	e017      	b.n	80056b8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	085b      	lsrs	r3, r3, #1
 800568e:	f04f 0400 	mov.w	r4, #0
 8005692:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8005696:	f144 0100 	adc.w	r1, r4, #0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f04f 0400 	mov.w	r4, #0
 80056a2:	461a      	mov	r2, r3
 80056a4:	4623      	mov	r3, r4
 80056a6:	f7fa fd97 	bl	80001d8 <__aeabi_uldivmod>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80056b0:	e002      	b.n	80056b8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	76fb      	strb	r3, [r7, #27]
            break;
 80056b6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056be:	d308      	bcc.n	80056d2 <UART_SetConfig+0x4ca>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c6:	d204      	bcs.n	80056d2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e100      	b.n	80058d4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	76fb      	strb	r3, [r7, #27]
 80056d6:	e0fd      	b.n	80058d4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	f040 8084 	bne.w	80057ec <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 80056e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d85f      	bhi.n	80057ac <UART_SetConfig+0x5a4>
 80056ec:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <UART_SetConfig+0x4ec>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005719 	.word	0x08005719
 80056f8:	08005739 	.word	0x08005739
 80056fc:	08005759 	.word	0x08005759
 8005700:	080057ad 	.word	0x080057ad
 8005704:	08005775 	.word	0x08005775
 8005708:	080057ad 	.word	0x080057ad
 800570c:	080057ad 	.word	0x080057ad
 8005710:	080057ad 	.word	0x080057ad
 8005714:	08005795 	.word	0x08005795
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005718:	f7fe fa56 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 800571c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	005a      	lsls	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	441a      	add	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005732:	b29b      	uxth	r3, r3
 8005734:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005736:	e03c      	b.n	80057b2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe fa5c 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 800573c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	005a      	lsls	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005756:	e02c      	b.n	80057b2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005762:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6852      	ldr	r2, [r2, #4]
 800576a:	fbb3 f3f2 	udiv	r3, r3, r2
 800576e:	b29b      	uxth	r3, r3
 8005770:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005772:	e01e      	b.n	80057b2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005774:	f7fe f992 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 8005778:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	005a      	lsls	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	fbb2 f3f3 	udiv	r3, r2, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005792:	e00e      	b.n	80057b2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80057aa:	e002      	b.n	80057b2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	76fb      	strb	r3, [r7, #27]
        break;
 80057b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b0f      	cmp	r3, #15
 80057b6:	d916      	bls.n	80057e6 <UART_SetConfig+0x5de>
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057be:	d212      	bcs.n	80057e6 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f023 030f 	bic.w	r3, r3, #15
 80057c8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	89fb      	ldrh	r3, [r7, #14]
 80057d8:	4313      	orrs	r3, r2
 80057da:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	89fa      	ldrh	r2, [r7, #14]
 80057e2:	60da      	str	r2, [r3, #12]
 80057e4:	e076      	b.n	80058d4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	76fb      	strb	r3, [r7, #27]
 80057ea:	e073      	b.n	80058d4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 80057ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d85c      	bhi.n	80058ae <UART_SetConfig+0x6a6>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <UART_SetConfig+0x5f4>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005821 	.word	0x08005821
 8005800:	0800583f 	.word	0x0800583f
 8005804:	0800585d 	.word	0x0800585d
 8005808:	080058af 	.word	0x080058af
 800580c:	08005879 	.word	0x08005879
 8005810:	080058af 	.word	0x080058af
 8005814:	080058af 	.word	0x080058af
 8005818:	080058af 	.word	0x080058af
 800581c:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005820:	f7fe f9d2 	bl	8003bc8 <HAL_RCC_GetPCLK1Freq>
 8005824:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085a      	lsrs	r2, r3, #1
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	b29b      	uxth	r3, r3
 800583a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800583c:	e03a      	b.n	80058b4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800583e:	f7fe f9d9 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8005842:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	085a      	lsrs	r2, r3, #1
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	441a      	add	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	b29b      	uxth	r3, r3
 8005858:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800585a:	e02b      	b.n	80058b4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005866:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6852      	ldr	r2, [r2, #4]
 800586e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005876:	e01d      	b.n	80058b4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005878:	f7fe f910 	bl	8003a9c <HAL_RCC_GetSysClockFreq>
 800587c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	085a      	lsrs	r2, r3, #1
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	b29b      	uxth	r3, r3
 8005892:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8005894:	e00e      	b.n	80058b4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	085b      	lsrs	r3, r3, #1
 800589c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80058ac:	e002      	b.n	80058b4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	76fb      	strb	r3, [r7, #27]
        break;
 80058b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b0f      	cmp	r3, #15
 80058b8:	d90a      	bls.n	80058d0 <UART_SetConfig+0x6c8>
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d206      	bcs.n	80058d0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e003      	b.n	80058d4 <UART_SetConfig+0x6cc>
 80058cc:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80058e0:	7efb      	ldrb	r3, [r7, #27]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080058ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ea:	d10a      	bne.n	8005a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a3e:	f7fb fb63 	bl	8001108 <HAL_GetTick>
 8005a42:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d10e      	bne.n	8005a70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f82a 	bl	8005aba <UART_WaitOnFlagUntilTimeout>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e020      	b.n	8005ab2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d10e      	bne.n	8005a9c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f814 	bl	8005aba <UART_WaitOnFlagUntilTimeout>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e00a      	b.n	8005ab2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aca:	e05d      	b.n	8005b88 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad2:	d059      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad4:	f7fb fb18 	bl	8001108 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d302      	bcc.n	8005aea <UART_WaitOnFlagUntilTimeout+0x30>
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d11b      	bne.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005af8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e042      	b.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02b      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3e:	d123      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b48:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b58:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e00f      	b.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d092      	beq.n	8005acc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005bc6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bf0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0201 	bic.w	r2, r2, #1
 8005c00:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d114      	bne.n	8005c60 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c5e:	e002      	b.n	8005c66 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f003 f90b 	bl	8008e7c <HAL_UART_TxCpltCallback>
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fab9 	bl	80051f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c82:	bf00      	nop
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b086      	sub	sp, #24
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d109      	bne.n	8005cc6 <UART_DMAError+0x3c>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b21      	cmp	r3, #33	; 0x21
 8005cb6:	d106      	bne.n	8005cc6 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005cc0:	6978      	ldr	r0, [r7, #20]
 8005cc2:	f7ff ff75 	bl	8005bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d109      	bne.n	8005ce8 <UART_DMAError+0x5e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b22      	cmp	r3, #34	; 0x22
 8005cd8:	d106      	bne.n	8005ce8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f7ff ff79 	bl	8005bda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cec:	f043 0210 	orr.w	r2, r3, #16
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cf4:	6978      	ldr	r0, [r7, #20]
 8005cf6:	f003 f973 	bl	8008fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cfa:	bf00      	nop
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f003 f95d 	bl	8008fe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d44:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f003 f892 	bl	8008e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d58:	bf00      	nop
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d6e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d74:	2b22      	cmp	r3, #34	; 0x22
 8005d76:	d13a      	bne.n	8005dee <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d7e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d80:	89bb      	ldrh	r3, [r7, #12]
 8005d82:	b2d9      	uxtb	r1, r3
 8005d84:	89fb      	ldrh	r3, [r7, #14]
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d123      	bne.n	8005e02 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dc8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f003 f80e 	bl	8008e08 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dec:	e009      	b.n	8005e02 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	8b1b      	ldrh	r3, [r3, #24]
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0208 	orr.w	r2, r2, #8
 8005dfe:	b292      	uxth	r2, r2
 8005e00:	831a      	strh	r2, [r3, #24]
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e18:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e1e:	2b22      	cmp	r3, #34	; 0x22
 8005e20:	d13a      	bne.n	8005e98 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e28:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e30:	89ba      	ldrh	r2, [r7, #12]
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	4013      	ands	r3, r2
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e40:	1c9a      	adds	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d123      	bne.n	8005eac <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e72:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2220      	movs	r2, #32
 8005e88:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f002 ffb9 	bl	8008e08 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e96:	e009      	b.n	8005eac <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	8b1b      	ldrh	r3, [r3, #24]
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0208 	orr.w	r2, r2, #8
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	831a      	strh	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ec8:	b084      	sub	sp, #16
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	f107 001c 	add.w	r0, r7, #28
 8005ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d122      	bne.n	8005f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f9c8 	bl	80072b0 <USB_CoreReset>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
 8005f24:	e01a      	b.n	8005f5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 f9bc 	bl	80072b0 <USB_CoreReset>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005f4e:	e005      	b.n	8005f5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f68:	b004      	add	sp, #16
 8005f6a:	4770      	bx	lr

08005f6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d165      	bne.n	800604c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4a3e      	ldr	r2, [pc, #248]	; (800607c <USB_SetTurnaroundTime+0x110>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d906      	bls.n	8005f96 <USB_SetTurnaroundTime+0x2a>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a3d      	ldr	r2, [pc, #244]	; (8006080 <USB_SetTurnaroundTime+0x114>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d802      	bhi.n	8005f96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f90:	230f      	movs	r3, #15
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e05c      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a39      	ldr	r2, [pc, #228]	; (8006080 <USB_SetTurnaroundTime+0x114>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d906      	bls.n	8005fac <USB_SetTurnaroundTime+0x40>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4a38      	ldr	r2, [pc, #224]	; (8006084 <USB_SetTurnaroundTime+0x118>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d802      	bhi.n	8005fac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fa6:	230e      	movs	r3, #14
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	e051      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4a35      	ldr	r2, [pc, #212]	; (8006084 <USB_SetTurnaroundTime+0x118>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d906      	bls.n	8005fc2 <USB_SetTurnaroundTime+0x56>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4a34      	ldr	r2, [pc, #208]	; (8006088 <USB_SetTurnaroundTime+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d802      	bhi.n	8005fc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fbc:	230d      	movs	r3, #13
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e046      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a30      	ldr	r2, [pc, #192]	; (8006088 <USB_SetTurnaroundTime+0x11c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d906      	bls.n	8005fd8 <USB_SetTurnaroundTime+0x6c>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4a2f      	ldr	r2, [pc, #188]	; (800608c <USB_SetTurnaroundTime+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d802      	bhi.n	8005fd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e03b      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a2c      	ldr	r2, [pc, #176]	; (800608c <USB_SetTurnaroundTime+0x120>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d906      	bls.n	8005fee <USB_SetTurnaroundTime+0x82>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	4a2b      	ldr	r2, [pc, #172]	; (8006090 <USB_SetTurnaroundTime+0x124>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d802      	bhi.n	8005fee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fe8:	230b      	movs	r3, #11
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e030      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <USB_SetTurnaroundTime+0x124>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d906      	bls.n	8006004 <USB_SetTurnaroundTime+0x98>
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	4a26      	ldr	r2, [pc, #152]	; (8006094 <USB_SetTurnaroundTime+0x128>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d802      	bhi.n	8006004 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ffe:	230a      	movs	r3, #10
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	e025      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4a23      	ldr	r2, [pc, #140]	; (8006094 <USB_SetTurnaroundTime+0x128>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d906      	bls.n	800601a <USB_SetTurnaroundTime+0xae>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a22      	ldr	r2, [pc, #136]	; (8006098 <USB_SetTurnaroundTime+0x12c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d802      	bhi.n	800601a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006014:	2309      	movs	r3, #9
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e01a      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4a1e      	ldr	r2, [pc, #120]	; (8006098 <USB_SetTurnaroundTime+0x12c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d906      	bls.n	8006030 <USB_SetTurnaroundTime+0xc4>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a1d      	ldr	r2, [pc, #116]	; (800609c <USB_SetTurnaroundTime+0x130>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d802      	bhi.n	8006030 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800602a:	2308      	movs	r3, #8
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e00f      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4a1a      	ldr	r2, [pc, #104]	; (800609c <USB_SetTurnaroundTime+0x130>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d906      	bls.n	8006046 <USB_SetTurnaroundTime+0xda>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <USB_SetTurnaroundTime+0x134>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d802      	bhi.n	8006046 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006040:	2307      	movs	r3, #7
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	e004      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006046:	2306      	movs	r3, #6
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e001      	b.n	8006050 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800604c:	2309      	movs	r3, #9
 800604e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	029b      	lsls	r3, r3, #10
 8006064:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	00d8acbf 	.word	0x00d8acbf
 8006080:	00e4e1bf 	.word	0x00e4e1bf
 8006084:	00f423ff 	.word	0x00f423ff
 8006088:	0106737f 	.word	0x0106737f
 800608c:	011a499f 	.word	0x011a499f
 8006090:	01312cff 	.word	0x01312cff
 8006094:	014ca43f 	.word	0x014ca43f
 8006098:	016e35ff 	.word	0x016e35ff
 800609c:	01a6ab1f 	.word	0x01a6ab1f
 80060a0:	01e847ff 	.word	0x01e847ff

080060a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f043 0201 	orr.w	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d106      	bne.n	8006114 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	e00b      	b.n	800612c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	e001      	b.n	800612c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e003      	b.n	8006134 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800612c:	2032      	movs	r0, #50	; 0x32
 800612e:	f7fa fff7 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800613c:	b084      	sub	sp, #16
 800613e:	b580      	push	{r7, lr}
 8006140:	b086      	sub	sp, #24
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800614a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	e009      	b.n	8006170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3340      	adds	r3, #64	; 0x40
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	2200      	movs	r2, #0
 8006168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3301      	adds	r3, #1
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0e      	cmp	r3, #14
 8006174:	d9f2      	bls.n	800615c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d11c      	bne.n	80061b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800618a:	f043 0302 	orr.w	r3, r3, #2
 800618e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e005      	b.n	80061c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	4619      	mov	r1, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061dc:	461a      	mov	r2, r3
 80061de:	680b      	ldr	r3, [r1, #0]
 80061e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80061e2:	2103      	movs	r1, #3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f93d 	bl	8006464 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061ea:	2110      	movs	r1, #16
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f8f1 	bl	80063d4 <USB_FlushTxFifo>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f90f 	bl	8006420 <USB_FlushRxFifo>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	461a      	mov	r2, r3
 8006214:	2300      	movs	r3, #0
 8006216:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	461a      	mov	r2, r3
 8006220:	2300      	movs	r3, #0
 8006222:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	461a      	mov	r2, r3
 800622c:	2300      	movs	r3, #0
 800622e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	e043      	b.n	80062be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624c:	d118      	bne.n	8006280 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	461a      	mov	r2, r3
 8006262:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	e013      	b.n	8006292 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	461a      	mov	r2, r3
 8006278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e008      	b.n	8006292 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	461a      	mov	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629e:	461a      	mov	r2, r3
 80062a0:	2300      	movs	r3, #0
 80062a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	461a      	mov	r2, r3
 80062b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	3301      	adds	r3, #1
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3b7      	bcc.n	8006236 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	e043      	b.n	8006354 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e2:	d118      	bne.n	8006316 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	461a      	mov	r2, r3
 80062f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e013      	b.n	8006328 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e008      	b.n	8006328 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006322:	461a      	mov	r2, r3
 8006324:	2300      	movs	r3, #0
 8006326:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	461a      	mov	r2, r3
 8006348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800634c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3301      	adds	r3, #1
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	429a      	cmp	r2, r3
 800635a:	d3b7      	bcc.n	80062cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800636a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800636e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800637c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	f043 0210 	orr.w	r2, r3, #16
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	4b10      	ldr	r3, [pc, #64]	; (80063d0 <USB_DevInit+0x294>)
 8006390:	4313      	orrs	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f043 0208 	orr.w	r2, r3, #8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063ca:	b004      	add	sp, #16
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	803c3800 	.word	0x803c3800

080063d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	019b      	lsls	r3, r3, #6
 80063e6:	f043 0220 	orr.w	r2, r3, #32
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4a09      	ldr	r2, [pc, #36]	; (800641c <USB_FlushTxFifo+0x48>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e006      	b.n	800640e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b20      	cmp	r3, #32
 800640a:	d0f0      	beq.n	80063ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	00030d40 	.word	0x00030d40

08006420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2210      	movs	r2, #16
 8006430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a09      	ldr	r2, [pc, #36]	; (8006460 <USB_FlushRxFifo+0x40>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d901      	bls.n	8006444 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e006      	b.n	8006452 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	2b10      	cmp	r3, #16
 800644e:	d0f0      	beq.n	8006432 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	00030d40 	.word	0x00030d40

08006464 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006484:	4313      	orrs	r3, r2
 8006486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0306 	and.w	r3, r3, #6
 80064ae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d002      	beq.n	80064bc <USB_GetDevSpeed+0x26>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b06      	cmp	r3, #6
 80064ba:	d102      	bne.n	80064c2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80064bc:	2302      	movs	r3, #2
 80064be:	75fb      	strb	r3, [r7, #23]
 80064c0:	e001      	b.n	80064c6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80064c2:	230f      	movs	r3, #15
 80064c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	785b      	ldrb	r3, [r3, #1]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d13a      	bne.n	8006566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	69da      	ldr	r2, [r3, #28]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	2101      	movs	r1, #1
 8006502:	fa01 f303 	lsl.w	r3, r1, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650e:	4313      	orrs	r3, r2
 8006510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d155      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	78db      	ldrb	r3, [r3, #3]
 8006542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800654c:	4313      	orrs	r3, r2
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006562:	6013      	str	r3, [r2, #0]
 8006564:	e036      	b.n	80065d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	69da      	ldr	r2, [r3, #28]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	2101      	movs	r1, #1
 8006578:	fa01 f303 	lsl.w	r3, r1, r3
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006584:	4313      	orrs	r3, r2
 8006586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11a      	bne.n	80065d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	78db      	ldrb	r3, [r3, #3]
 80065b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80065ba:	430b      	orrs	r3, r1
 80065bc:	4313      	orrs	r3, r2
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	0151      	lsls	r1, r2, #5
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	440a      	add	r2, r1
 80065c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d161      	bne.n	80066c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006616:	d11f      	bne.n	8006658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2101      	movs	r1, #1
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	b29b      	uxth	r3, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006678:	4013      	ands	r3, r2
 800667a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	b29b      	uxth	r3, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	440b      	add	r3, r1
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	4619      	mov	r1, r3
 80066bc:	4b35      	ldr	r3, [pc, #212]	; (8006794 <USB_DeactivateEndpoint+0x1b0>)
 80066be:	4013      	ands	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	e060      	b.n	8006786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066da:	d11f      	bne.n	800671c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	440a      	add	r2, r1
 8006712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800671a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	2101      	movs	r1, #1
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	43db      	mvns	r3, r3
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006760:	4013      	ands	r3, r2
 8006762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	0159      	lsls	r1, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	440b      	add	r3, r1
 800677a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677e:	4619      	mov	r1, r3
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <USB_DeactivateEndpoint+0x1b4>)
 8006782:	4013      	ands	r3, r2
 8006784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	ec337800 	.word	0xec337800
 8006798:	eff37800 	.word	0xeff37800

0800679c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	f040 810a 	bne.w	80069ce <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d132      	bne.n	8006828 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	440a      	add	r2, r1
 800681c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006820:	0cdb      	lsrs	r3, r3, #19
 8006822:	04db      	lsls	r3, r3, #19
 8006824:	6113      	str	r3, [r2, #16]
 8006826:	e074      	b.n	8006912 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	440a      	add	r2, r1
 800683e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006842:	0cdb      	lsrs	r3, r3, #19
 8006844:	04db      	lsls	r3, r3, #19
 8006846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800686a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6959      	ldr	r1, [r3, #20]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	440b      	add	r3, r1
 8006884:	1e59      	subs	r1, r3, #1
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	fbb1 f3f3 	udiv	r3, r1, r3
 800688e:	04d9      	lsls	r1, r3, #19
 8006890:	4baf      	ldr	r3, [pc, #700]	; (8006b50 <USB_EPStartXfer+0x3b4>)
 8006892:	400b      	ands	r3, r1
 8006894:	6939      	ldr	r1, [r7, #16]
 8006896:	0148      	lsls	r0, r1, #5
 8006898:	6979      	ldr	r1, [r7, #20]
 800689a:	4401      	add	r1, r0
 800689c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068a0:	4313      	orrs	r3, r2
 80068a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ba:	6939      	ldr	r1, [r7, #16]
 80068bc:	0148      	lsls	r0, r1, #5
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	4401      	add	r1, r0
 80068c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d11f      	bne.n	8006912 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80068f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006910:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006930:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	78db      	ldrb	r3, [r3, #3]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d015      	beq.n	8006966 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	2b00      	cmp	r3, #0
 8006940:	f000 8100 	beq.w	8006b44 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	6979      	ldr	r1, [r7, #20]
 800695c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006960:	4313      	orrs	r3, r2
 8006962:	634b      	str	r3, [r1, #52]	; 0x34
 8006964:	e0ee      	b.n	8006b44 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d110      	bne.n	8006998 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e00f      	b.n	80069b8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68d9      	ldr	r1, [r3, #12]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9e2 	bl	8006d90 <USB_WritePacket>
 80069cc:	e0ba      	b.n	8006b44 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e8:	0cdb      	lsrs	r3, r3, #19
 80069ea:	04db      	lsls	r3, r3, #19
 80069ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a10:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d123      	bne.n	8006a62 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a30:	6939      	ldr	r1, [r7, #16]
 8006a32:	0148      	lsls	r0, r1, #5
 8006a34:	6979      	ldr	r1, [r7, #20]
 8006a36:	4401      	add	r1, r0
 8006a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5e:	6113      	str	r3, [r2, #16]
 8006a60:	e033      	b.n	8006aca <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	1e5a      	subs	r2, r3, #1
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a76:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	89fb      	ldrh	r3, [r7, #14]
 8006a88:	04d9      	lsls	r1, r3, #19
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <USB_EPStartXfer+0x3b4>)
 8006a8c:	400b      	ands	r3, r1
 8006a8e:	6939      	ldr	r1, [r7, #16]
 8006a90:	0148      	lsls	r0, r1, #5
 8006a92:	6979      	ldr	r1, [r7, #20]
 8006a94:	4401      	add	r1, r0
 8006a96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	89f9      	ldrh	r1, [r7, #14]
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aba:	6939      	ldr	r1, [r7, #16]
 8006abc:	0148      	lsls	r0, r1, #5
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	4401      	add	r1, r0
 8006ac2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d128      	bne.n	8006b24 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d110      	bne.n	8006b04 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	0151      	lsls	r1, r2, #5
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	440a      	add	r2, r1
 8006af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e00f      	b.n	8006b24 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	1ff80000 	.word	0x1ff80000

08006b54 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 80ab 	bne.w	8006cc8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d132      	bne.n	8006be0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd8:	0cdb      	lsrs	r3, r3, #19
 8006bda:	04db      	lsls	r3, r3, #19
 8006bdc:	6113      	str	r3, [r2, #16]
 8006bde:	e04e      	b.n	8006c7e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	0cdb      	lsrs	r3, r3, #19
 8006bfc:	04db      	lsls	r3, r3, #19
 8006bfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	695a      	ldr	r2, [r3, #20]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d903      	bls.n	8006c38 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	0148      	lsls	r0, r1, #5
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	4401      	add	r1, r0
 8006c76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c9c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d06d      	beq.n	8006d82 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8006cc6:	e05c      	b.n	8006d82 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce2:	0cdb      	lsrs	r3, r3, #19
 8006ce4:	04db      	lsls	r3, r3, #19
 8006ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	0148      	lsls	r0, r1, #5
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	4401      	add	r1, r0
 8006d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b089      	sub	sp, #36	; 0x24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	460b      	mov	r3, r1
 8006da0:	71fb      	strb	r3, [r7, #7]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006dae:	88bb      	ldrh	r3, [r7, #4]
 8006db0:	3303      	adds	r3, #3
 8006db2:	089b      	lsrs	r3, r3, #2
 8006db4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006db6:	2300      	movs	r3, #0
 8006db8:	61bb      	str	r3, [r7, #24]
 8006dba:	e00f      	b.n	8006ddc <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	031a      	lsls	r2, r3, #12
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc8:	461a      	mov	r2, r3
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d3eb      	bcc.n	8006dbc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3724      	adds	r7, #36	; 0x24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b089      	sub	sp, #36	; 0x24
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e08:	88fb      	ldrh	r3, [r7, #6]
 8006e0a:	3303      	adds	r3, #3
 8006e0c:	089b      	lsrs	r3, r3, #2
 8006e0e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e00b      	b.n	8006e2e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3304      	adds	r3, #4
 8006e26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3ef      	bcc.n	8006e16 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e36:	69fb      	ldr	r3, [r7, #28]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3724      	adds	r7, #36	; 0x24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d12c      	bne.n	8006eba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db12      	blt.n	8006e98 <USB_EPSetStall+0x54>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00f      	beq.n	8006e98 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e96:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	e02b      	b.n	8006f12 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	db12      	blt.n	8006ef2 <USB_EPSetStall+0xae>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00f      	beq.n	8006ef2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ef0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f10:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d128      	bne.n	8006f8e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d003      	beq.n	8006f6c <USB_EPClearStall+0x4c>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	78db      	ldrb	r3, [r3, #3]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d138      	bne.n	8006fde <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e027      	b.n	8006fde <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d003      	beq.n	8006fbe <USB_EPClearStall+0x9e>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	78db      	ldrb	r3, [r3, #3]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d10f      	bne.n	8006fde <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	0151      	lsls	r1, r2, #5
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	440a      	add	r2, r1
 8006fd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800700e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	011b      	lsls	r3, r3, #4
 800701c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007020:	68f9      	ldr	r1, [r7, #12]
 8007022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007026:	4313      	orrs	r3, r2
 8007028:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f023 0302 	bic.w	r3, r3, #2
 8007056:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007058:	2003      	movs	r0, #3
 800705a:	f7fa f861 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007082:	f043 0302 	orr.w	r3, r3, #2
 8007086:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007088:	2003      	movs	r0, #3
 800708a:	f7fa f849 	bl	8001120 <HAL_Delay>

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4013      	ands	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070b0:	68fb      	ldr	r3, [r7, #12]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	0c1b      	lsrs	r3, r3, #16
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	4013      	ands	r3, r2
 8007114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	b29b      	uxth	r3, r3
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	460b      	mov	r3, r1
 8007130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007136:	78fb      	ldrb	r3, [r7, #3]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	4013      	ands	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007154:	68bb      	ldr	r3, [r7, #8]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007162:	b480      	push	{r7}
 8007164:	b087      	sub	sp, #28
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007184:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	b2db      	uxtb	r3, r3
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	4313      	orrs	r3, r2
 800719a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	4013      	ands	r3, r2
 80071ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071b0:	68bb      	ldr	r3, [r7, #8]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0301 	and.w	r3, r3, #1
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071f8:	f023 0307 	bic.w	r3, r3, #7
 80071fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800720c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	333c      	adds	r3, #60	; 0x3c
 8007232:	3304      	adds	r3, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <USB_EP0_OutStart+0x8c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d90a      	bls.n	8007256 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800724c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007250:	d101      	bne.n	8007256 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e024      	b.n	80072a0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007284:	f043 0318 	orr.w	r3, r3, #24
 8007288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800729c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	4f54300a 	.word	0x4f54300a

080072b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a13      	ldr	r2, [pc, #76]	; (8007314 <USB_CoreReset+0x64>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e01b      	b.n	8007306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	daf2      	bge.n	80072bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f043 0201 	orr.w	r2, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <USB_CoreReset+0x64>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e006      	b.n	8007306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b01      	cmp	r3, #1
 8007302:	d0f0      	beq.n	80072e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	00030d40 	.word	0x00030d40

08007318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7c1b      	ldrb	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d115      	bne.n	800735c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007334:	2202      	movs	r2, #2
 8007336:	2181      	movs	r1, #129	; 0x81
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f002 f961 	bl	8009600 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007348:	2202      	movs	r2, #2
 800734a:	2101      	movs	r1, #1
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 f957 	bl	8009600 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800735a:	e012      	b.n	8007382 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800735c:	2340      	movs	r3, #64	; 0x40
 800735e:	2202      	movs	r2, #2
 8007360:	2181      	movs	r1, #129	; 0x81
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f002 f94c 	bl	8009600 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	2202      	movs	r2, #2
 8007372:	2101      	movs	r1, #1
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f002 f943 	bl	8009600 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007382:	2308      	movs	r3, #8
 8007384:	2203      	movs	r2, #3
 8007386:	2182      	movs	r1, #130	; 0x82
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f002 f939 	bl	8009600 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007394:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007398:	f002 fb4a 	bl	8009a30 <USBD_static_malloc>
 800739c:	4602      	mov	r2, r0
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d102      	bne.n	80073b4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80073ae:	2301      	movs	r3, #1
 80073b0:	73fb      	strb	r3, [r7, #15]
 80073b2:	e026      	b.n	8007402 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ba:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7c1b      	ldrb	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f002 fa84 	bl	80098f8 <USBD_LL_PrepareReceive>
 80073f0:	e007      	b.n	8007402 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	2101      	movs	r1, #1
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f002 fa7b 	bl	80098f8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800741c:	2181      	movs	r1, #129	; 0x81
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f002 f92c 	bl	800967c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800742a:	2101      	movs	r1, #1
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f002 f925 	bl	800967c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800743a:	2182      	movs	r1, #130	; 0x82
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f002 f91d 	bl	800967c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	4618      	mov	r0, r3
 8007464:	f002 faf2 	bl	8009a4c <USBD_static_free>
    pdev->pClassData = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d039      	beq.n	8007518 <USBD_CDC_Setup+0x9e>
 80074a4:	2b20      	cmp	r3, #32
 80074a6:	d17c      	bne.n	80075a2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	88db      	ldrh	r3, [r3, #6]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d029      	beq.n	8007504 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da11      	bge.n	80074de <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80074c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	88d2      	ldrh	r2, [r2, #6]
 80074cc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074ce:	6939      	ldr	r1, [r7, #16]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	88db      	ldrh	r3, [r3, #6]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f001 fa6a 	bl	80089b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80074dc:	e068      	b.n	80075b0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	785a      	ldrb	r2, [r3, #1]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80074f4:	6939      	ldr	r1, [r7, #16]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	461a      	mov	r2, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 fa85 	bl	8008a0c <USBD_CtlPrepareRx>
      break;
 8007502:	e055      	b.n	80075b0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	7850      	ldrb	r0, [r2, #1]
 8007510:	2200      	movs	r2, #0
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	4798      	blx	r3
      break;
 8007516:	e04b      	b.n	80075b0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b0a      	cmp	r3, #10
 800751e:	d017      	beq.n	8007550 <USBD_CDC_Setup+0xd6>
 8007520:	2b0b      	cmp	r3, #11
 8007522:	d029      	beq.n	8007578 <USBD_CDC_Setup+0xfe>
 8007524:	2b00      	cmp	r3, #0
 8007526:	d133      	bne.n	8007590 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752e:	2b03      	cmp	r3, #3
 8007530:	d107      	bne.n	8007542 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007532:	f107 030c 	add.w	r3, r7, #12
 8007536:	2202      	movs	r2, #2
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fa38 	bl	80089b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007540:	e02e      	b.n	80075a0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 f9c8 	bl	80088da <USBD_CtlError>
            ret = USBD_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	75fb      	strb	r3, [r7, #23]
          break;
 800754e:	e027      	b.n	80075a0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	2b03      	cmp	r3, #3
 8007558:	d107      	bne.n	800756a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800755a:	f107 030f 	add.w	r3, r7, #15
 800755e:	2201      	movs	r2, #1
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 fa24 	bl	80089b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007568:	e01a      	b.n	80075a0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 f9b4 	bl	80088da <USBD_CtlError>
            ret = USBD_FAIL;
 8007572:	2302      	movs	r3, #2
 8007574:	75fb      	strb	r3, [r7, #23]
          break;
 8007576:	e013      	b.n	80075a0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757e:	2b03      	cmp	r3, #3
 8007580:	d00d      	beq.n	800759e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f9a8 	bl	80088da <USBD_CtlError>
            ret = USBD_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800758e:	e006      	b.n	800759e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 f9a1 	bl	80088da <USBD_CtlError>
          ret = USBD_FAIL;
 8007598:	2302      	movs	r3, #2
 800759a:	75fb      	strb	r3, [r7, #23]
          break;
 800759c:	e000      	b.n	80075a0 <USBD_CDC_Setup+0x126>
          break;
 800759e:	bf00      	nop
      }
      break;
 80075a0:	e006      	b.n	80075b0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f998 	bl	80088da <USBD_CtlError>
      ret = USBD_FAIL;
 80075aa:	2302      	movs	r3, #2
 80075ac:	75fb      	strb	r3, [r7, #23]
      break;
 80075ae:	bf00      	nop
  }

  return ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03a      	beq.n	8007656 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075e0:	78fa      	ldrb	r2, [r7, #3]
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	331c      	adds	r3, #28
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d029      	beq.n	800764a <USBD_CDC_DataIn+0x90>
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	331c      	adds	r3, #28
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	78f9      	ldrb	r1, [r7, #3]
 800760a:	68b8      	ldr	r0, [r7, #8]
 800760c:	460b      	mov	r3, r1
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	1a5b      	subs	r3, r3, r1
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4403      	add	r3, r0
 8007616:	3344      	adds	r3, #68	; 0x44
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	fbb2 f1f3 	udiv	r1, r2, r3
 800761e:	fb03 f301 	mul.w	r3, r3, r1
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d110      	bne.n	800764a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007628:	78fa      	ldrb	r2, [r7, #3]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	440b      	add	r3, r1
 8007636:	331c      	adds	r3, #28
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800763c:	78f9      	ldrb	r1, [r7, #3]
 800763e:	2300      	movs	r3, #0
 8007640:	2200      	movs	r2, #0
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f002 f91e 	bl	8009884 <USBD_LL_Transmit>
 8007648:	e003      	b.n	8007652 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e000      	b.n	8007658 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007656:	2302      	movs	r3, #2
  }
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007672:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f002 f977 	bl	800996c <USBD_LL_GetRxDataSize>
 800767e:	4602      	mov	r2, r0
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00d      	beq.n	80076ac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076a4:	4611      	mov	r1, r2
 80076a6:	4798      	blx	r3

    return USBD_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d015      	beq.n	80076fc <USBD_CDC_EP0_RxReady+0x46>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076d6:	2bff      	cmp	r3, #255	; 0xff
 80076d8:	d010      	beq.n	80076fc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80076e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80076f0:	b292      	uxth	r2, r2
 80076f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	22ff      	movs	r2, #255	; 0xff
 80076f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2243      	movs	r2, #67	; 0x43
 8007714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007716:	4b03      	ldr	r3, [pc, #12]	; (8007724 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007718:	4618      	mov	r0, r3
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000094 	.word	0x20000094

08007728 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2243      	movs	r2, #67	; 0x43
 8007734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000050 	.word	0x20000050

08007748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2243      	movs	r2, #67	; 0x43
 8007754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007756:	4b03      	ldr	r3, [pc, #12]	; (8007764 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	200000d8 	.word	0x200000d8

08007768 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	220a      	movs	r2, #10
 8007774:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	2000000c 	.word	0x2000000c

08007788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007792:	2302      	movs	r3, #2
 8007794:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b087      	sub	sp, #28
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60f8      	str	r0, [r7, #12]
 80077be:	60b9      	str	r1, [r7, #8]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01c      	beq.n	8007866 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007832:	2b00      	cmp	r3, #0
 8007834:	d115      	bne.n	8007862 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007854:	b29b      	uxth	r3, r3
 8007856:	2181      	movs	r1, #129	; 0x81
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f002 f813 	bl	8009884 <USBD_LL_Transmit>

      return USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	e002      	b.n	8007868 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007862:	2301      	movs	r3, #1
 8007864:	e000      	b.n	8007868 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007866:	2302      	movs	r3, #2
  }
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	7c1b      	ldrb	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800789c:	2101      	movs	r1, #1
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f002 f82a 	bl	80098f8 <USBD_LL_PrepareReceive>
 80078a4:	e007      	b.n	80078b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078ac:	2340      	movs	r3, #64	; 0x40
 80078ae:	2101      	movs	r1, #1
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 f821 	bl	80098f8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	e01a      	b.n	8007912 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	79fa      	ldrb	r2, [r7, #7]
 8007908:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f001 fdfa 	bl	8009504 <USBD_LL_Init>

  return USBD_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800791a:	b480      	push	{r7}
 800791c:	b085      	sub	sp, #20
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d006      	beq.n	800793c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	e001      	b.n	8007940 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f001 fe20 	bl	800959c <USBD_LL_Start>

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b082      	sub	sp, #8
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	4611      	mov	r1, r2
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 ff34 	bl	8008860 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d00c      	beq.n	8007a36 <USBD_LL_SetupStage+0x56>
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d302      	bcc.n	8007a26 <USBD_LL_SetupStage+0x46>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d010      	beq.n	8007a46 <USBD_LL_SetupStage+0x66>
 8007a24:	e017      	b.n	8007a56 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa0a 	bl	8007e48 <USBD_StdDevReq>
      break;
 8007a34:	e01a      	b.n	8007a6c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa6c 	bl	8007f1c <USBD_StdItfReq>
      break;
 8007a44:	e012      	b.n	8007a6c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 faaa 	bl	8007fa8 <USBD_StdEPReq>
      break;
 8007a54:	e00a      	b.n	8007a6c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007a5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fe3f 	bl	80096e8 <USBD_LL_StallEP>
      break;
 8007a6a:	bf00      	nop
  }

  return USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	607a      	str	r2, [r7, #4]
 8007a82:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007a84:	7afb      	ldrb	r3, [r7, #11]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d14b      	bne.n	8007b22 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a90:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d134      	bne.n	8007b06 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	68da      	ldr	r2, [r3, #12]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d919      	bls.n	8007adc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	68da      	ldr	r2, [r3, #12]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d203      	bcs.n	8007aca <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	e002      	b.n	8007ad0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 ffb7 	bl	8008a48 <USBD_CtlContinueRx>
 8007ada:	e038      	b.n	8007b4e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d105      	bne.n	8007afe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f000 ffb4 	bl	8008a6c <USBD_CtlSendStatus>
 8007b04:	e023      	b.n	8007b4e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d11e      	bne.n	8007b4e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f001 fde4 	bl	80096e8 <USBD_LL_StallEP>
 8007b20:	e015      	b.n	8007b4e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00d      	beq.n	8007b4a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d108      	bne.n	8007b4a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	7afa      	ldrb	r2, [r7, #11]
 8007b42:	4611      	mov	r1, r2
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	4798      	blx	r3
 8007b48:	e001      	b.n	8007b4e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e000      	b.n	8007b50 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	460b      	mov	r3, r1
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007b66:	7afb      	ldrb	r3, [r7, #11]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d17f      	bne.n	8007c6c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d15c      	bne.n	8007c36 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d915      	bls.n	8007bb4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	1ad2      	subs	r2, r2, r3
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 ff21 	bl	80089e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 fea3 	bl	80098f8 <USBD_LL_PrepareReceive>
 8007bb2:	e04e      	b.n	8007c52 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	6912      	ldr	r2, [r2, #16]
 8007bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc0:	fb02 f201 	mul.w	r2, r2, r1
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d11c      	bne.n	8007c04 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d316      	bcc.n	8007c04 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d20f      	bcs.n	8007c04 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007be4:	2200      	movs	r2, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fefd 	bl	80089e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 fe7b 	bl	80098f8 <USBD_LL_PrepareReceive>
 8007c02:	e026      	b.n	8007c52 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d105      	bne.n	8007c26 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 fd5d 	bl	80096e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 ff2f 	bl	8008a92 <USBD_CtlReceiveStatus>
 8007c34:	e00d      	b.n	8007c52 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d004      	beq.n	8007c4a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d103      	bne.n	8007c52 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007c4a:	2180      	movs	r1, #128	; 0x80
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f001 fd4b 	bl	80096e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d11d      	bne.n	8007c98 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff fe82 	bl	8007966 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c6a:	e015      	b.n	8007c98 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00d      	beq.n	8007c94 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d108      	bne.n	8007c94 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	7afa      	ldrb	r2, [r7, #11]
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	4798      	blx	r3
 8007c92:	e001      	b.n	8007c98 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	e000      	b.n	8007c9a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007caa:	2340      	movs	r3, #64	; 0x40
 8007cac:	2200      	movs	r2, #0
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fca5 	bl	8009600 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2240      	movs	r2, #64	; 0x40
 8007cc2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2180      	movs	r1, #128	; 0x80
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 fc97 	bl	8009600 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2240      	movs	r2, #64	; 0x40
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d009      	beq.n	8007d1a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
  }

  return USBD_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d105      	bne.n	8007d8c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b082      	sub	sp, #8
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d10b      	bne.n	8007dc4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6852      	ldr	r2, [r2, #4]
 8007e34:	b2d2      	uxtb	r2, r2
 8007e36:	4611      	mov	r1, r2
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d004      	beq.n	8007e6c <USBD_StdDevReq+0x24>
 8007e62:	2b40      	cmp	r3, #64	; 0x40
 8007e64:	d002      	beq.n	8007e6c <USBD_StdDevReq+0x24>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d008      	beq.n	8007e7c <USBD_StdDevReq+0x34>
 8007e6a:	e04c      	b.n	8007f06 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
      break;
 8007e7a:	e049      	b.n	8007f10 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b09      	cmp	r3, #9
 8007e82:	d83a      	bhi.n	8007efa <USBD_StdDevReq+0xb2>
 8007e84:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <USBD_StdDevReq+0x44>)
 8007e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8a:	bf00      	nop
 8007e8c:	08007edd 	.word	0x08007edd
 8007e90:	08007ef1 	.word	0x08007ef1
 8007e94:	08007efb 	.word	0x08007efb
 8007e98:	08007ee7 	.word	0x08007ee7
 8007e9c:	08007efb 	.word	0x08007efb
 8007ea0:	08007ebf 	.word	0x08007ebf
 8007ea4:	08007eb5 	.word	0x08007eb5
 8007ea8:	08007efb 	.word	0x08007efb
 8007eac:	08007ed3 	.word	0x08007ed3
 8007eb0:	08007ec9 	.word	0x08007ec9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f9d4 	bl	8008264 <USBD_GetDescriptor>
          break;
 8007ebc:	e022      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fb61 	bl	8008588 <USBD_SetAddress>
          break;
 8007ec6:	e01d      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fb9e 	bl	800860c <USBD_SetConfig>
          break;
 8007ed0:	e018      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc27 	bl	8008728 <USBD_GetConfig>
          break;
 8007eda:	e013      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007edc:	6839      	ldr	r1, [r7, #0]
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fc56 	bl	8008790 <USBD_GetStatus>
          break;
 8007ee4:	e00e      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc84 	bl	80087f6 <USBD_SetFeature>
          break;
 8007eee:	e009      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc93 	bl	800881e <USBD_ClrFeature>
          break;
 8007ef8:	e004      	b.n	8007f04 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fcec 	bl	80088da <USBD_CtlError>
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e004      	b.n	8007f10 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fce6 	bl	80088da <USBD_CtlError>
      break;
 8007f0e:	bf00      	nop
  }

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop

08007f1c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d003      	beq.n	8007f3e <USBD_StdItfReq+0x22>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d001      	beq.n	8007f3e <USBD_StdItfReq+0x22>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d12a      	bne.n	8007f94 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f44:	3b01      	subs	r3, #1
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d81d      	bhi.n	8007f86 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	889b      	ldrh	r3, [r3, #4]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d813      	bhi.n	8007f7c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	88db      	ldrh	r3, [r3, #6]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d110      	bne.n	8007f90 <USBD_StdItfReq+0x74>
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fd79 	bl	8008a6c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f7a:	e009      	b.n	8007f90 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fcab 	bl	80088da <USBD_CtlError>
          break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fca6 	bl	80088da <USBD_CtlError>
          break;
 8007f8e:	e000      	b.n	8007f92 <USBD_StdItfReq+0x76>
          break;
 8007f90:	bf00      	nop
      }
      break;
 8007f92:	e004      	b.n	8007f9e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fc9f 	bl	80088da <USBD_CtlError>
      break;
 8007f9c:	bf00      	nop
  }

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	889b      	ldrh	r3, [r3, #4]
 8007fba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d004      	beq.n	8007fd2 <USBD_StdEPReq+0x2a>
 8007fc8:	2b40      	cmp	r3, #64	; 0x40
 8007fca:	d002      	beq.n	8007fd2 <USBD_StdEPReq+0x2a>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d008      	beq.n	8007fe2 <USBD_StdEPReq+0x3a>
 8007fd0:	e13d      	b.n	800824e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	4798      	blx	r3
      break;
 8007fe0:	e13a      	b.n	8008258 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d10a      	bne.n	8008004 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	e12a      	b.n	800825a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d03e      	beq.n	800808a <USBD_StdEPReq+0xe2>
 800800c:	2b03      	cmp	r3, #3
 800800e:	d002      	beq.n	8008016 <USBD_StdEPReq+0x6e>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d070      	beq.n	80080f6 <USBD_StdEPReq+0x14e>
 8008014:	e115      	b.n	8008242 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	2b02      	cmp	r3, #2
 800801e:	d002      	beq.n	8008026 <USBD_StdEPReq+0x7e>
 8008020:	2b03      	cmp	r3, #3
 8008022:	d015      	beq.n	8008050 <USBD_StdEPReq+0xa8>
 8008024:	e02b      	b.n	800807e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008026:	7bbb      	ldrb	r3, [r7, #14]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <USBD_StdEPReq+0x9e>
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	d009      	beq.n	8008046 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fb56 	bl	80096e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fb52 	bl	80096e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008044:	e020      	b.n	8008088 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc46 	bl	80088da <USBD_CtlError>
              break;
 800804e:	e01b      	b.n	8008088 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10e      	bne.n	8008076 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00b      	beq.n	8008076 <USBD_StdEPReq+0xce>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d008      	beq.n	8008076 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	88db      	ldrh	r3, [r3, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 fb39 	bl	80096e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fcf8 	bl	8008a6c <USBD_CtlSendStatus>

              break;
 800807c:	e004      	b.n	8008088 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc2a 	bl	80088da <USBD_CtlError>
              break;
 8008086:	bf00      	nop
          }
          break;
 8008088:	e0e0      	b.n	800824c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	2b02      	cmp	r3, #2
 8008092:	d002      	beq.n	800809a <USBD_StdEPReq+0xf2>
 8008094:	2b03      	cmp	r3, #3
 8008096:	d015      	beq.n	80080c4 <USBD_StdEPReq+0x11c>
 8008098:	e026      	b.n	80080e8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <USBD_StdEPReq+0x112>
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b80      	cmp	r3, #128	; 0x80
 80080a4:	d009      	beq.n	80080ba <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fb1c 	bl	80096e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80080b0:	2180      	movs	r1, #128	; 0x80
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f001 fb18 	bl	80096e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80080b8:	e01c      	b.n	80080f4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fc0c 	bl	80088da <USBD_CtlError>
              break;
 80080c2:	e017      	b.n	80080f4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	885b      	ldrh	r3, [r3, #2]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d112      	bne.n	80080f2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fb3a 	bl	8009754 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fcc3 	bl	8008a6c <USBD_CtlSendStatus>
              }
              break;
 80080e6:	e004      	b.n	80080f2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fbf5 	bl	80088da <USBD_CtlError>
              break;
 80080f0:	e000      	b.n	80080f4 <USBD_StdEPReq+0x14c>
              break;
 80080f2:	bf00      	nop
          }
          break;
 80080f4:	e0aa      	b.n	800824c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d002      	beq.n	8008106 <USBD_StdEPReq+0x15e>
 8008100:	2b03      	cmp	r3, #3
 8008102:	d032      	beq.n	800816a <USBD_StdEPReq+0x1c2>
 8008104:	e097      	b.n	8008236 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <USBD_StdEPReq+0x174>
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d004      	beq.n	800811c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fbe0 	bl	80088da <USBD_CtlError>
                break;
 800811a:	e091      	b.n	8008240 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800811c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da0b      	bge.n	800813c <USBD_StdEPReq+0x194>
 8008124:	7bbb      	ldrb	r3, [r7, #14]
 8008126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800812a:	4613      	mov	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	3310      	adds	r3, #16
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	3304      	adds	r3, #4
 800813a:	e00b      	b.n	8008154 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4413      	add	r3, r2
 8008152:	3304      	adds	r3, #4
 8008154:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2202      	movs	r2, #2
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fc24 	bl	80089b0 <USBD_CtlSendData>
              break;
 8008168:	e06a      	b.n	8008240 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800816a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da11      	bge.n	8008196 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	f003 020f 	and.w	r2, r3, #15
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	3318      	adds	r3, #24
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d117      	bne.n	80081bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fba3 	bl	80088da <USBD_CtlError>
                  break;
 8008194:	e054      	b.n	8008240 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	f003 020f 	and.w	r2, r3, #15
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d104      	bne.n	80081bc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb90 	bl	80088da <USBD_CtlError>
                  break;
 80081ba:	e041      	b.n	8008240 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	da0b      	bge.n	80081dc <USBD_StdEPReq+0x234>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	3310      	adds	r3, #16
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	4413      	add	r3, r2
 80081d8:	3304      	adds	r3, #4
 80081da:	e00b      	b.n	80081f4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	3304      	adds	r3, #4
 80081f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <USBD_StdEPReq+0x25a>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d103      	bne.n	800820a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e00e      	b.n	8008228 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f001 fad6 	bl	80097c0 <USBD_LL_IsStallEP>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	e002      	b.n	8008228 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2202      	movs	r2, #2
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fbbe 	bl	80089b0 <USBD_CtlSendData>
              break;
 8008234:	e004      	b.n	8008240 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fb4e 	bl	80088da <USBD_CtlError>
              break;
 800823e:	bf00      	nop
          }
          break;
 8008240:	e004      	b.n	800824c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fb48 	bl	80088da <USBD_CtlError>
          break;
 800824a:	bf00      	nop
      }
      break;
 800824c:	e004      	b.n	8008258 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800824e:	6839      	ldr	r1, [r7, #0]
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 fb42 	bl	80088da <USBD_CtlError>
      break;
 8008256:	bf00      	nop
  }

  return ret;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800826e:	2300      	movs	r3, #0
 8008270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	2b0e      	cmp	r3, #14
 8008286:	f200 8152 	bhi.w	800852e <USBD_GetDescriptor+0x2ca>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_GetDescriptor+0x2c>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	08008301 	.word	0x08008301
 8008294:	08008319 	.word	0x08008319
 8008298:	08008359 	.word	0x08008359
 800829c:	0800852f 	.word	0x0800852f
 80082a0:	0800852f 	.word	0x0800852f
 80082a4:	080084cf 	.word	0x080084cf
 80082a8:	080084fb 	.word	0x080084fb
 80082ac:	0800852f 	.word	0x0800852f
 80082b0:	0800852f 	.word	0x0800852f
 80082b4:	0800852f 	.word	0x0800852f
 80082b8:	0800852f 	.word	0x0800852f
 80082bc:	0800852f 	.word	0x0800852f
 80082c0:	0800852f 	.word	0x0800852f
 80082c4:	0800852f 	.word	0x0800852f
 80082c8:	080082cd 	.word	0x080082cd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	7c12      	ldrb	r2, [r2, #16]
 80082e4:	f107 0108 	add.w	r1, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082ee:	e126      	b.n	800853e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 faf1 	bl	80088da <USBD_CtlError>
        err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
      break;
 80082fe:	e11e      	b.n	800853e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	7c12      	ldrb	r2, [r2, #16]
 800830c:	f107 0108 	add.w	r1, r7, #8
 8008310:	4610      	mov	r0, r2
 8008312:	4798      	blx	r3
 8008314:	60f8      	str	r0, [r7, #12]
      break;
 8008316:	e112      	b.n	800853e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7c1b      	ldrb	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008328:	f107 0208 	add.w	r2, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	2202      	movs	r2, #2
 8008338:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800833a:	e100      	b.n	800853e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	2202      	movs	r2, #2
 8008354:	701a      	strb	r2, [r3, #0]
      break;
 8008356:	e0f2      	b.n	800853e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	885b      	ldrh	r3, [r3, #2]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b05      	cmp	r3, #5
 8008360:	f200 80ac 	bhi.w	80084bc <USBD_GetDescriptor+0x258>
 8008364:	a201      	add	r2, pc, #4	; (adr r2, 800836c <USBD_GetDescriptor+0x108>)
 8008366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836a:	bf00      	nop
 800836c:	08008385 	.word	0x08008385
 8008370:	080083b9 	.word	0x080083b9
 8008374:	080083ed 	.word	0x080083ed
 8008378:	08008421 	.word	0x08008421
 800837c:	08008455 	.word	0x08008455
 8008380:	08008489 	.word	0x08008489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	7c12      	ldrb	r2, [r2, #16]
 800839c:	f107 0108 	add.w	r1, r7, #8
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3
 80083a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083a6:	e091      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa95 	bl	80088da <USBD_CtlError>
            err++;
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	3301      	adds	r3, #1
 80083b4:	72fb      	strb	r3, [r7, #11]
          break;
 80083b6:	e089      	b.n	80084cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	7c12      	ldrb	r2, [r2, #16]
 80083d0:	f107 0108 	add.w	r1, r7, #8
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
 80083d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083da:	e077      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa7b 	bl	80088da <USBD_CtlError>
            err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
          break;
 80083ea:	e06f      	b.n	80084cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00b      	beq.n	8008410 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	7c12      	ldrb	r2, [r2, #16]
 8008404:	f107 0108 	add.w	r1, r7, #8
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3
 800840c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800840e:	e05d      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa61 	bl	80088da <USBD_CtlError>
            err++;
 8008418:	7afb      	ldrb	r3, [r7, #11]
 800841a:	3301      	adds	r3, #1
 800841c:	72fb      	strb	r3, [r7, #11]
          break;
 800841e:	e055      	b.n	80084cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008442:	e043      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa47 	bl	80088da <USBD_CtlError>
            err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
          break;
 8008452:	e03b      	b.n	80084cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008476:	e029      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa2d 	bl	80088da <USBD_CtlError>
            err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
          break;
 8008486:	e021      	b.n	80084cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084aa:	e00f      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa13 	bl	80088da <USBD_CtlError>
            err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ba:	e007      	b.n	80084cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fa0b 	bl	80088da <USBD_CtlError>
          err++;
 80084c4:	7afb      	ldrb	r3, [r7, #11]
 80084c6:	3301      	adds	r3, #1
 80084c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80084ca:	e038      	b.n	800853e <USBD_GetDescriptor+0x2da>
 80084cc:	e037      	b.n	800853e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7c1b      	ldrb	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084de:	f107 0208 	add.w	r2, r7, #8
 80084e2:	4610      	mov	r0, r2
 80084e4:	4798      	blx	r3
 80084e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084e8:	e029      	b.n	800853e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9f4 	bl	80088da <USBD_CtlError>
        err++;
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	3301      	adds	r3, #1
 80084f6:	72fb      	strb	r3, [r7, #11]
      break;
 80084f8:	e021      	b.n	800853e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850a:	f107 0208 	add.w	r2, r7, #8
 800850e:	4610      	mov	r0, r2
 8008510:	4798      	blx	r3
 8008512:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	2207      	movs	r2, #7
 800851a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800851c:	e00f      	b.n	800853e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f9da 	bl	80088da <USBD_CtlError>
        err++;
 8008526:	7afb      	ldrb	r3, [r7, #11]
 8008528:	3301      	adds	r3, #1
 800852a:	72fb      	strb	r3, [r7, #11]
      break;
 800852c:	e007      	b.n	800853e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f9d2 	bl	80088da <USBD_CtlError>
      err++;
 8008536:	7afb      	ldrb	r3, [r7, #11]
 8008538:	3301      	adds	r3, #1
 800853a:	72fb      	strb	r3, [r7, #11]
      break;
 800853c:	bf00      	nop
  }

  if (err != 0U)
 800853e:	7afb      	ldrb	r3, [r7, #11]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d11c      	bne.n	800857e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008544:	893b      	ldrh	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <USBD_GetDescriptor+0x30a>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	88db      	ldrh	r3, [r3, #6]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00d      	beq.n	800856e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	88da      	ldrh	r2, [r3, #6]
 8008556:	893b      	ldrh	r3, [r7, #8]
 8008558:	4293      	cmp	r3, r2
 800855a:	bf28      	it	cs
 800855c:	4613      	movcs	r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008562:	893b      	ldrh	r3, [r7, #8]
 8008564:	461a      	mov	r2, r3
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fa21 	bl	80089b0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	88db      	ldrh	r3, [r3, #6]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa78 	bl	8008a6c <USBD_CtlSendStatus>
 800857c:	e000      	b.n	8008580 <USBD_GetDescriptor+0x31c>
    return;
 800857e:	bf00      	nop
    }
  }
}
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	889b      	ldrh	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d130      	bne.n	80085fc <USBD_SetAddress+0x74>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	88db      	ldrh	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d12c      	bne.n	80085fc <USBD_SetAddress+0x74>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	2b7f      	cmp	r3, #127	; 0x7f
 80085a8:	d828      	bhi.n	80085fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	885b      	ldrh	r3, [r3, #2]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d104      	bne.n	80085ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f989 	bl	80088da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085c8:	e01c      	b.n	8008604 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	7bfa      	ldrb	r2, [r7, #15]
 80085ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 f91e 	bl	8009818 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fa45 	bl	8008a6c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f0:	e008      	b.n	8008604 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085fa:	e003      	b.n	8008604 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f96b 	bl	80088da <USBD_CtlError>
  }
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	b2da      	uxtb	r2, r3
 800861c:	4b41      	ldr	r3, [pc, #260]	; (8008724 <USBD_SetConfig+0x118>)
 800861e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008620:	4b40      	ldr	r3, [pc, #256]	; (8008724 <USBD_SetConfig+0x118>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d904      	bls.n	8008632 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f955 	bl	80088da <USBD_CtlError>
 8008630:	e075      	b.n	800871e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	2b02      	cmp	r3, #2
 800863a:	d002      	beq.n	8008642 <USBD_SetConfig+0x36>
 800863c:	2b03      	cmp	r3, #3
 800863e:	d023      	beq.n	8008688 <USBD_SetConfig+0x7c>
 8008640:	e062      	b.n	8008708 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008642:	4b38      	ldr	r3, [pc, #224]	; (8008724 <USBD_SetConfig+0x118>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d01a      	beq.n	8008680 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800864a:	4b36      	ldr	r3, [pc, #216]	; (8008724 <USBD_SetConfig+0x118>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2203      	movs	r2, #3
 8008658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800865c:	4b31      	ldr	r3, [pc, #196]	; (8008724 <USBD_SetConfig+0x118>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff f98a 	bl	800797c <USBD_SetClassConfig>
 8008668:	4603      	mov	r3, r0
 800866a:	2b02      	cmp	r3, #2
 800866c:	d104      	bne.n	8008678 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f932 	bl	80088da <USBD_CtlError>
            return;
 8008676:	e052      	b.n	800871e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 f9f7 	bl	8008a6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800867e:	e04e      	b.n	800871e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f9f3 	bl	8008a6c <USBD_CtlSendStatus>
        break;
 8008686:	e04a      	b.n	800871e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008688:	4b26      	ldr	r3, [pc, #152]	; (8008724 <USBD_SetConfig+0x118>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d112      	bne.n	80086b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008698:	4b22      	ldr	r3, [pc, #136]	; (8008724 <USBD_SetConfig+0x118>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <USBD_SetConfig+0x118>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff f986 	bl	80079ba <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9dc 	bl	8008a6c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80086b4:	e033      	b.n	800871e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80086b6:	4b1b      	ldr	r3, [pc, #108]	; (8008724 <USBD_SetConfig+0x118>)
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d01d      	beq.n	8008700 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff f974 	bl	80079ba <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80086d2:	4b14      	ldr	r3, [pc, #80]	; (8008724 <USBD_SetConfig+0x118>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	461a      	mov	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086dc:	4b11      	ldr	r3, [pc, #68]	; (8008724 <USBD_SetConfig+0x118>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	4619      	mov	r1, r3
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff f94a 	bl	800797c <USBD_SetClassConfig>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d104      	bne.n	80086f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f8f2 	bl	80088da <USBD_CtlError>
            return;
 80086f6:	e012      	b.n	800871e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f9b7 	bl	8008a6c <USBD_CtlSendStatus>
        break;
 80086fe:	e00e      	b.n	800871e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f9b3 	bl	8008a6c <USBD_CtlSendStatus>
        break;
 8008706:	e00a      	b.n	800871e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 f8e5 	bl	80088da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008710:	4b04      	ldr	r3, [pc, #16]	; (8008724 <USBD_SetConfig+0x118>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7ff f94f 	bl	80079ba <USBD_ClrClassConfig>
        break;
 800871c:	bf00      	nop
    }
  }
}
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20004dc8 	.word	0x20004dc8

08008728 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	88db      	ldrh	r3, [r3, #6]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d004      	beq.n	8008744 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f8cc 	bl	80088da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008742:	e021      	b.n	8008788 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	2b01      	cmp	r3, #1
 800874c:	db17      	blt.n	800877e <USBD_GetConfig+0x56>
 800874e:	2b02      	cmp	r3, #2
 8008750:	dd02      	ble.n	8008758 <USBD_GetConfig+0x30>
 8008752:	2b03      	cmp	r3, #3
 8008754:	d00b      	beq.n	800876e <USBD_GetConfig+0x46>
 8008756:	e012      	b.n	800877e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	3308      	adds	r3, #8
 8008762:	2201      	movs	r2, #1
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f922 	bl	80089b0 <USBD_CtlSendData>
        break;
 800876c:	e00c      	b.n	8008788 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2201      	movs	r2, #1
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f91a 	bl	80089b0 <USBD_CtlSendData>
        break;
 800877c:	e004      	b.n	8008788 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f8aa 	bl	80088da <USBD_CtlError>
        break;
 8008786:	bf00      	nop
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a0:	3b01      	subs	r3, #1
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d81e      	bhi.n	80087e4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	88db      	ldrh	r3, [r3, #6]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d004      	beq.n	80087b8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f892 	bl	80088da <USBD_CtlError>
        break;
 80087b6:	e01a      	b.n	80087ee <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f043 0202 	orr.w	r2, r3, #2
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	330c      	adds	r3, #12
 80087d8:	2202      	movs	r2, #2
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8e7 	bl	80089b0 <USBD_CtlSendData>
      break;
 80087e2:	e004      	b.n	80087ee <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f877 	bl	80088da <USBD_CtlError>
      break;
 80087ec:	bf00      	nop
  }
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	885b      	ldrh	r3, [r3, #2]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d106      	bne.n	8008816 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f92b 	bl	8008a6c <USBD_CtlSendStatus>
  }
}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800882e:	3b01      	subs	r3, #1
 8008830:	2b02      	cmp	r3, #2
 8008832:	d80b      	bhi.n	800884c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d10c      	bne.n	8008856 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f911 	bl	8008a6c <USBD_CtlSendStatus>
      }
      break;
 800884a:	e004      	b.n	8008856 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800884c:	6839      	ldr	r1, [r7, #0]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f843 	bl	80088da <USBD_CtlError>
      break;
 8008854:	e000      	b.n	8008858 <USBD_ClrFeature+0x3a>
      break;
 8008856:	bf00      	nop
  }
}
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	785a      	ldrb	r2, [r3, #1]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	3302      	adds	r3, #2
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	b29a      	uxth	r2, r3
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	3303      	adds	r3, #3
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	021b      	lsls	r3, r3, #8
 800888c:	b29b      	uxth	r3, r3
 800888e:	4413      	add	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	3304      	adds	r3, #4
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	b29a      	uxth	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	3305      	adds	r3, #5
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	3306      	adds	r3, #6
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	3307      	adds	r3, #7
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	80da      	strh	r2, [r3, #6]

}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80088e4:	2180      	movs	r1, #128	; 0x80
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fefe 	bl	80096e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80088ec:	2100      	movs	r1, #0
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fefa 	bl	80096e8 <USBD_LL_StallEP>
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d032      	beq.n	8008978 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f834 	bl	8008980 <USBD_GetLen>
 8008918:	4603      	mov	r3, r0
 800891a:	3301      	adds	r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	75fa      	strb	r2, [r7, #23]
 800892c:	461a      	mov	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	7812      	ldrb	r2, [r2, #0]
 8008936:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	75fa      	strb	r2, [r7, #23]
 800893e:	461a      	mov	r2, r3
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	4413      	add	r3, r2
 8008944:	2203      	movs	r2, #3
 8008946:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008948:	e012      	b.n	8008970 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	1c5a      	adds	r2, r3, #1
 800894e:	60fa      	str	r2, [r7, #12]
 8008950:	7dfa      	ldrb	r2, [r7, #23]
 8008952:	1c51      	adds	r1, r2, #1
 8008954:	75f9      	strb	r1, [r7, #23]
 8008956:	4611      	mov	r1, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	440a      	add	r2, r1
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	75fa      	strb	r2, [r7, #23]
 8008966:	461a      	mov	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	4413      	add	r3, r2
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e8      	bne.n	800894a <USBD_GetString+0x4e>
    }
  }
}
 8008978:	bf00      	nop
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800898c:	e005      	b.n	800899a <USBD_GetLen+0x1a>
  {
    len++;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	3301      	adds	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3301      	adds	r3, #1
 8008998:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f5      	bne.n	800898e <USBD_GetLen+0xe>
  }

  return len;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2202      	movs	r2, #2
 80089c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80089cc:	88fa      	ldrh	r2, [r7, #6]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089d2:	88fb      	ldrh	r3, [r7, #6]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	2100      	movs	r1, #0
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 ff53 	bl	8009884 <USBD_LL_Transmit>

  return USBD_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	2100      	movs	r1, #0
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 ff41 	bl	8009884 <USBD_LL_Transmit>

  return USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2203      	movs	r2, #3
 8008a1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008a22:	88fa      	ldrh	r2, [r7, #6]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	2100      	movs	r1, #0
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 ff5d 	bl	80098f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a56:	88fb      	ldrh	r3, [r7, #6]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 ff4b 	bl	80098f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2204      	movs	r2, #4
 8008a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fefe 	bl	8009884 <USBD_LL_Transmit>

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2205      	movs	r2, #5
 8008a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 ff25 	bl	80098f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008abc:	2200      	movs	r2, #0
 8008abe:	4912      	ldr	r1, [pc, #72]	; (8008b08 <MX_USB_DEVICE_Init+0x50>)
 8008ac0:	4812      	ldr	r0, [pc, #72]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ac2:	f7fe feff 	bl	80078c4 <USBD_Init>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008acc:	f7f7 fe36 	bl	800073c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ad0:	490f      	ldr	r1, [pc, #60]	; (8008b10 <MX_USB_DEVICE_Init+0x58>)
 8008ad2:	480e      	ldr	r0, [pc, #56]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ad4:	f7fe ff21 	bl	800791a <USBD_RegisterClass>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ade:	f7f7 fe2d 	bl	800073c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ae2:	490c      	ldr	r1, [pc, #48]	; (8008b14 <MX_USB_DEVICE_Init+0x5c>)
 8008ae4:	4809      	ldr	r0, [pc, #36]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008ae6:	f7fe fe4f 	bl	8007788 <USBD_CDC_RegisterInterface>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008af0:	f7f7 fe24 	bl	800073c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008af4:	4805      	ldr	r0, [pc, #20]	; (8008b0c <MX_USB_DEVICE_Init+0x54>)
 8008af6:	f7fe ff2a 	bl	800794e <USBD_Start>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d001      	beq.n	8008b04 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b00:	f7f7 fe1c 	bl	800073c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b04:	bf00      	nop
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000134 	.word	0x20000134
 8008b0c:	200051c0 	.word	0x200051c0
 8008b10:	20000018 	.word	0x20000018
 8008b14:	20000124 	.word	0x20000124

08008b18 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /*##-1- Configure the UART peripheral ######################################*/
  	  /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
	  huart2.Instance = USART2;
 8008b1c:	4b26      	ldr	r3, [pc, #152]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b1e:	4a27      	ldr	r2, [pc, #156]	; (8008bbc <CDC_Init_FS+0xa4>)
 8008b20:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8008b22:	4b25      	ldr	r3, [pc, #148]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b28:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008b2a:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8008b30:	4b21      	ldr	r3, [pc, #132]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8008b36:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8008b3c:	4b1e      	ldr	r3, [pc, #120]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b3e:	220c      	movs	r2, #12
 8008b40:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b42:	4b1d      	ldr	r3, [pc, #116]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b48:	4b1b      	ldr	r3, [pc, #108]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008b4e:	4b1a      	ldr	r3, [pc, #104]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	621a      	str	r2, [r3, #32]
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008b54:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008b5a:	4817      	ldr	r0, [pc, #92]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b5c:	f7fb ffd0 	bl	8004b00 <HAL_UART_Init>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <CDC_Init_FS+0x52>
	  {
	    Error_Handler();
 8008b66:	f7f7 fde9 	bl	800073c <Error_Handler>
	  }

  	  /*##-2- Put UART peripheral in IT reception process ########################*/
  	  /* Any data received will be stored in "UserTxBuffer" buffer  */
  	  if(HAL_UART_Receive_IT(&huart2, (uint8_t *)UserTxBufferFS, 1) != HAL_OK)
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4914      	ldr	r1, [pc, #80]	; (8008bc0 <CDC_Init_FS+0xa8>)
 8008b6e:	4812      	ldr	r0, [pc, #72]	; (8008bb8 <CDC_Init_FS+0xa0>)
 8008b70:	f7fc f8dc 	bl	8004d2c <HAL_UART_Receive_IT>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <CDC_Init_FS+0x66>
  	  {
  	    /* Transfer error in reception process */
  	    Error_Handler();
 8008b7a:	f7f7 fddf 	bl	800073c <Error_Handler>
  	  }

  	  /*##-3- Configure the TIM Base generation  #################################*/
  	  TIM_Config();
 8008b7e:	f000 fa0f 	bl	8008fa0 <TIM_Config>

  	  /*##-4- Start the TIM Base generation in interrupt mode ####################*/
  	  /* Start Channel1 */
  	  if(HAL_TIM_Base_Start_IT(&TimHandle) != HAL_OK)
 8008b82:	4810      	ldr	r0, [pc, #64]	; (8008bc4 <CDC_Init_FS+0xac>)
 8008b84:	f7fb fd92 	bl	80046ac <HAL_TIM_Base_Start_IT>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <CDC_Init_FS+0x7a>
  	  {
  	    /* Starting Error */
  	    Error_Handler();
 8008b8e:	f7f7 fdd5 	bl	800073c <Error_Handler>
  	  }

  	  __HAL_DBGMCU_FREEZE_TIM3();
 8008b92:	4b0d      	ldr	r3, [pc, #52]	; (8008bc8 <CDC_Init_FS+0xb0>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	4a0c      	ldr	r2, [pc, #48]	; (8008bc8 <CDC_Init_FS+0xb0>)
 8008b98:	f043 0302 	orr.w	r3, r3, #2
 8008b9c:	6093      	str	r3, [r2, #8]

  	  /*##-5- Set Application Buffers ############################################*/
  	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <CDC_Init_FS+0xa8>)
 8008ba2:	480a      	ldr	r0, [pc, #40]	; (8008bcc <CDC_Init_FS+0xb4>)
 8008ba4:	f7fe fe07 	bl	80077b6 <USBD_CDC_SetTxBuffer>
  	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ba8:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <CDC_Init_FS+0xb8>)
 8008baa:	4808      	ldr	r0, [pc, #32]	; (8008bcc <CDC_Init_FS+0xb4>)
 8008bac:	f7fe fe1d 	bl	80077ea <USBD_CDC_SetRxBuffer>

  	  return (USBD_OK);
 8008bb0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2000503c 	.word	0x2000503c
 8008bbc:	40004400 	.word	0x40004400
 8008bc0:	20005c88 	.word	0x20005c88
 8008bc4:	2000648c 	.word	0x2000648c
 8008bc8:	e0042000 	.word	0xe0042000
 8008bcc:	200051c0 	.word	0x200051c0
 8008bd0:	20005488 	.word	0x20005488

08008bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

	    /* DeInitialize the UART peripheral */
	    if(HAL_UART_DeInit(&huart2) != HAL_OK)
 8008bd8:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <CDC_DeInit_FS+0x1c>)
 8008bda:	f7fb ffdf 	bl	8004b9c <HAL_UART_DeInit>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <CDC_DeInit_FS+0x14>
	    {
	      /* Initialization Error */
	      Error_Handler();
 8008be4:	f7f7 fdaa 	bl	800073c <Error_Handler>
	    }
	    return (USBD_OK);
 8008be8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2000503c 	.word	0x2000503c

08008bf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	6039      	str	r1, [r7, #0]
 8008bfe:	71fb      	strb	r3, [r7, #7]
 8008c00:	4613      	mov	r3, r2
 8008c02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	2b23      	cmp	r3, #35	; 0x23
 8008c08:	f200 809a 	bhi.w	8008d40 <CDC_Control_FS+0x14c>
 8008c0c:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <CDC_Control_FS+0x20>)
 8008c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c12:	bf00      	nop
 8008c14:	08008d41 	.word	0x08008d41
 8008c18:	08008d41 	.word	0x08008d41
 8008c1c:	08008d41 	.word	0x08008d41
 8008c20:	08008d41 	.word	0x08008d41
 8008c24:	08008d41 	.word	0x08008d41
 8008c28:	08008d41 	.word	0x08008d41
 8008c2c:	08008d41 	.word	0x08008d41
 8008c30:	08008d41 	.word	0x08008d41
 8008c34:	08008d41 	.word	0x08008d41
 8008c38:	08008d41 	.word	0x08008d41
 8008c3c:	08008d41 	.word	0x08008d41
 8008c40:	08008d41 	.word	0x08008d41
 8008c44:	08008d41 	.word	0x08008d41
 8008c48:	08008d41 	.word	0x08008d41
 8008c4c:	08008d41 	.word	0x08008d41
 8008c50:	08008d41 	.word	0x08008d41
 8008c54:	08008d41 	.word	0x08008d41
 8008c58:	08008d41 	.word	0x08008d41
 8008c5c:	08008d41 	.word	0x08008d41
 8008c60:	08008d41 	.word	0x08008d41
 8008c64:	08008d41 	.word	0x08008d41
 8008c68:	08008d41 	.word	0x08008d41
 8008c6c:	08008d41 	.word	0x08008d41
 8008c70:	08008d41 	.word	0x08008d41
 8008c74:	08008d41 	.word	0x08008d41
 8008c78:	08008d41 	.word	0x08008d41
 8008c7c:	08008d41 	.word	0x08008d41
 8008c80:	08008d41 	.word	0x08008d41
 8008c84:	08008d41 	.word	0x08008d41
 8008c88:	08008d41 	.word	0x08008d41
 8008c8c:	08008d41 	.word	0x08008d41
 8008c90:	08008d41 	.word	0x08008d41
 8008c94:	08008ca5 	.word	0x08008ca5
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008d41 	.word	0x08008d41
 8008ca0:	08008d41 	.word	0x08008d41
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	3302      	adds	r3, #2
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	041b      	lsls	r3, r3, #16
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008cbc:	431a      	orrs	r2, r3
                              (pbuf[2] << 16) | (pbuf[3] << 24));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	3303      	adds	r3, #3
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	061b      	lsls	r3, r3, #24
 8008cc6:	4313      	orrs	r3, r2
      LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4b20      	ldr	r3, [pc, #128]	; (8008d4c <CDC_Control_FS+0x158>)
 8008ccc:	601a      	str	r2, [r3, #0]
      LineCoding.format     = pbuf[4];
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	791a      	ldrb	r2, [r3, #4]
 8008cd2:	4b1e      	ldr	r3, [pc, #120]	; (8008d4c <CDC_Control_FS+0x158>)
 8008cd4:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	795a      	ldrb	r2, [r3, #5]
 8008cda:	4b1c      	ldr	r3, [pc, #112]	; (8008d4c <CDC_Control_FS+0x158>)
 8008cdc:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	799a      	ldrb	r2, [r3, #6]
 8008ce2:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <CDC_Control_FS+0x158>)
 8008ce4:	719a      	strb	r2, [r3, #6]

      /* Set the new configuration */
      ComPort_Config();
 8008ce6:	f000 f8e1 	bl	8008eac <ComPort_Config>
      break;
 8008cea:	e02a      	b.n	8008d42 <CDC_Control_FS+0x14e>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008cec:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <CDC_Control_FS+0x158>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008cf6:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <CDC_Control_FS+0x158>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	0a1a      	lsrs	r2, r3, #8
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008d04:	4b11      	ldr	r3, [pc, #68]	; (8008d4c <CDC_Control_FS+0x158>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	0c1a      	lsrs	r2, r3, #16
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008d12:	4b0e      	ldr	r3, [pc, #56]	; (8008d4c <CDC_Control_FS+0x158>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	0e1a      	lsrs	r2, r3, #24
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	3303      	adds	r3, #3
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <CDC_Control_FS+0x158>)
 8008d26:	7912      	ldrb	r2, [r2, #4]
 8008d28:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	3305      	adds	r3, #5
 8008d2e:	4a07      	ldr	r2, [pc, #28]	; (8008d4c <CDC_Control_FS+0x158>)
 8008d30:	7952      	ldrb	r2, [r2, #5]
 8008d32:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	3306      	adds	r3, #6
 8008d38:	4a04      	ldr	r2, [pc, #16]	; (8008d4c <CDC_Control_FS+0x158>)
 8008d3a:	7992      	ldrb	r2, [r2, #6]
 8008d3c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8008d3e:	e000      	b.n	8008d42 <CDC_Control_FS+0x14e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d40:	bf00      	nop
  }

  return (USBD_OK);
 8008d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000011c 	.word	0x2000011c

08008d50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 HAL_UART_Transmit_DMA(&huart2, Buf, *Len);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4803      	ldr	r0, [pc, #12]	; (8008d74 <CDC_Receive_FS+0x24>)
 8008d66:	f7fc f883 	bl	8004e70 <HAL_UART_Transmit_DMA>
	  return (USBD_OK);
 8008d6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	2000503c 	.word	0x2000503c

08008d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  TIM period elapsed callback
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t buffptr;
  uint32_t buffsize;

  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8008d80:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b1d      	ldr	r3, [pc, #116]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d031      	beq.n	8008df0 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
    if(UserTxBufPtrOut > UserTxBufPtrIn) /* rollback */
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d905      	bls.n	8008da4 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
    	// for a rollback, we do the linear part first then roll around and print out the next part when we get to it
      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8008d98:	4b17      	ldr	r3, [pc, #92]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	e005      	b.n	8008db0 <HAL_TIM_PeriodElapsedCallback+0x38>
    }
    else
    {
    	// the next time the callback is called, we get that part that we missed
      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b13      	ldr	r3, [pc, #76]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	60fb      	str	r3, [r7, #12]
    }

    buffptr = UserTxBufPtrOut;
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]

    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, (uint8_t*)&UserTxBufferFS[buffptr], buffsize);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8008dba:	4413      	add	r3, r2
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	b292      	uxth	r2, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4810      	ldr	r0, [pc, #64]	; (8008e04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8008dc4:	f7fe fcf7 	bl	80077b6 <USBD_CDC_SetTxBuffer>

    if(USBD_CDC_TransmitPacket(&hUsbDeviceFS) == USBD_OK)
 8008dc8:	480e      	ldr	r0, [pc, #56]	; (8008e04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8008dca:	f7fe fd22 	bl	8007812 <USBD_CDC_TransmitPacket>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10d      	bne.n	8008df0 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
      UserTxBufPtrOut += buffsize;
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	4a06      	ldr	r2, [pc, #24]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008dde:	6013      	str	r3, [r2, #0]
      if (UserTxBufPtrOut == APP_RX_DATA_SIZE)
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de8:	d102      	bne.n	8008df0 <HAL_TIM_PeriodElapsedCallback+0x78>
      {
        UserTxBufPtrOut = 0;
 8008dea:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
      }
    }
  }
}
 8008df0:	bf00      	nop
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20004dd0 	.word	0x20004dd0
 8008dfc:	20004dcc 	.word	0x20004dcc
 8008e00:	20005c88 	.word	0x20005c88
 8008e04:	200051c0 	.word	0x200051c0

08008e08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  /* Increment Index for buffer writing */
  UserTxBufPtrIn++;
 8008e10:	4b16      	ldr	r3, [pc, #88]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3301      	adds	r3, #1
 8008e16:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e18:	6013      	str	r3, [r2, #0]

  /* To avoid buffer overflow */
  if(UserTxBufPtrIn == APP_RX_DATA_SIZE)
 8008e1a:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e22:	d102      	bne.n	8008e2a <HAL_UART_RxCpltCallback+0x22>
  {
    UserTxBufPtrIn = 0;
 8008e24:	4b11      	ldr	r3, [pc, #68]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
  }

  // to implement response storage
  if (responseSize > 0) {
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <HAL_UART_RxCpltCallback+0x68>)
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <HAL_UART_RxCpltCallback+0x48>
	  responseBuffer[--responseSize] = UserTxBufferFS[UserTxBufPtrIn];
 8008e32:	4b0e      	ldr	r3, [pc, #56]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a0e      	ldr	r2, [pc, #56]	; (8008e70 <HAL_UART_RxCpltCallback+0x68>)
 8008e38:	8812      	ldrh	r2, [r2, #0]
 8008e3a:	3a01      	subs	r2, #1
 8008e3c:	b291      	uxth	r1, r2
 8008e3e:	4a0c      	ldr	r2, [pc, #48]	; (8008e70 <HAL_UART_RxCpltCallback+0x68>)
 8008e40:	8011      	strh	r1, [r2, #0]
 8008e42:	4a0b      	ldr	r2, [pc, #44]	; (8008e70 <HAL_UART_RxCpltCallback+0x68>)
 8008e44:	8812      	ldrh	r2, [r2, #0]
 8008e46:	4611      	mov	r1, r2
 8008e48:	4a0a      	ldr	r2, [pc, #40]	; (8008e74 <HAL_UART_RxCpltCallback+0x6c>)
 8008e4a:	5cd2      	ldrb	r2, [r2, r3]
 8008e4c:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_UART_RxCpltCallback+0x70>)
 8008e4e:	545a      	strb	r2, [r3, r1]
  }

  /* Start another reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(huart, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_UART_RxCpltCallback+0x64>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a07      	ldr	r2, [pc, #28]	; (8008e74 <HAL_UART_RxCpltCallback+0x6c>)
 8008e56:	4413      	add	r3, r2
 8008e58:	2201      	movs	r2, #1
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7fb ff65 	bl	8004d2c <HAL_UART_Receive_IT>
  //Toggle_Leds();
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20004dcc 	.word	0x20004dcc
 8008e70:	20006488 	.word	0x20006488
 8008e74:	20005c88 	.word	0x20005c88
 8008e78:	200050bc 	.word	0x200050bc

08008e7c <HAL_UART_TxCpltCallback>:
  * @brief  Tx Transfer completed callback
  * @param  huart: UART handle
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	// once we've completed the transmit, prepare for the response
	responseSize = responseSizeTmp;
 8008e84:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <HAL_UART_TxCpltCallback+0x24>)
 8008e86:	881a      	ldrh	r2, [r3, #0]
 8008e88:	4b06      	ldr	r3, [pc, #24]	; (8008ea4 <HAL_UART_TxCpltCallback+0x28>)
 8008e8a:	801a      	strh	r2, [r3, #0]
	responseSizeTmp = 0;
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <HAL_UART_TxCpltCallback+0x24>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	801a      	strh	r2, [r3, #0]
  /* Initiate next USB packet transfer once UART completes transfer (transmitting data over Tx line) */
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e92:	4805      	ldr	r0, [pc, #20]	; (8008ea8 <HAL_UART_TxCpltCallback+0x2c>)
 8008e94:	f7fe fcec 	bl	8007870 <USBD_CDC_ReceivePacket>
  //Toggle_Leds();
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200009b4 	.word	0x200009b4
 8008ea4:	20006488 	.word	0x20006488
 8008ea8:	200051c0 	.word	0x200051c0

08008eac <ComPort_Config>:
  * @param  None.
  * @retval None.
  * @note   When a configuration is not supported, a default value is used.
  */
static void ComPort_Config(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  if(HAL_UART_DeInit(&huart2) != HAL_OK)
 8008eb0:	4837      	ldr	r0, [pc, #220]	; (8008f90 <ComPort_Config+0xe4>)
 8008eb2:	f7fb fe73 	bl	8004b9c <HAL_UART_DeInit>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <ComPort_Config+0x14>
  {
    /* Initialization Error */
    Error_Handler();
 8008ebc:	f7f7 fc3e 	bl	800073c <Error_Handler>
  }

  /* set the Stop bit */
  switch (LineCoding.format)
 8008ec0:	4b34      	ldr	r3, [pc, #208]	; (8008f94 <ComPort_Config+0xe8>)
 8008ec2:	791b      	ldrb	r3, [r3, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <ComPort_Config+0x22>
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d004      	beq.n	8008ed6 <ComPort_Config+0x2a>
 8008ecc:	e008      	b.n	8008ee0 <ComPort_Config+0x34>
  {
  case 0:
    huart2.Init.StopBits = UART_STOPBITS_1;
 8008ece:	4b30      	ldr	r3, [pc, #192]	; (8008f90 <ComPort_Config+0xe4>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	60da      	str	r2, [r3, #12]
    break;
 8008ed4:	e008      	b.n	8008ee8 <ComPort_Config+0x3c>
  case 2:
    huart2.Init.StopBits = UART_STOPBITS_2;
 8008ed6:	4b2e      	ldr	r3, [pc, #184]	; (8008f90 <ComPort_Config+0xe4>)
 8008ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008edc:	60da      	str	r2, [r3, #12]
    break;
 8008ede:	e003      	b.n	8008ee8 <ComPort_Config+0x3c>
  default :
    huart2.Init.StopBits = UART_STOPBITS_1;
 8008ee0:	4b2b      	ldr	r3, [pc, #172]	; (8008f90 <ComPort_Config+0xe4>)
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	60da      	str	r2, [r3, #12]
    break;
 8008ee6:	bf00      	nop
  }

  /* set the parity bit*/
  switch (LineCoding.paritytype)
 8008ee8:	4b2a      	ldr	r3, [pc, #168]	; (8008f94 <ComPort_Config+0xe8>)
 8008eea:	795b      	ldrb	r3, [r3, #5]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d007      	beq.n	8008f00 <ComPort_Config+0x54>
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d00a      	beq.n	8008f0a <ComPort_Config+0x5e>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10d      	bne.n	8008f14 <ComPort_Config+0x68>
  {
  case 0:
    huart2.Init.Parity = UART_PARITY_NONE;
 8008ef8:	4b25      	ldr	r3, [pc, #148]	; (8008f90 <ComPort_Config+0xe4>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	611a      	str	r2, [r3, #16]
    break;
 8008efe:	e00d      	b.n	8008f1c <ComPort_Config+0x70>
  case 1:
    huart2.Init.Parity = UART_PARITY_ODD;
 8008f00:	4b23      	ldr	r3, [pc, #140]	; (8008f90 <ComPort_Config+0xe4>)
 8008f02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008f06:	611a      	str	r2, [r3, #16]
    break;
 8008f08:	e008      	b.n	8008f1c <ComPort_Config+0x70>
  case 2:
    huart2.Init.Parity = UART_PARITY_EVEN;
 8008f0a:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <ComPort_Config+0xe4>)
 8008f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f10:	611a      	str	r2, [r3, #16]
    break;
 8008f12:	e003      	b.n	8008f1c <ComPort_Config+0x70>
  default :
    huart2.Init.Parity = UART_PARITY_NONE;
 8008f14:	4b1e      	ldr	r3, [pc, #120]	; (8008f90 <ComPort_Config+0xe4>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	611a      	str	r2, [r3, #16]
    break;
 8008f1a:	bf00      	nop
  }

  /*set the data type : only 8bits and 9bits is supported */
  switch (LineCoding.datatype)
 8008f1c:	4b1d      	ldr	r3, [pc, #116]	; (8008f94 <ComPort_Config+0xe8>)
 8008f1e:	799b      	ldrb	r3, [r3, #6]
 8008f20:	2b07      	cmp	r3, #7
 8008f22:	d002      	beq.n	8008f2a <ComPort_Config+0x7e>
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d004      	beq.n	8008f32 <ComPort_Config+0x86>
 8008f28:	e010      	b.n	8008f4c <ComPort_Config+0xa0>
  {
  case 0x07:
    /* With this configuration a parity (Even or Odd) must be set */
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f2a:	4b19      	ldr	r3, [pc, #100]	; (8008f90 <ComPort_Config+0xe4>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	609a      	str	r2, [r3, #8]
    break;
 8008f30:	e010      	b.n	8008f54 <ComPort_Config+0xa8>
  case 0x08:
    if(huart2.Init.Parity == UART_PARITY_NONE)
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <ComPort_Config+0xe4>)
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d103      	bne.n	8008f42 <ComPort_Config+0x96>
    {
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <ComPort_Config+0xe4>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	609a      	str	r2, [r3, #8]
    else
    {
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
    }

    break;
 8008f40:	e008      	b.n	8008f54 <ComPort_Config+0xa8>
      huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8008f42:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <ComPort_Config+0xe4>)
 8008f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008f48:	609a      	str	r2, [r3, #8]
    break;
 8008f4a:	e003      	b.n	8008f54 <ComPort_Config+0xa8>
  default :
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <ComPort_Config+0xe4>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
    break;
 8008f52:	bf00      	nop
  }

  huart2.Init.BaudRate = LineCoding.bitrate;
 8008f54:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <ComPort_Config+0xe8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a0d      	ldr	r2, [pc, #52]	; (8008f90 <ComPort_Config+0xe4>)
 8008f5a:	6053      	str	r3, [r2, #4]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <ComPort_Config+0xe4>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode       = UART_MODE_TX_RX;
 8008f62:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <ComPort_Config+0xe4>)
 8008f64:	220c      	movs	r2, #12
 8008f66:	615a      	str	r2, [r3, #20]

  if(HAL_UART_Init(&huart2) != HAL_OK)
 8008f68:	4809      	ldr	r0, [pc, #36]	; (8008f90 <ComPort_Config+0xe4>)
 8008f6a:	f7fb fdc9 	bl	8004b00 <HAL_UART_Init>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <ComPort_Config+0xcc>
  {
    /* Initialization Error */
    Error_Handler();
 8008f74:	f7f7 fbe2 	bl	800073c <Error_Handler>
  }

  /* Start reception: provide the buffer pointer with offset and the buffer size */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)(UserTxBufferFS + UserTxBufPtrIn), 1);
 8008f78:	4b07      	ldr	r3, [pc, #28]	; (8008f98 <ComPort_Config+0xec>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a07      	ldr	r2, [pc, #28]	; (8008f9c <ComPort_Config+0xf0>)
 8008f7e:	4413      	add	r3, r2
 8008f80:	2201      	movs	r2, #1
 8008f82:	4619      	mov	r1, r3
 8008f84:	4802      	ldr	r0, [pc, #8]	; (8008f90 <ComPort_Config+0xe4>)
 8008f86:	f7fb fed1 	bl	8004d2c <HAL_UART_Receive_IT>
}
 8008f8a:	bf00      	nop
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000503c 	.word	0x2000503c
 8008f94:	2000011c 	.word	0x2000011c
 8008f98:	20004dcc 	.word	0x20004dcc
 8008f9c:	20005c88 	.word	0x20005c88

08008fa0 <TIM_Config>:
  * @brief  TIM_Config: Configure TIMx timer
  * @param  None.
  * @retval None.
  */
static void TIM_Config(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* Set TIMx instance */
  TimHandle.Instance = TIMx;
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <TIM_Config+0x38>)
 8008fa6:	4a0d      	ldr	r2, [pc, #52]	; (8008fdc <TIM_Config+0x3c>)
 8008fa8:	601a      	str	r2, [r3, #0]
       + Period = 10000 - 1
       + Prescaler = ((SystemCoreClock/2)/10000) - 1
       + ClockDivision = 0
       + Counter direction = Up
  */
  TimHandle.Init.Period = (CDC_POLLING_INTERVAL*1000) - 1;
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <TIM_Config+0x38>)
 8008fac:	f241 3287 	movw	r2, #4999	; 0x1387
 8008fb0:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = 84-1;
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <TIM_Config+0x38>)
 8008fb4:	2253      	movs	r2, #83	; 0x53
 8008fb6:	605a      	str	r2, [r3, #4]
  TimHandle.Init.ClockDivision = 0;
 8008fb8:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <TIM_Config+0x38>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <TIM_Config+0x38>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8008fc4:	4804      	ldr	r0, [pc, #16]	; (8008fd8 <TIM_Config+0x38>)
 8008fc6:	f7fb fb3b 	bl	8004640 <HAL_TIM_Base_Init>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <TIM_Config+0x34>
  {
    /* Initialization Error */
    Error_Handler();
 8008fd0:	f7f7 fbb4 	bl	800073c <Error_Handler>
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	2000648c 	.word	0x2000648c
 8008fdc:	40000400 	.word	0x40000400

08008fe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callbacks
  * @param  huart2: UART handle
  * @retval None
  */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart2)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Transfer error occured in reception and/or transmission process */
  Error_Handler();
 8008fe8:	f7f7 fba8 	bl	800073c <Error_Handler>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2212      	movs	r2, #18
 8009004:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009006:	4b03      	ldr	r3, [pc, #12]	; (8009014 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	20000154 	.word	0x20000154

08009018 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	2204      	movs	r2, #4
 8009028:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800902a:	4b03      	ldr	r3, [pc, #12]	; (8009038 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	20000174 	.word	0x20000174

0800903c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4907      	ldr	r1, [pc, #28]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
 8009052:	4808      	ldr	r0, [pc, #32]	; (8009074 <USBD_FS_ProductStrDescriptor+0x38>)
 8009054:	f7ff fc52 	bl	80088fc <USBD_GetString>
 8009058:	e004      	b.n	8009064 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4904      	ldr	r1, [pc, #16]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
 800905e:	4805      	ldr	r0, [pc, #20]	; (8009074 <USBD_FS_ProductStrDescriptor+0x38>)
 8009060:	f7ff fc4c 	bl	80088fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	200064cc 	.word	0x200064cc
 8009074:	08009c88 	.word	0x08009c88

08009078 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	4904      	ldr	r1, [pc, #16]	; (8009098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009088:	4804      	ldr	r0, [pc, #16]	; (800909c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800908a:	f7ff fc37 	bl	80088fc <USBD_GetString>
  return USBD_StrDesc;
 800908e:	4b02      	ldr	r3, [pc, #8]	; (8009098 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	200064cc 	.word	0x200064cc
 800909c:	08009ca0 	.word	0x08009ca0

080090a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	6039      	str	r1, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	221a      	movs	r2, #26
 80090b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090b2:	f000 f855 	bl	8009160 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090b6:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20000178 	.word	0x20000178

080090c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d105      	bne.n	80090e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4907      	ldr	r1, [pc, #28]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090da:	4808      	ldr	r0, [pc, #32]	; (80090fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090dc:	f7ff fc0e 	bl	80088fc <USBD_GetString>
 80090e0:	e004      	b.n	80090ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	4904      	ldr	r1, [pc, #16]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090e6:	4805      	ldr	r0, [pc, #20]	; (80090fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090e8:	f7ff fc08 	bl	80088fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200064cc 	.word	0x200064cc
 80090fc:	08009cb4 	.word	0x08009cb4

08009100 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d105      	bne.n	800911e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	4907      	ldr	r1, [pc, #28]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009116:	4808      	ldr	r0, [pc, #32]	; (8009138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009118:	f7ff fbf0 	bl	80088fc <USBD_GetString>
 800911c:	e004      	b.n	8009128 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	4904      	ldr	r1, [pc, #16]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009122:	4805      	ldr	r0, [pc, #20]	; (8009138 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009124:	f7ff fbea 	bl	80088fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009128:	4b02      	ldr	r3, [pc, #8]	; (8009134 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	200064cc 	.word	0x200064cc
 8009138:	08009cc0 	.word	0x08009cc0

0800913c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	4603      	mov	r3, r0
 8009144:	6039      	str	r1, [r7, #0]
 8009146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	220c      	movs	r2, #12
 800914c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800914e:	4b03      	ldr	r3, [pc, #12]	; (800915c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000168 	.word	0x20000168

08009160 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009166:	4b0f      	ldr	r3, [pc, #60]	; (80091a4 <Get_SerialNum+0x44>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <Get_SerialNum+0x48>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009172:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <Get_SerialNum+0x4c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d009      	beq.n	800919a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009186:	2208      	movs	r2, #8
 8009188:	4909      	ldr	r1, [pc, #36]	; (80091b0 <Get_SerialNum+0x50>)
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f814 	bl	80091b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009190:	2204      	movs	r2, #4
 8009192:	4908      	ldr	r1, [pc, #32]	; (80091b4 <Get_SerialNum+0x54>)
 8009194:	68b8      	ldr	r0, [r7, #8]
 8009196:	f000 f80f 	bl	80091b8 <IntToUnicode>
  }
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	1fff7590 	.word	0x1fff7590
 80091a8:	1fff7594 	.word	0x1fff7594
 80091ac:	1fff7598 	.word	0x1fff7598
 80091b0:	2000017a 	.word	0x2000017a
 80091b4:	2000018a 	.word	0x2000018a

080091b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091ca:	2300      	movs	r3, #0
 80091cc:	75fb      	strb	r3, [r7, #23]
 80091ce:	e027      	b.n	8009220 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	0f1b      	lsrs	r3, r3, #28
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	d80b      	bhi.n	80091f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	0f1b      	lsrs	r3, r3, #28
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	4619      	mov	r1, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	440b      	add	r3, r1
 80091e8:	3230      	adds	r2, #48	; 0x30
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e00a      	b.n	8009206 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	0f1b      	lsrs	r3, r3, #28
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	4619      	mov	r1, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	440b      	add	r3, r1
 8009200:	3237      	adds	r2, #55	; 0x37
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	3301      	adds	r3, #1
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	2200      	movs	r2, #0
 8009218:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	3301      	adds	r3, #1
 800921e:	75fb      	strb	r3, [r7, #23]
 8009220:	7dfa      	ldrb	r2, [r7, #23]
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	429a      	cmp	r2, r3
 8009226:	d3d3      	bcc.n	80091d0 <IntToUnicode+0x18>
  }
}
 8009228:	bf00      	nop
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	; 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009254:	d14e      	bne.n	80092f4 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009256:	4b29      	ldr	r3, [pc, #164]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 8009258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800925a:	4a28      	ldr	r2, [pc, #160]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 800925c:	f043 0301 	orr.w	r3, r3, #1
 8009260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009262:	4b26      	ldr	r3, [pc, #152]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 8009264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009266:	f003 0301 	and.w	r3, r3, #1
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800926e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009274:	2302      	movs	r3, #2
 8009276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800927c:	2303      	movs	r3, #3
 800927e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009280:	230a      	movs	r3, #10
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009284:	f107 0314 	add.w	r3, r7, #20
 8009288:	4619      	mov	r1, r3
 800928a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800928e:	f7f8 fb75 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009292:	4b1a      	ldr	r3, [pc, #104]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 8009294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009296:	4a19      	ldr	r2, [pc, #100]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 8009298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800929c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800929e:	4b17      	ldr	r3, [pc, #92]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d114      	bne.n	80092e0 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	4a10      	ldr	r2, [pc, #64]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c0:	6593      	str	r3, [r2, #88]	; 0x58
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ca:	60bb      	str	r3, [r7, #8]
 80092cc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80092ce:	f7f9 ff0d 	bl	80030ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80092d2:	4b0a      	ldr	r3, [pc, #40]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	4a09      	ldr	r2, [pc, #36]	; (80092fc <HAL_PCD_MspInit+0xc8>)
 80092d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092dc:	6593      	str	r3, [r2, #88]	; 0x58
 80092de:	e001      	b.n	80092e4 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80092e0:	f7f9 ff04 	bl	80030ec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092e4:	2200      	movs	r2, #0
 80092e6:	2100      	movs	r1, #0
 80092e8:	2043      	movs	r0, #67	; 0x43
 80092ea:	f7f8 f838 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092ee:	2043      	movs	r0, #67	; 0x43
 80092f0:	f7f8 f851 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092f4:	bf00      	nop
 80092f6:	3728      	adds	r7, #40	; 0x28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	40021000 	.word	0x40021000

08009300 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f7fe fb62 	bl	80079e0 <USBD_LL_SetupStage>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	6879      	ldr	r1, [r7, #4]
 800933a:	4613      	mov	r3, r2
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	440b      	add	r3, r1
 8009344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	4619      	mov	r1, r3
 800934e:	f7fe fb92 	bl	8007a76 <USBD_LL_DataOutStage>
}
 8009352:	bf00      	nop
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	4613      	mov	r3, r2
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	3348      	adds	r3, #72	; 0x48
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	4619      	mov	r1, r3
 8009382:	f7fe fbe9 	bl	8007b58 <USBD_LL_DataInStage>
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe fcfc 	bl	8007d9a <USBD_LL_SOF>
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b084      	sub	sp, #16
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093b2:	2301      	movs	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d001      	beq.n	80093c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093be:	f7f7 f9bd 	bl	800073c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093c8:	7bfa      	ldrb	r2, [r7, #15]
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fca9 	bl	8007d24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fc62 	bl	8007ca2 <USBD_LL_Reset>
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009402:	f043 0301 	orr.w	r3, r3, #1
 8009406:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fc98 	bl	8007d44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a1b      	ldr	r3, [r3, #32]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <HAL_PCD_SuspendCallback+0x48>)
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	4a03      	ldr	r2, [pc, #12]	; (8009430 <HAL_PCD_SuspendCallback+0x48>)
 8009422:	f043 0306 	orr.w	r3, r3, #6
 8009426:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	e000ed00 	.word	0xe000ed00

08009434 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	6812      	ldr	r2, [r2, #0]
 800944a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a1b      	ldr	r3, [r3, #32]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d007      	beq.n	800946c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800945c:	4b08      	ldr	r3, [pc, #32]	; (8009480 <HAL_PCD_ResumeCallback+0x4c>)
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	4a07      	ldr	r2, [pc, #28]	; (8009480 <HAL_PCD_ResumeCallback+0x4c>)
 8009462:	f023 0306 	bic.w	r3, r3, #6
 8009466:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009468:	f000 fafa 	bl	8009a60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009472:	4618      	mov	r0, r3
 8009474:	f7fe fc7b 	bl	8007d6e <USBD_LL_Resume>
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	e000ed00 	.word	0xe000ed00

08009484 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fca4 	bl	8007de8 <USBD_LL_IsoOUTIncomplete>
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	4611      	mov	r1, r2
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fc85 	bl	8007dce <USBD_LL_IsoINIncomplete>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fc91 	bl	8007e02 <USBD_LL_DevConnected>
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fc8e 	bl	8007e18 <USBD_LL_DevDisconnected>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d13c      	bne.n	800958e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009514:	4a20      	ldr	r2, [pc, #128]	; (8009598 <USBD_LL_Init+0x94>)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <USBD_LL_Init+0x94>)
 8009520:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009524:	4b1c      	ldr	r3, [pc, #112]	; (8009598 <USBD_LL_Init+0x94>)
 8009526:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800952a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800952c:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <USBD_LL_Init+0x94>)
 800952e:	2206      	movs	r2, #6
 8009530:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009532:	4b19      	ldr	r3, [pc, #100]	; (8009598 <USBD_LL_Init+0x94>)
 8009534:	2202      	movs	r2, #2
 8009536:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009538:	4b17      	ldr	r3, [pc, #92]	; (8009598 <USBD_LL_Init+0x94>)
 800953a:	2202      	movs	r2, #2
 800953c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800953e:	4b16      	ldr	r3, [pc, #88]	; (8009598 <USBD_LL_Init+0x94>)
 8009540:	2200      	movs	r2, #0
 8009542:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009544:	4b14      	ldr	r3, [pc, #80]	; (8009598 <USBD_LL_Init+0x94>)
 8009546:	2200      	movs	r2, #0
 8009548:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800954a:	4b13      	ldr	r3, [pc, #76]	; (8009598 <USBD_LL_Init+0x94>)
 800954c:	2200      	movs	r2, #0
 800954e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8009550:	4b11      	ldr	r3, [pc, #68]	; (8009598 <USBD_LL_Init+0x94>)
 8009552:	2200      	movs	r2, #0
 8009554:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009556:	4b10      	ldr	r3, [pc, #64]	; (8009598 <USBD_LL_Init+0x94>)
 8009558:	2200      	movs	r2, #0
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800955c:	4b0e      	ldr	r3, [pc, #56]	; (8009598 <USBD_LL_Init+0x94>)
 800955e:	2200      	movs	r2, #0
 8009560:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009562:	480d      	ldr	r0, [pc, #52]	; (8009598 <USBD_LL_Init+0x94>)
 8009564:	f7f8 fcbe 	bl	8001ee4 <HAL_PCD_Init>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800956e:	f7f7 f8e5 	bl	800073c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009572:	2180      	movs	r1, #128	; 0x80
 8009574:	4808      	ldr	r0, [pc, #32]	; (8009598 <USBD_LL_Init+0x94>)
 8009576:	f7f9 fd20 	bl	8002fba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800957a:	2240      	movs	r2, #64	; 0x40
 800957c:	2100      	movs	r1, #0
 800957e:	4806      	ldr	r0, [pc, #24]	; (8009598 <USBD_LL_Init+0x94>)
 8009580:	f7f9 fcd4 	bl	8002f2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009584:	2280      	movs	r2, #128	; 0x80
 8009586:	2101      	movs	r1, #1
 8009588:	4803      	ldr	r0, [pc, #12]	; (8009598 <USBD_LL_Init+0x94>)
 800958a:	f7f9 fccf 	bl	8002f2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200066cc 	.word	0x200066cc

0800959c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f8 fdba 	bl	800212c <HAL_PCD_Start>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d816      	bhi.n	80095f0 <USBD_LL_Start+0x54>
 80095c2:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <USBD_LL_Start+0x2c>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	080095d9 	.word	0x080095d9
 80095cc:	080095df 	.word	0x080095df
 80095d0:	080095e5 	.word	0x080095e5
 80095d4:	080095eb 	.word	0x080095eb
    case HAL_OK :
      usb_status = USBD_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
    break;
 80095dc:	e00b      	b.n	80095f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095de:	2302      	movs	r3, #2
 80095e0:	73fb      	strb	r3, [r7, #15]
    break;
 80095e2:	e008      	b.n	80095f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	e005      	b.n	80095f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ea:	2302      	movs	r3, #2
 80095ec:	73fb      	strb	r3, [r7, #15]
    break;
 80095ee:	e002      	b.n	80095f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	bf00      	nop
  }
  return usb_status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	4608      	mov	r0, r1
 800960a:	4611      	mov	r1, r2
 800960c:	461a      	mov	r2, r3
 800960e:	4603      	mov	r3, r0
 8009610:	70fb      	strb	r3, [r7, #3]
 8009612:	460b      	mov	r3, r1
 8009614:	70bb      	strb	r3, [r7, #2]
 8009616:	4613      	mov	r3, r2
 8009618:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009628:	78bb      	ldrb	r3, [r7, #2]
 800962a:	883a      	ldrh	r2, [r7, #0]
 800962c:	78f9      	ldrb	r1, [r7, #3]
 800962e:	f7f9 f975 	bl	800291c <HAL_PCD_EP_Open>
 8009632:	4603      	mov	r3, r0
 8009634:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d817      	bhi.n	800966c <USBD_LL_OpenEP+0x6c>
 800963c:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <USBD_LL_OpenEP+0x44>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	08009655 	.word	0x08009655
 8009648:	0800965b 	.word	0x0800965b
 800964c:	08009661 	.word	0x08009661
 8009650:	08009667 	.word	0x08009667
    case HAL_OK :
      usb_status = USBD_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
    break;
 8009658:	e00b      	b.n	8009672 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800965a:	2302      	movs	r3, #2
 800965c:	73fb      	strb	r3, [r7, #15]
    break;
 800965e:	e008      	b.n	8009672 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009660:	2301      	movs	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
    break;
 8009664:	e005      	b.n	8009672 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009666:	2302      	movs	r3, #2
 8009668:	73fb      	strb	r3, [r7, #15]
    break;
 800966a:	e002      	b.n	8009672 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800966c:	2302      	movs	r3, #2
 800966e:	73fb      	strb	r3, [r7, #15]
    break;
 8009670:	bf00      	nop
  }
  return usb_status;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7f9 f9a6 	bl	80029ec <HAL_PCD_EP_Close>
 80096a0:	4603      	mov	r3, r0
 80096a2:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d816      	bhi.n	80096d8 <USBD_LL_CloseEP+0x5c>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_LL_CloseEP+0x34>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	080096c1 	.word	0x080096c1
 80096b4:	080096c7 	.word	0x080096c7
 80096b8:	080096cd 	.word	0x080096cd
 80096bc:	080096d3 	.word	0x080096d3
    case HAL_OK :
      usb_status = USBD_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
    break;
 80096c4:	e00b      	b.n	80096de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80096c6:	2302      	movs	r3, #2
 80096c8:	73fb      	strb	r3, [r7, #15]
    break;
 80096ca:	e008      	b.n	80096de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096cc:	2301      	movs	r3, #1
 80096ce:	73fb      	strb	r3, [r7, #15]
    break;
 80096d0:	e005      	b.n	80096de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	73fb      	strb	r3, [r7, #15]
    break;
 80096d6:	e002      	b.n	80096de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80096d8:	2302      	movs	r3, #2
 80096da:	73fb      	strb	r3, [r7, #15]
    break;
 80096dc:	bf00      	nop
  }
  return usb_status;  
 80096de:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009702:	78fa      	ldrb	r2, [r7, #3]
 8009704:	4611      	mov	r1, r2
 8009706:	4618      	mov	r0, r3
 8009708:	f7f9 fa4d 	bl	8002ba6 <HAL_PCD_EP_SetStall>
 800970c:	4603      	mov	r3, r0
 800970e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	2b03      	cmp	r3, #3
 8009714:	d816      	bhi.n	8009744 <USBD_LL_StallEP+0x5c>
 8009716:	a201      	add	r2, pc, #4	; (adr r2, 800971c <USBD_LL_StallEP+0x34>)
 8009718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971c:	0800972d 	.word	0x0800972d
 8009720:	08009733 	.word	0x08009733
 8009724:	08009739 	.word	0x08009739
 8009728:	0800973f 	.word	0x0800973f
    case HAL_OK :
      usb_status = USBD_OK;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
    break;
 8009730:	e00b      	b.n	800974a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009732:	2302      	movs	r3, #2
 8009734:	73fb      	strb	r3, [r7, #15]
    break;
 8009736:	e008      	b.n	800974a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009738:	2301      	movs	r3, #1
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	e005      	b.n	800974a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800973e:	2302      	movs	r3, #2
 8009740:	73fb      	strb	r3, [r7, #15]
    break;
 8009742:	e002      	b.n	800974a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009744:	2302      	movs	r3, #2
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	bf00      	nop
  }
  return usb_status;  
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f7f9 fa79 	bl	8002c6a <HAL_PCD_EP_ClrStall>
 8009778:	4603      	mov	r3, r0
 800977a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d816      	bhi.n	80097b0 <USBD_LL_ClearStallEP+0x5c>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <USBD_LL_ClearStallEP+0x34>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	08009799 	.word	0x08009799
 800978c:	0800979f 	.word	0x0800979f
 8009790:	080097a5 	.word	0x080097a5
 8009794:	080097ab 	.word	0x080097ab
    case HAL_OK :
      usb_status = USBD_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
    break;
 800979c:	e00b      	b.n	80097b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800979e:	2302      	movs	r3, #2
 80097a0:	73fb      	strb	r3, [r7, #15]
    break;
 80097a2:	e008      	b.n	80097b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097a4:	2301      	movs	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]
    break;
 80097a8:	e005      	b.n	80097b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097aa:	2302      	movs	r3, #2
 80097ac:	73fb      	strb	r3, [r7, #15]
    break;
 80097ae:	e002      	b.n	80097b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80097b0:	2302      	movs	r3, #2
 80097b2:	73fb      	strb	r3, [r7, #15]
    break;
 80097b4:	bf00      	nop
  }
  return usb_status; 
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80097d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0b      	bge.n	80097f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	4613      	mov	r3, r2
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	1a9b      	subs	r3, r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	333e      	adds	r3, #62	; 0x3e
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	e00b      	b.n	800980c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800980a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	460b      	mov	r3, r1
 8009822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f7f9 f84b 	bl	80028d2 <HAL_PCD_SetAddress>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2b03      	cmp	r3, #3
 8009844:	d816      	bhi.n	8009874 <USBD_LL_SetUSBAddress+0x5c>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <USBD_LL_SetUSBAddress+0x34>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800985d 	.word	0x0800985d
 8009850:	08009863 	.word	0x08009863
 8009854:	08009869 	.word	0x08009869
 8009858:	0800986f 	.word	0x0800986f
    case HAL_OK :
      usb_status = USBD_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
    break;
 8009860:	e00b      	b.n	800987a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009862:	2302      	movs	r3, #2
 8009864:	73fb      	strb	r3, [r7, #15]
    break;
 8009866:	e008      	b.n	800987a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009868:	2301      	movs	r3, #1
 800986a:	73fb      	strb	r3, [r7, #15]
    break;
 800986c:	e005      	b.n	800987a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	73fb      	strb	r3, [r7, #15]
    break;
 8009872:	e002      	b.n	800987a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009874:	2302      	movs	r3, #2
 8009876:	73fb      	strb	r3, [r7, #15]
    break;
 8009878:	bf00      	nop
  }
  return usb_status;  
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	461a      	mov	r2, r3
 8009890:	460b      	mov	r3, r1
 8009892:	72fb      	strb	r3, [r7, #11]
 8009894:	4613      	mov	r3, r2
 8009896:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098a6:	893b      	ldrh	r3, [r7, #8]
 80098a8:	7af9      	ldrb	r1, [r7, #11]
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	f7f9 f93e 	bl	8002b2c <HAL_PCD_EP_Transmit>
 80098b0:	4603      	mov	r3, r0
 80098b2:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 80098b4:	7dbb      	ldrb	r3, [r7, #22]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d816      	bhi.n	80098e8 <USBD_LL_Transmit+0x64>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <USBD_LL_Transmit+0x3c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098d7 	.word	0x080098d7
 80098c8:	080098dd 	.word	0x080098dd
 80098cc:	080098e3 	.word	0x080098e3
    case HAL_OK :
      usb_status = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	75fb      	strb	r3, [r7, #23]
    break;
 80098d4:	e00b      	b.n	80098ee <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098d6:	2302      	movs	r3, #2
 80098d8:	75fb      	strb	r3, [r7, #23]
    break;
 80098da:	e008      	b.n	80098ee <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
    break;
 80098e0:	e005      	b.n	80098ee <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098e2:	2302      	movs	r3, #2
 80098e4:	75fb      	strb	r3, [r7, #23]
    break;
 80098e6:	e002      	b.n	80098ee <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 80098e8:	2302      	movs	r3, #2
 80098ea:	75fb      	strb	r3, [r7, #23]
    break;
 80098ec:	bf00      	nop
  }
  return usb_status;    
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	607a      	str	r2, [r7, #4]
 8009902:	461a      	mov	r2, r3
 8009904:	460b      	mov	r3, r1
 8009906:	72fb      	strb	r3, [r7, #11]
 8009908:	4613      	mov	r3, r2
 800990a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800991a:	893b      	ldrh	r3, [r7, #8]
 800991c:	7af9      	ldrb	r1, [r7, #11]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	f7f9 f8ae 	bl	8002a80 <HAL_PCD_EP_Receive>
 8009924:	4603      	mov	r3, r0
 8009926:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8009928:	7dbb      	ldrb	r3, [r7, #22]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d816      	bhi.n	800995c <USBD_LL_PrepareReceive+0x64>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_LL_PrepareReceive+0x3c>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009945 	.word	0x08009945
 8009938:	0800994b 	.word	0x0800994b
 800993c:	08009951 	.word	0x08009951
 8009940:	08009957 	.word	0x08009957
    case HAL_OK :
      usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	75fb      	strb	r3, [r7, #23]
    break;
 8009948:	e00b      	b.n	8009962 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800994a:	2302      	movs	r3, #2
 800994c:	75fb      	strb	r3, [r7, #23]
    break;
 800994e:	e008      	b.n	8009962 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009950:	2301      	movs	r3, #1
 8009952:	75fb      	strb	r3, [r7, #23]
    break;
 8009954:	e005      	b.n	8009962 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009956:	2302      	movs	r3, #2
 8009958:	75fb      	strb	r3, [r7, #23]
    break;
 800995a:	e002      	b.n	8009962 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 800995c:	2302      	movs	r3, #2
 800995e:	75fb      	strb	r3, [r7, #23]
    break;
 8009960:	bf00      	nop
  }
  return usb_status; 
 8009962:	7dfb      	ldrb	r3, [r7, #23]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800997e:	78fa      	ldrb	r2, [r7, #3]
 8009980:	4611      	mov	r1, r2
 8009982:	4618      	mov	r0, r3
 8009984:	f7f9 f8ba 	bl	8002afc <HAL_PCD_EP_GetRxCount>
 8009988:	4603      	mov	r3, r0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80099a0:	78fb      	ldrb	r3, [r7, #3]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <HAL_PCDEx_LPM_Callback+0x18>
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d01f      	beq.n	80099ea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80099aa:	e03b      	b.n	8009a24 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d007      	beq.n	80099c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80099b4:	f000 f854 	bl	8009a60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099b8:	4b1c      	ldr	r3, [pc, #112]	; (8009a2c <HAL_PCDEx_LPM_Callback+0x98>)
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	4a1b      	ldr	r2, [pc, #108]	; (8009a2c <HAL_PCDEx_LPM_Callback+0x98>)
 80099be:	f023 0306 	bic.w	r3, r3, #6
 80099c2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	6812      	ldr	r2, [r2, #0]
 80099d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099d6:	f023 0301 	bic.w	r3, r3, #1
 80099da:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe f9c3 	bl	8007d6e <USBD_LL_Resume>
    break;
 80099e8:	e01c      	b.n	8009a24 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099fc:	f043 0301 	orr.w	r3, r3, #1
 8009a00:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fe f99b 	bl	8007d44 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d005      	beq.n	8009a22 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <HAL_PCDEx_LPM_Callback+0x98>)
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	4a04      	ldr	r2, [pc, #16]	; (8009a2c <HAL_PCDEx_LPM_Callback+0x98>)
 8009a1c:	f043 0306 	orr.w	r3, r3, #6
 8009a20:	6113      	str	r3, [r2, #16]
    break;   
 8009a22:	bf00      	nop
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	e000ed00 	.word	0xe000ed00

08009a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a38:	4b03      	ldr	r3, [pc, #12]	; (8009a48 <USBD_static_malloc+0x18>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	20004dd4 	.word	0x20004dd4

08009a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009a64:	f7f6 fdbc 	bl	80005e0 <SystemClock_Config>
}
 8009a68:	bf00      	nop
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <__libc_init_array>:
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4e0d      	ldr	r6, [pc, #52]	; (8009aa4 <__libc_init_array+0x38>)
 8009a70:	4c0d      	ldr	r4, [pc, #52]	; (8009aa8 <__libc_init_array+0x3c>)
 8009a72:	1ba4      	subs	r4, r4, r6
 8009a74:	10a4      	asrs	r4, r4, #2
 8009a76:	2500      	movs	r5, #0
 8009a78:	42a5      	cmp	r5, r4
 8009a7a:	d109      	bne.n	8009a90 <__libc_init_array+0x24>
 8009a7c:	4e0b      	ldr	r6, [pc, #44]	; (8009aac <__libc_init_array+0x40>)
 8009a7e:	4c0c      	ldr	r4, [pc, #48]	; (8009ab0 <__libc_init_array+0x44>)
 8009a80:	f000 f83e 	bl	8009b00 <_init>
 8009a84:	1ba4      	subs	r4, r4, r6
 8009a86:	10a4      	asrs	r4, r4, #2
 8009a88:	2500      	movs	r5, #0
 8009a8a:	42a5      	cmp	r5, r4
 8009a8c:	d105      	bne.n	8009a9a <__libc_init_array+0x2e>
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a94:	4798      	blx	r3
 8009a96:	3501      	adds	r5, #1
 8009a98:	e7ee      	b.n	8009a78 <__libc_init_array+0xc>
 8009a9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a9e:	4798      	blx	r3
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7f2      	b.n	8009a8a <__libc_init_array+0x1e>
 8009aa4:	08009d20 	.word	0x08009d20
 8009aa8:	08009d20 	.word	0x08009d20
 8009aac:	08009d20 	.word	0x08009d20
 8009ab0:	08009d24 	.word	0x08009d24

08009ab4 <memcpy>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	1e43      	subs	r3, r0, #1
 8009ab8:	440a      	add	r2, r1
 8009aba:	4291      	cmp	r1, r2
 8009abc:	d100      	bne.n	8009ac0 <memcpy+0xc>
 8009abe:	bd10      	pop	{r4, pc}
 8009ac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ac8:	e7f7      	b.n	8009aba <memcpy+0x6>

08009aca <memset>:
 8009aca:	4402      	add	r2, r0
 8009acc:	4603      	mov	r3, r0
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d100      	bne.n	8009ad4 <memset+0xa>
 8009ad2:	4770      	bx	lr
 8009ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad8:	e7f9      	b.n	8009ace <memset+0x4>

08009ada <strncmp>:
 8009ada:	b510      	push	{r4, lr}
 8009adc:	b16a      	cbz	r2, 8009afa <strncmp+0x20>
 8009ade:	3901      	subs	r1, #1
 8009ae0:	1884      	adds	r4, r0, r2
 8009ae2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ae6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d103      	bne.n	8009af6 <strncmp+0x1c>
 8009aee:	42a0      	cmp	r0, r4
 8009af0:	d001      	beq.n	8009af6 <strncmp+0x1c>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f5      	bne.n	8009ae2 <strncmp+0x8>
 8009af6:	1a98      	subs	r0, r3, r2
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	4610      	mov	r0, r2
 8009afc:	e7fc      	b.n	8009af8 <strncmp+0x1e>
	...

08009b00 <_init>:
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	bf00      	nop
 8009b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b06:	bc08      	pop	{r3}
 8009b08:	469e      	mov	lr, r3
 8009b0a:	4770      	bx	lr

08009b0c <_fini>:
 8009b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0e:	bf00      	nop
 8009b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b12:	bc08      	pop	{r3}
 8009b14:	469e      	mov	lr, r3
 8009b16:	4770      	bx	lr
